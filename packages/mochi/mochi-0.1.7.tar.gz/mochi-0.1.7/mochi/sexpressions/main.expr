(mac get! (ref)
  `((get ,ref 0)))

(def flatten (list_of_lists)
  (chain.from_iterable list_of_lists))

(mac set! (ref update_func)
 `((get ,ref 1) ,update_func))

(mac val (pattern value)
  (def keyword->str (keyword)
    (if (isinstance keyword Keyword)
      (str keyword)
      keyword))

  (def mapping_match? (target pattern)
    (_val len_pattern (len pattern))
    (if
      (== len_pattern 0) 'True
      (== len_pattern 1) `(in ,(keyword->str (car pattern)) ,target)
      (== len_pattern 2) `(and (in ,(keyword->str (car pattern)) ,target)
       ,(match? (v 'get target (keyword->str (car pattern))) (cadr pattern)))
      `(and ,(mapping_match? target (get pattern 0 2)) ,(mapping_match? target (get pattern 2 None)))))

  (def match? (target pattern)
      (if (== pattern 'True) `(is ,target True)
          (== pattern 'False) `(is ,target False)
          (== pattern 'None) `(is ,target None)
          (== pattern '_) 'True
          (isinstance pattern Symbol) 'True
          (isinstance pattern tuple)
            (do
              (_val len_pattern (len pattern))
                (if
                  (== len_pattern 0) `(and (isinstance ,target Sequence) (== (len ,target) 0))
                  (== (car pattern) 'make_list) (match? target (cdr pattern))
                  (== (car pattern) 'make_tuple) (match? target (cdr pattern))
                  (== (car pattern) 'table)
                    (if
                      (== len_pattern 1) `(isinstance ,target Mapping)
                      (> len_pattern 1) `(and (isinstance ,target Mapping) ,(mapping_match? target (cdr pattern)))
                      'False)
                  (== (car pattern) 'dict*)
                    (if
                      (== len_pattern 1) `(isinstance ,target Mapping)
                      (> len_pattern 1) `(and (isinstance ,target Mapping) ,(mapping_match? target (cdr pattern)))
                      'False)
                  (== len_pattern 1) `(and (isinstance ,target Sequence) (== (len ,target) 1) ,(match? (v 'car target)
                                                                                                     (car pattern)))
                  (in (Symbol "&") pattern) (do
                                              (_val len_pattern_fixed (pattern.index (Symbol "&")))
                                              `(and (isinstance ,target Sequence) (>= (len ,target) ,len_pattern_fixed)
                                                    ,(match? (v 'get target 0 len_pattern_fixed)
                                                             (get pattern 0 len_pattern_fixed))))
                  `(and (isinstance ,target Sequence) (== (len ,target) ,len_pattern)
                                                   ,(match? (v 'car target) (car pattern))
                                                   ,(match? (v 'cdr target) (cdr pattern)))))
          `(== ,target ,pattern)))

    (_val sym_num_seq (ref 0))
    (def gensym_match ()
      (set! sym_num_seq ~+ _ 1~)
      (Symbol (+ "m" (str #!sym_num_seq))))

  (def table_pattern_bind (pattern target)
      (_val len_pattern (len pattern))
      (if
        (== len_pattern 0) '()
        (== len_pattern 1) '()
        (+ (pattern_bind (get pattern 1) `(get ,target ,(keyword->str (car pattern))))
           (table_pattern_bind (get pattern 2 None) target))))

  (def pattern_bind (pattern target)
      (if (isinstance pattern Symbol) `((_val ,pattern ,target))
          (isinstance pattern tuple)
            (do
              (_val len_pattern (len pattern))
              (if
                (== len_pattern 0) '()
                (== (car pattern) 'make_list) (pattern_bind (cdr pattern) target)
                (== (car pattern) 'make_tuple) (pattern_bind (cdr pattern) target)
                (== (car pattern) 'table) (table_pattern_bind (cdr pattern) target)
                (== (car pattern) 'dict*) (table_pattern_bind (cdr pattern) target)
                (== len_pattern 1) (pattern_bind (car pattern) `(car ,target))
                (in (Symbol "&") pattern) (do
                                            (_val len_pattern_fixed (pattern.index (Symbol "&")))
                                            (+ (pattern_bind (get pattern 0 len_pattern_fixed)
                                                             `(get ,target 0 ,len_pattern_fixed))
                                               (pattern_bind (get pattern (+ len_pattern_fixed 1))
                                                             `(get ,target ,len_pattern_fixed None))))
                (+ (pattern_bind (get pattern 0) `(car ,target))
                   (pattern_bind (get pattern 1 None) `(cdr ,target)))))
          '()))
  (if (match? value pattern)
    `(do ,@(pattern_bind pattern value))
    None))

(mac tuple_of (& form)
  (val (bodyexpr bindingform) form)
  (if (== (len bindingform) 0)
      `(v ,bodyexpr)
    (do
      (val (binding seqexpr & bindings) bindingform)
      (if (== binding ':when)
        `(if ,seqexpr (tuple_of ,bodyexpr ,bindings))
        `(mapcat (fn (,binding) (tuple_of ,bodyexpr ,bindings))
                 ,seqexpr)))))


(mac list_of (& form)
  (val (bodyexpr bindingform) form)
  (if (== (len bindingform) 0)
      `(list* ,bodyexpr)
    (do
      (val (binding seqexpr & bindings) bindingform)
      (if (== binding ':when)
        `(if ,seqexpr (list_of ,bodyexpr ,bindings))
        `(mapcat (fn (,binding) (list_of ,bodyexpr ,bindings))
                 ,seqexpr)))))


(mac let (args & body)
 `((fn ()
    ,@(doall (map ~cons 'val _~ args))
    ,@body)))

;(mac and args
;  (if (null args) True
;    (null (rest args)) (first args)
;    `(if ,(first args) (and ,@(rest args)) False)))

;(mac or args
;  (if (null args)
;    False
;    (if (null (rest args))
;      (first args)
;     (let ((value (gensym)))
;     `(let ((,value ,(first args)))
;        (if ,value ,value (or ,@(rest args))))))))

(mac w/uniq (name & body)
  `(let ((,name (uniq)))
    ,@body))

(mac accum (accfn & body)
  (w/uniq gacc
    `(let ((,gacc #())
           (,accfn ~append ,gacc _~))
      ,@body
      (pvector ,gacc))))

(def readlines (path)
  (gen_with (open path "r")
     (fn (lines) lines)))

(def writelines (path lines)
  (with (((open path) w))
    (f.writelines lines)))

(mac defseq (name iterable)
  `(_val ,name (lazyseq ,iterable)))

(mac |>1 (operand & operators)
  (if (== (len operators) 0)
      operand
      (let ((operator (first operators))
        (rest_operators (rest operators)))
     (if (isinstance operator tuple)
         `(|>1 (,(first operator) ,operand ,@(rest operator)) ,@rest_operators)
       `(|>1 (,operator ,operand) ,@rest_operators)))))

(mac |> (operand & operators)
  (if (== (len operators) 0)
      operand
      (let ((operator (first operators))
        (rest_operators (rest operators)))
    (if (isinstance operator tuple)
        `(|> (,(first operator) ,@(rest operator) ,operand) ,@rest_operators)
      `(|> (,operator ,operand) ,@rest_operators)))))

(mac pipeline (& exps)
  `(|> ,@exps))

;(mac import (& targets)
;  `(_require_py_module (quote ,targets)))


(mac _match (target & pattern_procs)
    (def keyword->str (keyword)
      (if (isinstance keyword Keyword)
        (str keyword)
        keyword))

    (def mapping_match? (target pattern)
      (_val len_pattern (len pattern))
      (if
        (== len_pattern 0) 'True
        (== len_pattern 1) `(in ,(keyword->str (car pattern)) ,target)
        (== len_pattern 2) `(and (in ,(keyword->str (car pattern)) ,target)
         ,(match? (v 'get target (keyword->str (car pattern))) (cadr pattern)))
        `(and ,(mapping_match? target (get pattern 0 2)) ,(mapping_match? target (get pattern 2 None)))))

    (def match? (target pattern)
      (if (== pattern 'True) `(is ,target True)
          (== pattern 'False) `(is ,target False)
          (== pattern 'None) `(is ,target None)
          (== pattern '_) 'True
          (isinstance pattern Symbol) 'True
          (isinstance pattern tuple)
            (do
              (_val len_pattern (len pattern))
                (if
                  (== len_pattern 0) `(and (isinstance ,target Sequence) (== (len ,target) 0))
                  (== (car pattern) 'make_list) (match? target (cdr pattern))
                  (== (car pattern) 'make_tuple) (match? target (cdr pattern))
                  (== (car pattern) 'table)
                    (if
                      (== len_pattern 1) `(isinstance ,target Mapping)
                      (> len_pattern 1) `(and (isinstance ,target Mapping) ,(mapping_match? target (cdr pattern)))
                      'False)
                  (== (car pattern) 'dict*)
                    (if
                      (== len_pattern 1) `(isinstance ,target Mapping)
                      (> len_pattern 1) `(and (isinstance ,target Mapping) ,(mapping_match? target (cdr pattern)))
                      'False)
                  (and (== (car pattern) 'not) (== len_pattern 2))
                    `(not ,(match? target (cadr pattern)))
                  (== (car pattern) 'or)
                    (if
                      (== len_pattern 1) 'False
                      (== len_pattern 2) (match? target (cadr pattern))
                      `(or ,(match? target (cadr pattern)) ,(match? target (cons 'or (cddr pattern)))))
                  (== (car pattern) 'and)
                    (if
                      (== len_pattern 1) 'False
                      (== len_pattern 2) (match? target (cadr pattern))
                      `(and ,(match? target (cadr pattern)) ,(match? target (cons 'and (cddr pattern)))))
                  (== (car pattern) 'fn) `(,pattern ,target)
                  (== (car pattern) 'quote) `(== ,pattern ,target)
                  (== (car pattern) 'type) `(and (isinstance ,target ,(cadr pattern))
                                                 ,(match? target (caddr pattern)))
                  (== (car pattern) 'sequence_type) `(and (isinstance ,target ,(cadr pattern))
                                                          ,(match? target (cddr pattern)))
                  (== len_pattern 1) `(and (isinstance ,target Sequence) (== (len ,target) 1) ,(match? (v 'car target)
                                                                                                     (car pattern)))
                  (in (Symbol "&") pattern) (do
                                              (_val len_pattern_fixed (pattern.index (Symbol "&")))
                                              `(and (isinstance ,target Sequence) (>= (len ,target) ,len_pattern_fixed)
                                                    ,(match? (v 'get target 0 len_pattern_fixed)
                                                             (get pattern 0 len_pattern_fixed))))
                  `(and (isinstance ,target Sequence) (== (len ,target) ,len_pattern)
                                                   ,(match? (v 'car target) (car pattern))
                                                   ,(match? (v 'cdr target) (cdr pattern)))))
          `(== ,target ,pattern)))

    (_val sym_num_seq (ref 0))
    (def gensym_match ()
      (set! sym_num_seq ~+ _ 1~)
      (Symbol (+ "m" (str #!sym_num_seq))))

    (def table_pattern_bind (pattern target)
      (_val len_pattern (len pattern))
      (if
        (== len_pattern 0) '()
        (== len_pattern 1) '()
        (+ (pattern_bind (get pattern 1) `(get ,target ,(keyword->str (car pattern))))
           (table_pattern_bind (get pattern 2 None) target))))

    (def pattern_bind (pattern target)
      (if (== pattern 'True) '()
          (== pattern 'False) '()
          (== pattern 'None) '()
          (== pattern '_) '()
          (isinstance pattern Symbol) `((_val ,pattern ,target))
          (isinstance pattern tuple)
            (do
              (_val len_pattern (len pattern))
              (if
                (== len_pattern 0) '()
                (== (car pattern) 'not) '()
                (== (car pattern) 'or) '()
                (== (car pattern) 'and)
                  (if (== len_pattern 2)
                    (pattern_bind (cadr pattern) target)
                    (+ (pattern_bind (cadr pattern) target)
                       (pattern_bind (cons 'and (cddr pattern)) target)))
                (== (car pattern) 'make_list) (pattern_bind (get pattern 1 None) target)
                (== (car pattern) 'make_tuple) (pattern_bind (get pattern 1 None) target)
                (== (car pattern) 'table) (if (> len_pattern 2) (table_pattern_bind (cdr pattern) target))
                (== (car pattern) 'dict*) (if (> len_pattern 2) (table_pattern_bind (cdr pattern) target))
                (== (car pattern) 'fn) `((_val ,(gensym_match) ,target))
                (== (car pattern) 'quote) (pattern_bind (get pattern 1) target)
                (== (car pattern) 'type) (pattern_bind (caddr pattern) target)
                (== (car pattern) 'sequence_type) (pattern_bind (cddr pattern) target)
                (== len_pattern 1) (pattern_bind (car pattern) `(car ,target))
                (in (Symbol "&") pattern) (do
                                            (_val len_pattern_fixed (pattern.index (Symbol "&")))
                                            (+ (pattern_bind (get pattern 0 len_pattern_fixed)
                                                             `(get ,target 0 ,len_pattern_fixed))
                                               (pattern_bind (get pattern (+ len_pattern_fixed 1))
                                                             `(get ,target ,len_pattern_fixed None))))
                (+ (pattern_bind (get pattern 0) `(car ,target))
                   (pattern_bind (get pattern 1 None) `(cdr ,target)))))
          '()))

     (_val targetval (gensym))
     (_val result (gensym))
     (_val len_pattern_procs (len pattern_procs))
     (if (== len_pattern_procs 0) 'False
       (>= len_pattern_procs 1)
       (let (((pattern & procs) (first pattern_procs)))
     `(do
        (_val ,targetval ,target)
        (_val ,result ,(match? targetval pattern))
        (if ,result
          (do
            ,@(pattern_bind pattern targetval)
            ,@procs)
          (_match ,targetval ,@(cdr pattern_procs)))))))

(mac match (target & body)
  (_val pattern_procs (tuple (chunks body 2)))
  `(_match ,target ,@pattern_procs))

(mac def/match (fname & patterns)
  (_val argsym (gensym))
  `(def ,fname (& ,argsym)
  (match ,argsym
    ,@patterns)))

(mac defm (fname & patterns)
  (_val argsym (gensym))
  `(def ,fname (& ,argsym)
  (match ,argsym
    ,@patterns)))

(mac data (base_record_name & record_defs)
  `(do (record ,base_record_name ())
       ,@(map ~quasiquote (record ,(get _ 0) ,base_record_name ,(get _ 1 None))~ record_defs)))

(mac make_module (export & body)
  (def symbol->keyword (sym)
    (Keyword sym.name))
  (def make_exported_table (exported_symbols)
    (+ '(table) (tuple (flatten (map ~make_tuple (symbol->keyword _) _~ exported_symbols)))))
  (def make_exported_tuple (exported_symbols)
    (val tuple_name (gensym))
    (make_tuple
      `(record ,tuple_name Record ,exported_symbols)
      `(,tuple_name ,@exported_symbols)))
  `((fn () ,@body ,@(make_exported_tuple export))))

(mac module (name export & body)
  `(val ,name (make_module ,export ,@body)))

(mac del_hidden_vars ()
  (val hidden_var (gensym))
  `(for ,hidden_var (_get_hidden_vars)
    (if (in ,hidden_var (globals))
      (do
        (_del_hidden_var ,hidden_var)
        (delitem ,hidden_var (globals))))))

(mac del_hidden_vars_local ()
  (val hidden_var (gensym))
  `(for ,hidden_var (_get_hidden_vars)
    (if (in ,hidden_var (locals))
      (do
        (_del_hidden_var ,hidden_var)
        (delitem ,hidden_var (globals))))))


; itertools - recipes
(def take (n iterable)
  (pvector (islice iterable n)))

(def tabulate (func start)
  (map func (count start)))

(def quantify (iterable pred)
  (sum (map pred iterable)))

(def padnone (iterable)
  (chain iterable (repeat None)))

(def ncycles (iterable n)
  (chain.from_iterable (repeat (tuple iterable) n)))

(def dotproduct (t1 t2)
  (sum (map mul t1 t2)))

(def repeatfunc (func times & args)
  (if (is times None)
    (starmap func (repeat args)))
  (starmap func (repeat args times)))

(def pairwise (iterable)
  (val (a b) (tee iterable))
  (next b None)
  (zip a b))

(def grouper (iterable n fillvalue)
  (_val args (* (v (iter iterable)) n))
  (_val zip_longest (partial zip_longest :fillvalue fillvalue))
  (apply zip_longest args))

(def partition (pred iterable)
  (val (t1 t2) (tee iterable))
  (v (filterfalse pred t1) (filter pred t2)))

(def unique_justseen (iterable key)
  (map next (map (itemgetter 1) (groupby iterable key))))