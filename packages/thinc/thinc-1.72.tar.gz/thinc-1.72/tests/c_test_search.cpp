/* Generated by Cython 0.21.2 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21_2"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__tests__c_test_search
#define __PYX_HAVE_API__tests__c_test_search
#include "stdint.h"
#include <utility>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <queue>
#include <vector>
#include "string.h"
#include "stdio.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "tests/c_test_search.pyx",
  ".env/lib/python2.7/site-packages/cymem/cymem.pxd",
  ".env/lib/python2.7/site-packages/preshed/maps.pxd",
  "thinc/cache.pxd",
  "thinc/features.pxd",
  "thinc/learner.pxd",
  "thinc/search.pxd",
};

/* "preshed/maps.pxd":5
 * 
 * 
 * ctypedef uint64_t key_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef uint64_t __pyx_t_7preshed_4maps_key_t;

/* "thinc/typedefs.pxd":7
 * 
 * 
 * ctypedef float weight_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t
 */
typedef float __pyx_t_5thinc_8typedefs_weight_t;

/* "thinc/typedefs.pxd":8
 * 
 * ctypedef float weight_t
 * ctypedef uint64_t atom_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t feat_t
 * ctypedef int32_t class_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_atom_t;

/* "thinc/typedefs.pxd":9
 * ctypedef float weight_t
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t             # <<<<<<<<<<<<<<
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t
 */
typedef uint64_t __pyx_t_5thinc_8typedefs_feat_t;

/* "thinc/typedefs.pxd":10
 * ctypedef uint64_t atom_t
 * ctypedef uint64_t feat_t
 * ctypedef int32_t class_t             # <<<<<<<<<<<<<<
 * ctypedef uint32_t count_t
 * ctypedef uint32_t time_t
 */
typedef int32_t __pyx_t_5thinc_8typedefs_class_t;

/* "thinc/typedefs.pxd":11
 * ctypedef uint64_t feat_t
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t             # <<<<<<<<<<<<<<
 * ctypedef uint32_t time_t
 */
typedef uint32_t __pyx_t_5thinc_8typedefs_count_t;

/* "thinc/typedefs.pxd":12
 * ctypedef int32_t class_t
 * ctypedef uint32_t count_t
 * ctypedef uint32_t time_t             # <<<<<<<<<<<<<<
 */
typedef uint32_t __pyx_t_5thinc_8typedefs_time_t;

/*--- Type declarations ---*/
struct __pyx_obj_5cymem_5cymem_Pool;
struct __pyx_obj_5cymem_5cymem_Address;
struct __pyx_obj_7preshed_4maps_PreshMap;
struct __pyx_obj_7preshed_4maps_PreshMapArray;
struct __pyx_obj_5thinc_5cache_ScoresCache;
struct __pyx_obj_5thinc_8features_Extractor;
struct __pyx_obj_5thinc_7learner_LinearModel;
struct __pyx_obj_5thinc_7learner__Writer;
struct __pyx_obj_5thinc_7learner__Reader;
struct __pyx_obj_5thinc_6search_Beam;
struct __pyx_obj_5thinc_6search_MaxViolation;
struct __pyx_t_7preshed_4maps_Cell;
struct __pyx_t_7preshed_4maps_MapStruct;

/* "preshed/maps.pxd":8
 * 
 * 
 * cdef struct Cell:             # <<<<<<<<<<<<<<
 *     key_t key
 *     void* value
 */
struct __pyx_t_7preshed_4maps_Cell {
  __pyx_t_7preshed_4maps_key_t key;
  void *value;
};

/* "preshed/maps.pxd":13
 * 
 * 
 * cdef struct MapStruct:             # <<<<<<<<<<<<<<
 *     Cell* cells
 *     void* value_for_empty_key
 */
struct __pyx_t_7preshed_4maps_MapStruct {
  struct __pyx_t_7preshed_4maps_Cell *cells;
  void *value_for_empty_key;
  void *value_for_del_key;
  __pyx_t_7preshed_4maps_key_t length;
  __pyx_t_7preshed_4maps_key_t filled;
  int is_empty_key_set;
  int is_del_key_set;
};
struct __pyx_t_5thinc_8features_Template;
struct __pyx_t_5thinc_8features_Feature;

/* "thinc/features.pxd":8
 * 
 * 
 * cdef struct Template:             # <<<<<<<<<<<<<<
 *     int[MAX_TEMPLATE_LEN] indices
 *     int length
 */
struct __pyx_t_5thinc_8features_Template {
  int indices[10];
  int length;
  __pyx_t_5thinc_8typedefs_atom_t atoms[10];
};

/* "thinc/features.pxd":14
 * 
 * 
 * cdef struct Feature:             # <<<<<<<<<<<<<<
 *     int i
 *     feat_t key
 */
struct __pyx_t_5thinc_8features_Feature {
  int i;
  __pyx_t_5thinc_8typedefs_feat_t key;
  __pyx_t_5thinc_8typedefs_weight_t value;
};
struct __pyx_t_5thinc_7weights_WeightLine;
struct __pyx_t_5thinc_7weights_MetaData;
struct __pyx_t_5thinc_7weights_MDLine;
struct __pyx_t_5thinc_7weights_TrainFeat;

/* "thinc/weights.pxd":21
 * 
 * 
 * ctypedef weight_t[LINE_SIZE] weight_line_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef __pyx_t_5thinc_8typedefs_weight_t __pyx_t_5thinc_7weights_weight_line_t[8];

/* "thinc/weights.pxd":26
 * # A set of weights, to be read in. Start indicates the class that w[0] refers
 * # to. Subsequent weights go from there.
 * cdef struct WeightLine:             # <<<<<<<<<<<<<<
 *     weight_line_t line
 *     int32_t start
 */
struct __pyx_t_5thinc_7weights_WeightLine {
  __pyx_t_5thinc_7weights_weight_line_t line;
  int32_t start;
};

/* "thinc/weights.pxd":31
 * 
 * 
 * cdef struct MetaData:             # <<<<<<<<<<<<<<
 *     weight_t total
 *     time_t time
 */
struct __pyx_t_5thinc_7weights_MetaData {
  __pyx_t_5thinc_8typedefs_weight_t total;
  __pyx_t_5thinc_8typedefs_time_t time;
};

/* "thinc/weights.pxd":38
 * 
 * 
 * cdef struct MDLine:             # <<<<<<<<<<<<<<
 *      MetaData[LINE_SIZE] line
 * 
 */
struct __pyx_t_5thinc_7weights_MDLine {
  struct __pyx_t_5thinc_7weights_MetaData line[8];
};

/* "thinc/weights.pxd":42
 * 
 * 
 * cdef struct TrainFeat:             # <<<<<<<<<<<<<<
 *     WeightLine* weights
 *     MDLine* meta
 */
struct __pyx_t_5thinc_7weights_TrainFeat {
  struct __pyx_t_5thinc_7weights_WeightLine *weights;
  struct __pyx_t_5thinc_7weights_MDLine *meta;
  uint32_t length;
  uint32_t _resize_at;
};
struct __pyx_t_5thinc_6search__State;

/* "thinc/search.pxd":12
 * 
 * 
 * ctypedef pair[weight_t, size_t] Entry             # <<<<<<<<<<<<<<
 * ctypedef priority_queue[Entry] Queue
 * 
 */
typedef std::pair<__pyx_t_5thinc_8typedefs_weight_t,size_t>  __pyx_t_5thinc_6search_Entry;

/* "thinc/search.pxd":13
 * 
 * ctypedef pair[weight_t, size_t] Entry
 * ctypedef priority_queue[Entry] Queue             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::priority_queue<__pyx_t_5thinc_6search_Entry>  __pyx_t_5thinc_6search_Queue;

/* "thinc/search.pxd":16
 * 
 * 
 * ctypedef int (*trans_func_t)(void* dest, void* src, class_t clas, void* x) except -1             # <<<<<<<<<<<<<<
 * 
 * ctypedef void* (*init_func_t)(Pool mem, int n, void* extra_args) except NULL
 */
typedef int (*__pyx_t_5thinc_6search_trans_func_t)(void *, void *, __pyx_t_5thinc_8typedefs_class_t, void *);

/* "thinc/search.pxd":18
 * ctypedef int (*trans_func_t)(void* dest, void* src, class_t clas, void* x) except -1
 * 
 * ctypedef void* (*init_func_t)(Pool mem, int n, void* extra_args) except NULL             # <<<<<<<<<<<<<<
 * 
 * ctypedef int (*finish_func_t)(void* state, void* extra_args) except -1
 */
typedef void *(*__pyx_t_5thinc_6search_init_func_t)(struct __pyx_obj_5cymem_5cymem_Pool *, int, void *);

/* "thinc/search.pxd":20
 * ctypedef void* (*init_func_t)(Pool mem, int n, void* extra_args) except NULL
 * 
 * ctypedef int (*finish_func_t)(void* state, void* extra_args) except -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef int (*__pyx_t_5thinc_6search_finish_func_t)(void *, void *);

/* "thinc/search.pxd":23
 * 
 * 
 * cdef struct _State:             # <<<<<<<<<<<<<<
 *     void* content
 *     class_t* hist
 */
struct __pyx_t_5thinc_6search__State {
  void *content;
  __pyx_t_5thinc_8typedefs_class_t *hist;
  __pyx_t_5thinc_8typedefs_weight_t score;
  int loss;
  int i;
  int t;
  int is_done;
};
struct __pyx_t_5tests_13c_test_search_TestState;

/* "tests/c_test_search.pyx":7
 * 
 * 
 * cdef struct TestState:             # <<<<<<<<<<<<<<
 *     int length
 *     int x
 */
struct __pyx_t_5tests_13c_test_search_TestState {
  int length;
  int x;
  Py_UNICODE *string;
};

/* "cymem/cymem.pxd":1
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */
struct __pyx_obj_5cymem_5cymem_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtab;
  size_t size;
  PyObject *addresses;
};


/* "cymem/cymem.pxd":10
 * 
 * 
 * cdef class Address:             # <<<<<<<<<<<<<<
 *     cdef void* ptr
 */
struct __pyx_obj_5cymem_5cymem_Address {
  PyObject_HEAD
  void *ptr;
};


/* "preshed/maps.pxd":32
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */
struct __pyx_obj_7preshed_4maps_PreshMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtab;
  struct __pyx_t_7preshed_4maps_MapStruct *c_map;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
};


/* "preshed/maps.pxd":40
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */
struct __pyx_obj_7preshed_4maps_PreshMapArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_7preshed_4maps_MapStruct *maps;
  size_t length;
};


/* "thinc/cache.pxd":6
 * from .typedefs cimport *
 * 
 * cdef class ScoresCache:             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef size_t max_size
 */
struct __pyx_obj_5thinc_5cache_ScoresCache {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_5cache_ScoresCache *__pyx_vtab;
  size_t i;
  size_t max_size;
  __pyx_t_5thinc_8typedefs_class_t scores_size;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  __pyx_t_5thinc_8typedefs_weight_t **_arrays;
  __pyx_t_5thinc_8typedefs_weight_t *_scores_if_full;
  struct __pyx_obj_7preshed_4maps_PreshMap *_cache;
  size_t n_hit;
  size_t n_total;
};


/* "thinc/features.pxd":20
 * 
 * 
 * cdef class Extractor:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef Template* templates
 */
struct __pyx_obj_5thinc_8features_Extractor {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_8features_Extractor *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_5thinc_8features_Template *templates;
  struct __pyx_t_5thinc_8features_Feature *feats;
  int n_templ;
};


/* "thinc/learner.pxd":19
 * 
 * 
 * cdef class LinearModel:             # <<<<<<<<<<<<<<
 *     cdef time_t time
 *     cdef readonly class_t nr_class
 */
struct __pyx_obj_5thinc_7learner_LinearModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_7learner_LinearModel *__pyx_vtab;
  __pyx_t_5thinc_8typedefs_time_t time;
  __pyx_t_5thinc_8typedefs_class_t nr_class;
  int nr_templates;
  size_t n_corr;
  size_t total;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_7preshed_4maps_PreshMap *weights;
  struct __pyx_obj_5thinc_5cache_ScoresCache *cache;
  __pyx_t_5thinc_8typedefs_weight_t *scores;
  struct __pyx_t_5thinc_7weights_WeightLine *_weight_lines;
  size_t _max_wl;
};


/* "thinc/learner.pxd":47
 * 
 * 
 * cdef class _Writer:             # <<<<<<<<<<<<<<
 *     cdef FILE* _fp
 *     cdef class_t _nr_class
 */
struct __pyx_obj_5thinc_7learner__Writer {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_7learner__Writer *__pyx_vtab;
  FILE *_fp;
  __pyx_t_5thinc_8typedefs_class_t _nr_class;
  __pyx_t_5thinc_8typedefs_count_t _freq_thresh;
};


/* "thinc/learner.pxd":55
 * 
 * 
 * cdef class _Reader:             # <<<<<<<<<<<<<<
 *     cdef FILE* _fp
 *     cdef class_t _nr_class
 */
struct __pyx_obj_5thinc_7learner__Reader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_7learner__Reader *__pyx_vtab;
  FILE *_fp;
  __pyx_t_5thinc_8typedefs_class_t _nr_class;
  __pyx_t_5thinc_8typedefs_count_t _freq_thresh;
};


/* "thinc/search.pxd":33
 * 
 * 
 * cdef class Beam:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef class_t nr_class
 */
struct __pyx_obj_5thinc_6search_Beam {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6search_Beam *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  __pyx_t_5thinc_8typedefs_class_t nr_class;
  __pyx_t_5thinc_8typedefs_class_t width;
  __pyx_t_5thinc_8typedefs_class_t size;
  int is_done;
  PyObject *histories;
  PyObject *_parent_histories;
  __pyx_t_5thinc_6search_Queue *q;
  __pyx_t_5thinc_8typedefs_weight_t **scores;
  int **is_valid;
  int **costs;
  struct __pyx_t_5thinc_6search__State *_parents;
  struct __pyx_t_5thinc_6search__State *_states;
};


/* "thinc/search.pxd":67
 * 
 * 
 * cdef class MaxViolation:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef int cost
 */
struct __pyx_obj_5thinc_6search_MaxViolation {
  PyObject_HEAD
  struct __pyx_vtabstruct_5thinc_6search_MaxViolation *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  int cost;
  __pyx_t_5thinc_8typedefs_weight_t delta;
  __pyx_t_5thinc_8typedefs_class_t n;
  PyObject *p_hist;
  PyObject *g_hist;
};



/* "cymem/cymem.pxd":1
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */

struct __pyx_vtabstruct_5cymem_5cymem_Pool {
  void *(*alloc)(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t);
  void (*free)(struct __pyx_obj_5cymem_5cymem_Pool *, void *);
  void *(*realloc)(struct __pyx_obj_5cymem_5cymem_Pool *, void *, size_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtabptr_5cymem_5cymem_Pool;


/* "preshed/maps.pxd":32
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMap {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtabptr_7preshed_4maps_PreshMap;


/* "preshed/maps.pxd":40
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
 */

struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtabptr_7preshed_4maps_PreshMapArray;


/* "thinc/cache.pxd":6
 * from .typedefs cimport *
 * 
 * cdef class ScoresCache:             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef size_t max_size
 */

struct __pyx_vtabstruct_5thinc_5cache_ScoresCache {
  __pyx_t_5thinc_8typedefs_weight_t *(*lookup)(struct __pyx_obj_5thinc_5cache_ScoresCache *, __pyx_t_5thinc_8typedefs_class_t, void *, int *);
};
static struct __pyx_vtabstruct_5thinc_5cache_ScoresCache *__pyx_vtabptr_5thinc_5cache_ScoresCache;


/* "thinc/features.pxd":20
 * 
 * 
 * cdef class Extractor:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef Template* templates
 */

struct __pyx_vtabstruct_5thinc_8features_Extractor {
  struct __pyx_t_5thinc_8features_Feature *(*get_feats)(struct __pyx_obj_5thinc_8features_Extractor *, __pyx_t_5thinc_8typedefs_atom_t *, int *);
  int (*set_feats)(struct __pyx_obj_5thinc_8features_Extractor *, struct __pyx_t_5thinc_8features_Feature *, __pyx_t_5thinc_8typedefs_atom_t *);
};
static struct __pyx_vtabstruct_5thinc_8features_Extractor *__pyx_vtabptr_5thinc_8features_Extractor;


/* "thinc/learner.pxd":19
 * 
 * 
 * cdef class LinearModel:             # <<<<<<<<<<<<<<
 *     cdef time_t time
 *     cdef readonly class_t nr_class
 */

struct __pyx_vtabstruct_5thinc_7learner_LinearModel {
  int (*update)(struct __pyx_obj_5thinc_7learner_LinearModel *, PyObject *, int __pyx_skip_dispatch);
  __pyx_t_5thinc_8typedefs_weight_t const *(*get_scores)(struct __pyx_obj_5thinc_7learner_LinearModel *, struct __pyx_t_5thinc_8features_Feature const *, int const );
  int (*set_scores)(struct __pyx_obj_5thinc_7learner_LinearModel *, __pyx_t_5thinc_8typedefs_weight_t *, struct __pyx_t_5thinc_8features_Feature const *, int const );
};
static struct __pyx_vtabstruct_5thinc_7learner_LinearModel *__pyx_vtabptr_5thinc_7learner_LinearModel;
static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t const *__pyx_f_5thinc_7learner_11LinearModel_get_scores(struct __pyx_obj_5thinc_7learner_LinearModel *, struct __pyx_t_5thinc_8features_Feature const *, int const );
static CYTHON_INLINE int __pyx_f_5thinc_7learner_11LinearModel_set_scores(struct __pyx_obj_5thinc_7learner_LinearModel *, __pyx_t_5thinc_8typedefs_weight_t *, struct __pyx_t_5thinc_8features_Feature const *, int const );


/* "thinc/learner.pxd":47
 * 
 * 
 * cdef class _Writer:             # <<<<<<<<<<<<<<
 *     cdef FILE* _fp
 *     cdef class_t _nr_class
 */

struct __pyx_vtabstruct_5thinc_7learner__Writer {
  int (*write)(struct __pyx_obj_5thinc_7learner__Writer *, __pyx_t_5thinc_8typedefs_feat_t, struct __pyx_t_5thinc_7weights_TrainFeat *);
};
static struct __pyx_vtabstruct_5thinc_7learner__Writer *__pyx_vtabptr_5thinc_7learner__Writer;


/* "thinc/learner.pxd":55
 * 
 * 
 * cdef class _Reader:             # <<<<<<<<<<<<<<
 *     cdef FILE* _fp
 *     cdef class_t _nr_class
 */

struct __pyx_vtabstruct_5thinc_7learner__Reader {
  int (*read)(struct __pyx_obj_5thinc_7learner__Reader *, struct __pyx_obj_5cymem_5cymem_Pool *, __pyx_t_5thinc_8typedefs_feat_t *, struct __pyx_t_5thinc_7weights_TrainFeat **);
};
static struct __pyx_vtabstruct_5thinc_7learner__Reader *__pyx_vtabptr_5thinc_7learner__Reader;


/* "thinc/search.pxd":33
 * 
 * 
 * cdef class Beam:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef class_t nr_class
 */

struct __pyx_vtabstruct_5thinc_6search_Beam {
  int (*_fill)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_8typedefs_weight_t **, int **);
  void *(*at)(struct __pyx_obj_5thinc_6search_Beam *, int);
  int (*initialize)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_init_func_t, int, void *);
  int (*advance)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_trans_func_t, void *);
  int (*check_done)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_6search_finish_func_t, void *);
  void (*set_cell)(struct __pyx_obj_5thinc_6search_Beam *, int, int, __pyx_t_5thinc_8typedefs_weight_t, int, int);
  int (*set_row)(struct __pyx_obj_5thinc_6search_Beam *, int, __pyx_t_5thinc_8typedefs_weight_t *, int *, int *);
  int (*set_table)(struct __pyx_obj_5thinc_6search_Beam *, __pyx_t_5thinc_8typedefs_weight_t **, int **, int **);
};
static struct __pyx_vtabstruct_5thinc_6search_Beam *__pyx_vtabptr_5thinc_6search_Beam;
static CYTHON_INLINE void *__pyx_f_5thinc_6search_4Beam_at(struct __pyx_obj_5thinc_6search_Beam *, int);
static CYTHON_INLINE void __pyx_f_5thinc_6search_4Beam_set_cell(struct __pyx_obj_5thinc_6search_Beam *, int, int, __pyx_t_5thinc_8typedefs_weight_t, int, int);


/* "thinc/search.pxd":67
 * 
 * 
 * cdef class MaxViolation:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef int cost
 */

struct __pyx_vtabstruct_5thinc_6search_MaxViolation {
  int (*check)(struct __pyx_obj_5thinc_6search_MaxViolation *, struct __pyx_obj_5thinc_6search_Beam *, struct __pyx_obj_5thinc_6search_Beam *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5thinc_6search_MaxViolation *__pyx_vtabptr_5thinc_6search_MaxViolation;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static void* __Pyx_GetVtable(PyObject *dict);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t const *__pyx_f_5thinc_7learner_11LinearModel_get_scores(struct __pyx_obj_5thinc_7learner_LinearModel *__pyx_v_self, struct __pyx_t_5thinc_8features_Feature const *__pyx_v_feats, int const __pyx_v_n_feats); /* proto*/
static CYTHON_INLINE int __pyx_f_5thinc_7learner_11LinearModel_set_scores(struct __pyx_obj_5thinc_7learner_LinearModel *__pyx_v_self, __pyx_t_5thinc_8typedefs_weight_t *__pyx_v_scores, struct __pyx_t_5thinc_8features_Feature const *__pyx_v_feats, int const __pyx_v_n_feats); /* proto*/
static CYTHON_INLINE void *__pyx_f_5thinc_6search_4Beam_at(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE void __pyx_f_5thinc_6search_4Beam_set_cell(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, int __pyx_v_i, int __pyx_v_j, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_score, int __pyx_v_is_valid, int __pyx_v_cost); /* proto*/

/* Module declarations from 'cymem.cymem' */
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Pool = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Address = 0;

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.queue' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'preshed.maps' */
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMap = 0;
static PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMapArray = 0;

/* Module declarations from 'thinc.typedefs' */

/* Module declarations from 'thinc.cache' */
static PyTypeObject *__pyx_ptype_5thinc_5cache_ScoresCache = 0;

/* Module declarations from 'thinc.features' */
static PyTypeObject *__pyx_ptype_5thinc_8features_Extractor = 0;

/* Module declarations from 'thinc.weights' */
static int (*__pyx_f_5thinc_7weights_gather_weights)(struct __pyx_t_7preshed_4maps_MapStruct *, __pyx_t_5thinc_8typedefs_class_t const , struct __pyx_t_5thinc_7weights_WeightLine *, struct __pyx_t_5thinc_8features_Feature const *, int const ); /*proto*/
static int (*__pyx_f_5thinc_7weights_set_scores)(__pyx_t_5thinc_8typedefs_weight_t *, struct __pyx_t_5thinc_7weights_WeightLine const *, __pyx_t_5thinc_8typedefs_class_t const , __pyx_t_5thinc_8typedefs_class_t const ); /*proto*/

/* Module declarations from 'thinc.learner' */
static PyTypeObject *__pyx_ptype_5thinc_7learner_LinearModel = 0;
static PyTypeObject *__pyx_ptype_5thinc_7learner__Writer = 0;
static PyTypeObject *__pyx_ptype_5thinc_7learner__Reader = 0;

/* Module declarations from 'thinc.search' */
static PyTypeObject *__pyx_ptype_5thinc_6search_Beam = 0;
static PyTypeObject *__pyx_ptype_5thinc_6search_MaxViolation = 0;

/* Module declarations from 'tests.c_test_search' */
static int __pyx_f_5tests_13c_test_search_transition(void *, void *, __pyx_t_5thinc_8typedefs_class_t, void *); /*proto*/
static void *__pyx_f_5tests_13c_test_search_initialize(struct __pyx_obj_5cymem_5cymem_Pool *, int, void *); /*proto*/
#define __Pyx_MODULE_NAME "tests.c_test_search"
int __pyx_module_is_main_tests__c_test_search = 0;

/* Implementation of 'tests.c_test_search' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_pf_5tests_13c_test_search_test_init(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_nr_class, PyObject *__pyx_v_beam_width); /* proto */
static PyObject *__pyx_pf_5tests_13c_test_search_2test_initialize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_nr_class, PyObject *__pyx_v_beam_width, PyObject *__pyx_v_length); /* proto */
static PyObject *__pyx_pf_5tests_13c_test_search_4test_initialize_extra(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_nr_class, PyObject *__pyx_v_beam_width, PyObject *__pyx_v_length, PyObject *__pyx_v_extra); /* proto */
static PyObject *__pyx_pf_5tests_13c_test_search_6test_transition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_nr_class, PyObject *__pyx_v_beam_width, PyObject *__pyx_v_length); /* proto */
static char __pyx_k_b[] = "b";
static char __pyx_k_i[] = "i";
static char __pyx_k_s[] = "s";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_extra[] = "extra";
static char __pyx_k_range[] = "range";
static char __pyx_k_score[] = "score";
static char __pyx_k_length[] = "length";
static char __pyx_k_default[] = "default";
static char __pyx_k_nr_class[] = "nr_class";
static char __pyx_k_test_init[] = "test_init";
static char __pyx_k_beam_width[] = "beam_width";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_test_initialize[] = "test_initialize";
static char __pyx_k_test_transition[] = "test_transition";
static char __pyx_k_tests_c_test_search[] = "tests.c_test_search";
static char __pyx_k_test_initialize_extra[] = "test_initialize_extra";
static char __pyx_k_Users_matt_repos_thinc_tests_c[] = "/Users/matt/repos/thinc/tests/c_test_search.pyx";
static Py_UNICODE __pyx_k_[] = { 100,101,102,97,117,108,116,0 };
static PyObject *__pyx_kp_s_Users_matt_repos_thinc_tests_c;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_beam_width;
static PyObject *__pyx_n_u_default;
static PyObject *__pyx_n_s_extra;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_nr_class;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_score;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_test_init;
static PyObject *__pyx_n_s_test_initialize;
static PyObject *__pyx_n_s_test_initialize_extra;
static PyObject *__pyx_n_s_test_transition;
static PyObject *__pyx_n_s_tests_c_test_search;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_30;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;

/* "tests/c_test_search.pyx":13
 * 
 * 
 * cdef int transition(void* dest, void* src, class_t clas, void* extra_args) except -1:             # <<<<<<<<<<<<<<
 *     dest_state = <TestState*>dest
 *     src_state = <TestState*>src
 */

static int __pyx_f_5tests_13c_test_search_transition(void *__pyx_v_dest, void *__pyx_v_src, __pyx_t_5thinc_8typedefs_class_t __pyx_v_clas, void *__pyx_v_extra_args) {
  struct __pyx_t_5tests_13c_test_search_TestState *__pyx_v_dest_state;
  struct __pyx_t_5tests_13c_test_search_TestState *__pyx_v_src_state;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_UNICODE *__pyx_t_3;
  __Pyx_RefNannySetupContext("transition", 0);

  /* "tests/c_test_search.pyx":14
 * 
 * cdef int transition(void* dest, void* src, class_t clas, void* extra_args) except -1:
 *     dest_state = <TestState*>dest             # <<<<<<<<<<<<<<
 *     src_state = <TestState*>src
 *     dest_state.length = src_state.length
 */
  __pyx_v_dest_state = ((struct __pyx_t_5tests_13c_test_search_TestState *)__pyx_v_dest);

  /* "tests/c_test_search.pyx":15
 * cdef int transition(void* dest, void* src, class_t clas, void* extra_args) except -1:
 *     dest_state = <TestState*>dest
 *     src_state = <TestState*>src             # <<<<<<<<<<<<<<
 *     dest_state.length = src_state.length
 *     dest_state.x = src_state.x
 */
  __pyx_v_src_state = ((struct __pyx_t_5tests_13c_test_search_TestState *)__pyx_v_src);

  /* "tests/c_test_search.pyx":16
 *     dest_state = <TestState*>dest
 *     src_state = <TestState*>src
 *     dest_state.length = src_state.length             # <<<<<<<<<<<<<<
 *     dest_state.x = src_state.x
 *     dest_state.x += clas
 */
  __pyx_t_1 = __pyx_v_src_state->length;
  __pyx_v_dest_state->length = __pyx_t_1;

  /* "tests/c_test_search.pyx":17
 *     src_state = <TestState*>src
 *     dest_state.length = src_state.length
 *     dest_state.x = src_state.x             # <<<<<<<<<<<<<<
 *     dest_state.x += clas
 *     if extra_args != NULL:
 */
  __pyx_t_1 = __pyx_v_src_state->x;
  __pyx_v_dest_state->x = __pyx_t_1;

  /* "tests/c_test_search.pyx":18
 *     dest_state.length = src_state.length
 *     dest_state.x = src_state.x
 *     dest_state.x += clas             # <<<<<<<<<<<<<<
 *     if extra_args != NULL:
 *         dest_state.string = <Py_UNICODE*>extra_args
 */
  __pyx_v_dest_state->x = (__pyx_v_dest_state->x + __pyx_v_clas);

  /* "tests/c_test_search.pyx":19
 *     dest_state.x = src_state.x
 *     dest_state.x += clas
 *     if extra_args != NULL:             # <<<<<<<<<<<<<<
 *         dest_state.string = <Py_UNICODE*>extra_args
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_extra_args != NULL) != 0);
  if (__pyx_t_2) {

    /* "tests/c_test_search.pyx":20
 *     dest_state.x += clas
 *     if extra_args != NULL:
 *         dest_state.string = <Py_UNICODE*>extra_args             # <<<<<<<<<<<<<<
 *     else:
 *         dest_state.string = src_state.string
 */
    __pyx_v_dest_state->string = ((Py_UNICODE *)__pyx_v_extra_args);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "tests/c_test_search.pyx":22
 *         dest_state.string = <Py_UNICODE*>extra_args
 *     else:
 *         dest_state.string = src_state.string             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_v_src_state->string;
    __pyx_v_dest_state->string = __pyx_t_3;
  }
  __pyx_L3:;

  /* "tests/c_test_search.pyx":13
 * 
 * 
 * cdef int transition(void* dest, void* src, class_t clas, void* extra_args) except -1:             # <<<<<<<<<<<<<<
 *     dest_state = <TestState*>dest
 *     src_state = <TestState*>src
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tests/c_test_search.pyx":25
 * 
 * 
 * cdef void* initialize(Pool mem, int n, void* extra_args) except NULL:             # <<<<<<<<<<<<<<
 *     state = <TestState*>mem.alloc(sizeof(TestState), 1)
 *     state.length = n
 */

static void *__pyx_f_5tests_13c_test_search_initialize(struct __pyx_obj_5cymem_5cymem_Pool *__pyx_v_mem, int __pyx_v_n, void *__pyx_v_extra_args) {
  struct __pyx_t_5tests_13c_test_search_TestState *__pyx_v_state;
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "tests/c_test_search.pyx":26
 * 
 * cdef void* initialize(Pool mem, int n, void* extra_args) except NULL:
 *     state = <TestState*>mem.alloc(sizeof(TestState), 1)             # <<<<<<<<<<<<<<
 *     state.length = n
 *     state.x = 1
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_mem->__pyx_vtab)->alloc(__pyx_v_mem, (sizeof(struct __pyx_t_5tests_13c_test_search_TestState)), 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_state = ((struct __pyx_t_5tests_13c_test_search_TestState *)__pyx_t_1);

  /* "tests/c_test_search.pyx":27
 * cdef void* initialize(Pool mem, int n, void* extra_args) except NULL:
 *     state = <TestState*>mem.alloc(sizeof(TestState), 1)
 *     state.length = n             # <<<<<<<<<<<<<<
 *     state.x = 1
 *     if extra_args == NULL:
 */
  __pyx_v_state->length = __pyx_v_n;

  /* "tests/c_test_search.pyx":28
 *     state = <TestState*>mem.alloc(sizeof(TestState), 1)
 *     state.length = n
 *     state.x = 1             # <<<<<<<<<<<<<<
 *     if extra_args == NULL:
 *         state.string = 'default'
 */
  __pyx_v_state->x = 1;

  /* "tests/c_test_search.pyx":29
 *     state.length = n
 *     state.x = 1
 *     if extra_args == NULL:             # <<<<<<<<<<<<<<
 *         state.string = 'default'
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_extra_args == NULL) != 0);
  if (__pyx_t_2) {

    /* "tests/c_test_search.pyx":30
 *     state.x = 1
 *     if extra_args == NULL:
 *         state.string = 'default'             # <<<<<<<<<<<<<<
 *     else:
 *         state.string = <Py_UNICODE*>extra_args
 */
    __pyx_v_state->string = __pyx_k_;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "tests/c_test_search.pyx":32
 *         state.string = 'default'
 *     else:
 *         state.string = <Py_UNICODE*>extra_args             # <<<<<<<<<<<<<<
 *     return state
 * 
 */
    __pyx_v_state->string = ((Py_UNICODE *)__pyx_v_extra_args);
  }
  __pyx_L3:;

  /* "tests/c_test_search.pyx":33
 *     else:
 *         state.string = <Py_UNICODE*>extra_args
 *     return state             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_state;
  goto __pyx_L0;

  /* "tests/c_test_search.pyx":25
 * 
 * 
 * cdef void* initialize(Pool mem, int n, void* extra_args) except NULL:             # <<<<<<<<<<<<<<
 *     state = <TestState*>mem.alloc(sizeof(TestState), 1)
 *     state.length = n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tests.c_test_search.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tests/c_test_search.pyx":36
 * 
 * 
 * def test_init(nr_class, beam_width):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     assert b.size == 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tests_13c_test_search_1test_init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5tests_13c_test_search_1test_init = {"test_init", (PyCFunction)__pyx_pw_5tests_13c_test_search_1test_init, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5tests_13c_test_search_1test_init(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nr_class = 0;
  PyObject *__pyx_v_beam_width = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_init (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nr_class,&__pyx_n_s_beam_width,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nr_class)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beam_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_init", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "test_init") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_nr_class = values[0];
    __pyx_v_beam_width = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("test_init", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tests.c_test_search.test_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tests_13c_test_search_test_init(__pyx_self, __pyx_v_nr_class, __pyx_v_beam_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tests_13c_test_search_test_init(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_nr_class, PyObject *__pyx_v_beam_width) {
  struct __pyx_obj_5thinc_6search_Beam *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("test_init", 0);

  /* "tests/c_test_search.pyx":37
 * 
 * def test_init(nr_class, beam_width):
 *     b = Beam(nr_class, beam_width)             # <<<<<<<<<<<<<<
 *     assert b.size == 1
 *     assert b.width == beam_width
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_nr_class);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_nr_class);
  __Pyx_GIVEREF(__pyx_v_nr_class);
  __Pyx_INCREF(__pyx_v_beam_width);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_beam_width);
  __Pyx_GIVEREF(__pyx_v_beam_width);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5thinc_6search_Beam)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_b = ((struct __pyx_obj_5thinc_6search_Beam *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tests/c_test_search.pyx":38
 * def test_init(nr_class, beam_width):
 *     b = Beam(nr_class, beam_width)
 *     assert b.size == 1             # <<<<<<<<<<<<<<
 *     assert b.width == beam_width
 *     assert b.nr_class == nr_class
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_b->size == 1) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "tests/c_test_search.pyx":39
 *     b = Beam(nr_class, beam_width)
 *     assert b.size == 1
 *     assert b.width == beam_width             # <<<<<<<<<<<<<<
 *     assert b.nr_class == nr_class
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_b->width); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_beam_width, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "tests/c_test_search.pyx":40
 *     assert b.size == 1
 *     assert b.width == beam_width
 *     assert b.nr_class == nr_class             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_b->nr_class); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_nr_class, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "tests/c_test_search.pyx":36
 * 
 * 
 * def test_init(nr_class, beam_width):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     assert b.size == 1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tests.c_test_search.test_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tests/c_test_search.pyx":43
 * 
 * 
 * def test_initialize(nr_class, beam_width, length):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tests_13c_test_search_3test_initialize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5tests_13c_test_search_3test_initialize = {"test_initialize", (PyCFunction)__pyx_pw_5tests_13c_test_search_3test_initialize, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5tests_13c_test_search_3test_initialize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nr_class = 0;
  PyObject *__pyx_v_beam_width = 0;
  PyObject *__pyx_v_length = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nr_class,&__pyx_n_s_beam_width,&__pyx_n_s_length,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nr_class)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beam_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_initialize", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_initialize", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "test_initialize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_nr_class = values[0];
    __pyx_v_beam_width = values[1];
    __pyx_v_length = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("test_initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tests.c_test_search.test_initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tests_13c_test_search_2test_initialize(__pyx_self, __pyx_v_nr_class, __pyx_v_beam_width, __pyx_v_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tests_13c_test_search_2test_initialize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_nr_class, PyObject *__pyx_v_beam_width, PyObject *__pyx_v_length) {
  struct __pyx_obj_5thinc_6search_Beam *__pyx_v_b = NULL;
  __pyx_t_5thinc_8typedefs_class_t __pyx_v_i;
  struct __pyx_t_5tests_13c_test_search_TestState *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_5;
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("test_initialize", 0);

  /* "tests/c_test_search.pyx":44
 * 
 * def test_initialize(nr_class, beam_width, length):
 *     b = Beam(nr_class, beam_width)             # <<<<<<<<<<<<<<
 *     b.initialize(initialize, length, NULL)
 *     for i in range(b.width):
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_nr_class);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_nr_class);
  __Pyx_GIVEREF(__pyx_v_nr_class);
  __Pyx_INCREF(__pyx_v_beam_width);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_beam_width);
  __Pyx_GIVEREF(__pyx_v_beam_width);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5thinc_6search_Beam)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_b = ((struct __pyx_obj_5thinc_6search_Beam *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tests/c_test_search.pyx":45
 * def test_initialize(nr_class, beam_width, length):
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)             # <<<<<<<<<<<<<<
 *     for i in range(b.width):
 *         s = <TestState*>b.at(i)
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_length); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = ((struct __pyx_vtabstruct_5thinc_6search_Beam *)__pyx_v_b->__pyx_vtab)->initialize(__pyx_v_b, __pyx_f_5tests_13c_test_search_initialize, __pyx_t_3, NULL); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tests/c_test_search.pyx":46
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)
 *     for i in range(b.width):             # <<<<<<<<<<<<<<
 *         s = <TestState*>b.at(i)
 *         assert s.length == length, s.length
 */
  __pyx_t_5 = __pyx_v_b->width;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "tests/c_test_search.pyx":47
 *     b.initialize(initialize, length, NULL)
 *     for i in range(b.width):
 *         s = <TestState*>b.at(i)             # <<<<<<<<<<<<<<
 *         assert s.length == length, s.length
 *         assert s.string == 'default'
 */
    __pyx_v_s = ((struct __pyx_t_5tests_13c_test_search_TestState *)__pyx_f_5thinc_6search_4Beam_at(__pyx_v_b, __pyx_v_i));

    /* "tests/c_test_search.pyx":48
 *     for i in range(b.width):
 *         s = <TestState*>b.at(i)
 *         assert s.length == length, s.length             # <<<<<<<<<<<<<<
 *         assert s.string == 'default'
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_s->length); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_length, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) {
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_s->length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyTuple_Pack(1, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        PyErr_SetObject(PyExc_AssertionError, __pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif

    /* "tests/c_test_search.pyx":49
 *         s = <TestState*>b.at(i)
 *         assert s.length == length, s.length
 *         assert s.string == 'default'             # <<<<<<<<<<<<<<
 * 
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = __Pyx_PyUnicode_FromUnicode(__pyx_v_s->string); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_default, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_7)) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif
  }

  /* "tests/c_test_search.pyx":43
 * 
 * 
 * def test_initialize(nr_class, beam_width, length):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tests.c_test_search.test_initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tests/c_test_search.pyx":52
 * 
 * 
 * def test_initialize_extra(nr_class, beam_width, length, unicode extra):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, <void*><Py_UNICODE*>extra)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tests_13c_test_search_5test_initialize_extra(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5tests_13c_test_search_5test_initialize_extra = {"test_initialize_extra", (PyCFunction)__pyx_pw_5tests_13c_test_search_5test_initialize_extra, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5tests_13c_test_search_5test_initialize_extra(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nr_class = 0;
  PyObject *__pyx_v_beam_width = 0;
  PyObject *__pyx_v_length = 0;
  PyObject *__pyx_v_extra = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_initialize_extra (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nr_class,&__pyx_n_s_beam_width,&__pyx_n_s_length,&__pyx_n_s_extra,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nr_class)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beam_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_initialize_extra", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_initialize_extra", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_extra)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("test_initialize_extra", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "test_initialize_extra") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_nr_class = values[0];
    __pyx_v_beam_width = values[1];
    __pyx_v_length = values[2];
    __pyx_v_extra = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("test_initialize_extra", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tests.c_test_search.test_initialize_extra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_extra), (&PyUnicode_Type), 1, "extra", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5tests_13c_test_search_4test_initialize_extra(__pyx_self, __pyx_v_nr_class, __pyx_v_beam_width, __pyx_v_length, __pyx_v_extra);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tests_13c_test_search_4test_initialize_extra(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_nr_class, PyObject *__pyx_v_beam_width, PyObject *__pyx_v_length, PyObject *__pyx_v_extra) {
  struct __pyx_obj_5thinc_6search_Beam *__pyx_v_b = NULL;
  __pyx_t_5thinc_8typedefs_class_t __pyx_v_i;
  struct __pyx_t_5tests_13c_test_search_TestState *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_UNICODE *__pyx_t_4;
  int __pyx_t_5;
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_6;
  __pyx_t_5thinc_8typedefs_class_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("test_initialize_extra", 0);

  /* "tests/c_test_search.pyx":53
 * 
 * def test_initialize_extra(nr_class, beam_width, length, unicode extra):
 *     b = Beam(nr_class, beam_width)             # <<<<<<<<<<<<<<
 *     b.initialize(initialize, length, <void*><Py_UNICODE*>extra)
 *     for i in range(b.width):
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_nr_class);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_nr_class);
  __Pyx_GIVEREF(__pyx_v_nr_class);
  __Pyx_INCREF(__pyx_v_beam_width);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_beam_width);
  __Pyx_GIVEREF(__pyx_v_beam_width);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5thinc_6search_Beam)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_b = ((struct __pyx_obj_5thinc_6search_Beam *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tests/c_test_search.pyx":54
 * def test_initialize_extra(nr_class, beam_width, length, unicode extra):
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, <void*><Py_UNICODE*>extra)             # <<<<<<<<<<<<<<
 *     for i in range(b.width):
 *         s = <TestState*>b.at(i)
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_length); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyUnicode_AsUnicode(__pyx_v_extra); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = ((struct __pyx_vtabstruct_5thinc_6search_Beam *)__pyx_v_b->__pyx_vtab)->initialize(__pyx_v_b, __pyx_f_5tests_13c_test_search_initialize, __pyx_t_3, ((void *)((Py_UNICODE *)__pyx_t_4))); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tests/c_test_search.pyx":55
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, <void*><Py_UNICODE*>extra)
 *     for i in range(b.width):             # <<<<<<<<<<<<<<
 *         s = <TestState*>b.at(i)
 *         assert s.length == length
 */
  __pyx_t_6 = __pyx_v_b->width;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "tests/c_test_search.pyx":56
 *     b.initialize(initialize, length, <void*><Py_UNICODE*>extra)
 *     for i in range(b.width):
 *         s = <TestState*>b.at(i)             # <<<<<<<<<<<<<<
 *         assert s.length == length
 * 
 */
    __pyx_v_s = ((struct __pyx_t_5tests_13c_test_search_TestState *)__pyx_f_5thinc_6search_4Beam_at(__pyx_v_b, __pyx_v_i));

    /* "tests/c_test_search.pyx":57
 *     for i in range(b.width):
 *         s = <TestState*>b.at(i)
 *         assert s.length == length             # <<<<<<<<<<<<<<
 * 
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_s->length); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_length, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_8)) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif
  }

  /* "tests/c_test_search.pyx":52
 * 
 * 
 * def test_initialize_extra(nr_class, beam_width, length, unicode extra):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, <void*><Py_UNICODE*>extra)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tests.c_test_search.test_initialize_extra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tests/c_test_search.pyx":60
 * 
 * 
 * def test_transition(nr_class=3, beam_width=6, length=3):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tests_13c_test_search_7test_transition(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5tests_13c_test_search_7test_transition = {"test_transition", (PyCFunction)__pyx_pw_5tests_13c_test_search_7test_transition, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5tests_13c_test_search_7test_transition(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nr_class = 0;
  PyObject *__pyx_v_beam_width = 0;
  PyObject *__pyx_v_length = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_transition (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nr_class,&__pyx_n_s_beam_width,&__pyx_n_s_length,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_int_3);
    values[1] = ((PyObject *)__pyx_int_6);
    values[2] = ((PyObject *)__pyx_int_3);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nr_class);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beam_width);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_length);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "test_transition") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nr_class = values[0];
    __pyx_v_beam_width = values[1];
    __pyx_v_length = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("test_transition", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("tests.c_test_search.test_transition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tests_13c_test_search_6test_transition(__pyx_self, __pyx_v_nr_class, __pyx_v_beam_width, __pyx_v_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tests_13c_test_search_6test_transition(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_nr_class, PyObject *__pyx_v_beam_width, PyObject *__pyx_v_length) {
  struct __pyx_obj_5thinc_6search_Beam *__pyx_v_b = NULL;
  struct __pyx_t_5tests_13c_test_search_TestState *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("test_transition", 0);

  /* "tests/c_test_search.pyx":61
 * 
 * def test_transition(nr_class=3, beam_width=6, length=3):
 *     b = Beam(nr_class, beam_width)             # <<<<<<<<<<<<<<
 *     b.initialize(initialize, length, NULL)
 *     b.set_cell(0, 2, 30, True, 0)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_nr_class);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_nr_class);
  __Pyx_GIVEREF(__pyx_v_nr_class);
  __Pyx_INCREF(__pyx_v_beam_width);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_beam_width);
  __Pyx_GIVEREF(__pyx_v_beam_width);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5thinc_6search_Beam)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_b = ((struct __pyx_obj_5thinc_6search_Beam *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "tests/c_test_search.pyx":62
 * def test_transition(nr_class=3, beam_width=6, length=3):
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)             # <<<<<<<<<<<<<<
 *     b.set_cell(0, 2, 30, True, 0)
 *     b.set_cell(0, 1, 42, False, 0)
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_length); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = ((struct __pyx_vtabstruct_5thinc_6search_Beam *)__pyx_v_b->__pyx_vtab)->initialize(__pyx_v_b, __pyx_f_5tests_13c_test_search_initialize, __pyx_t_3, NULL); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tests/c_test_search.pyx":63
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)
 *     b.set_cell(0, 2, 30, True, 0)             # <<<<<<<<<<<<<<
 *     b.set_cell(0, 1, 42, False, 0)
 *     b.advance(transition, NULL)
 */
  __pyx_f_5thinc_6search_4Beam_set_cell(__pyx_v_b, 0, 2, 30.0, 1, 0);

  /* "tests/c_test_search.pyx":64
 *     b.initialize(initialize, length, NULL)
 *     b.set_cell(0, 2, 30, True, 0)
 *     b.set_cell(0, 1, 42, False, 0)             # <<<<<<<<<<<<<<
 *     b.advance(transition, NULL)
 *     assert b.size == 1, b.size
 */
  __pyx_f_5thinc_6search_4Beam_set_cell(__pyx_v_b, 0, 1, 42.0, 0, 0);

  /* "tests/c_test_search.pyx":65
 *     b.set_cell(0, 2, 30, True, 0)
 *     b.set_cell(0, 1, 42, False, 0)
 *     b.advance(transition, NULL)             # <<<<<<<<<<<<<<
 *     assert b.size == 1, b.size
 *     assert b.score == 30, b.score
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_5thinc_6search_Beam *)__pyx_v_b->__pyx_vtab)->advance(__pyx_v_b, __pyx_f_5tests_13c_test_search_transition, NULL); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tests/c_test_search.pyx":66
 *     b.set_cell(0, 1, 42, False, 0)
 *     b.advance(transition, NULL)
 *     assert b.size == 1, b.size             # <<<<<<<<<<<<<<
 *     assert b.score == 30, b.score
 *     s = <TestState*>b.at(0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_b->size == 1) != 0))) {
      __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_b->size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "tests/c_test_search.pyx":67
 *     b.advance(transition, NULL)
 *     assert b.size == 1, b.size
 *     assert b.score == 30, b.score             # <<<<<<<<<<<<<<
 *     s = <TestState*>b.at(0)
 *     assert s.x == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_b), __pyx_n_s_score); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_30, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_b), __pyx_n_s_score); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "tests/c_test_search.pyx":68
 *     assert b.size == 1, b.size
 *     assert b.score == 30, b.score
 *     s = <TestState*>b.at(0)             # <<<<<<<<<<<<<<
 *     assert s.x == 3
 *     assert b._states[0].score == 30, b._states[0].score
 */
  __pyx_v_s = ((struct __pyx_t_5tests_13c_test_search_TestState *)__pyx_f_5thinc_6search_4Beam_at(__pyx_v_b, 0));

  /* "tests/c_test_search.pyx":69
 *     assert b.score == 30, b.score
 *     s = <TestState*>b.at(0)
 *     assert s.x == 3             # <<<<<<<<<<<<<<
 *     assert b._states[0].score == 30, b._states[0].score
 *     b.set_cell(0, 1, 10, True, 0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_s->x == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "tests/c_test_search.pyx":70
 *     s = <TestState*>b.at(0)
 *     assert s.x == 3
 *     assert b._states[0].score == 30, b._states[0].score             # <<<<<<<<<<<<<<
 *     b.set_cell(0, 1, 10, True, 0)
 *     b.set_cell(0, 2, 20, True, 0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_b->_states[0]).score == 30.0) != 0))) {
      __pyx_t_1 = PyFloat_FromDouble((__pyx_v_b->_states[0]).score); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_Pack(1, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "tests/c_test_search.pyx":71
 *     assert s.x == 3
 *     assert b._states[0].score == 30, b._states[0].score
 *     b.set_cell(0, 1, 10, True, 0)             # <<<<<<<<<<<<<<
 *     b.set_cell(0, 2, 20, True, 0)
 *     b.advance(transition, NULL)
 */
  __pyx_f_5thinc_6search_4Beam_set_cell(__pyx_v_b, 0, 1, 10.0, 1, 0);

  /* "tests/c_test_search.pyx":72
 *     assert b._states[0].score == 30, b._states[0].score
 *     b.set_cell(0, 1, 10, True, 0)
 *     b.set_cell(0, 2, 20, True, 0)             # <<<<<<<<<<<<<<
 *     b.advance(transition, NULL)
 *     assert b._states[0].score == 50, b._states[0].score
 */
  __pyx_f_5thinc_6search_4Beam_set_cell(__pyx_v_b, 0, 2, 20.0, 1, 0);

  /* "tests/c_test_search.pyx":73
 *     b.set_cell(0, 1, 10, True, 0)
 *     b.set_cell(0, 2, 20, True, 0)
 *     b.advance(transition, NULL)             # <<<<<<<<<<<<<<
 *     assert b._states[0].score == 50, b._states[0].score
 *     assert b._states[1].score == 40
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_5thinc_6search_Beam *)__pyx_v_b->__pyx_vtab)->advance(__pyx_v_b, __pyx_f_5tests_13c_test_search_transition, NULL); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tests/c_test_search.pyx":74
 *     b.set_cell(0, 2, 20, True, 0)
 *     b.advance(transition, NULL)
 *     assert b._states[0].score == 50, b._states[0].score             # <<<<<<<<<<<<<<
 *     assert b._states[1].score == 40
 *     s = <TestState*>b.at(0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_b->_states[0]).score == 50.0) != 0))) {
      __pyx_t_2 = PyFloat_FromDouble((__pyx_v_b->_states[0]).score); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "tests/c_test_search.pyx":75
 *     b.advance(transition, NULL)
 *     assert b._states[0].score == 50, b._states[0].score
 *     assert b._states[1].score == 40             # <<<<<<<<<<<<<<
 *     s = <TestState*>b.at(0)
 *     assert s.x == 5
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_b->_states[1]).score == 40.0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "tests/c_test_search.pyx":76
 *     assert b._states[0].score == 50, b._states[0].score
 *     assert b._states[1].score == 40
 *     s = <TestState*>b.at(0)             # <<<<<<<<<<<<<<
 *     assert s.x == 5
 */
  __pyx_v_s = ((struct __pyx_t_5tests_13c_test_search_TestState *)__pyx_f_5thinc_6search_4Beam_at(__pyx_v_b, 0));

  /* "tests/c_test_search.pyx":77
 *     assert b._states[1].score == 40
 *     s = <TestState*>b.at(0)
 *     assert s.x == 5             # <<<<<<<<<<<<<<
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_s->x == 5) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "tests/c_test_search.pyx":60
 * 
 * 
 * def test_transition(nr_class=3, beam_width=6, length=3):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tests.c_test_search.test_transition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinc/learner.pxd":34
 *     cpdef int update(self, dict counts) except -1
 * 
 *     cdef inline const weight_t* get_scores(self, const Feature* feats, const int n_feats) nogil:             # <<<<<<<<<<<<<<
 *         memset(self.scores, 0, self.nr_class * sizeof(weight_t))
 *         self.set_scores(self.scores, feats, n_feats)
 */

static CYTHON_INLINE __pyx_t_5thinc_8typedefs_weight_t const *__pyx_f_5thinc_7learner_11LinearModel_get_scores(struct __pyx_obj_5thinc_7learner_LinearModel *__pyx_v_self, struct __pyx_t_5thinc_8features_Feature const *__pyx_v_feats, int const __pyx_v_n_feats) {
  __pyx_t_5thinc_8typedefs_weight_t const *__pyx_r;

  /* "thinc/learner.pxd":35
 * 
 *     cdef inline const weight_t* get_scores(self, const Feature* feats, const int n_feats) nogil:
 *         memset(self.scores, 0, self.nr_class * sizeof(weight_t))             # <<<<<<<<<<<<<<
 *         self.set_scores(self.scores, feats, n_feats)
 *         return self.scores
 */
  memset(__pyx_v_self->scores, 0, (__pyx_v_self->nr_class * (sizeof(__pyx_t_5thinc_8typedefs_weight_t))));

  /* "thinc/learner.pxd":36
 *     cdef inline const weight_t* get_scores(self, const Feature* feats, const int n_feats) nogil:
 *         memset(self.scores, 0, self.nr_class * sizeof(weight_t))
 *         self.set_scores(self.scores, feats, n_feats)             # <<<<<<<<<<<<<<
 *         return self.scores
 * 
 */
  __pyx_f_5thinc_7learner_11LinearModel_set_scores(__pyx_v_self, __pyx_v_self->scores, __pyx_v_feats, __pyx_v_n_feats);

  /* "thinc/learner.pxd":37
 *         memset(self.scores, 0, self.nr_class * sizeof(weight_t))
 *         self.set_scores(self.scores, feats, n_feats)
 *         return self.scores             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int set_scores(self, weight_t* scores, const Feature* feats, const int n_feats) nogil:
 */
  __pyx_r = __pyx_v_self->scores;
  goto __pyx_L0;

  /* "thinc/learner.pxd":34
 *     cpdef int update(self, dict counts) except -1
 * 
 *     cdef inline const weight_t* get_scores(self, const Feature* feats, const int n_feats) nogil:             # <<<<<<<<<<<<<<
 *         memset(self.scores, 0, self.nr_class * sizeof(weight_t))
 *         self.set_scores(self.scores, feats, n_feats)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "thinc/learner.pxd":39
 *         return self.scores
 * 
 *     cdef inline int set_scores(self, weight_t* scores, const Feature* feats, const int n_feats) nogil:             # <<<<<<<<<<<<<<
 *         cdef int f_i = gather_weights(self.weights.c_map, self.nr_class, self._weight_lines,
 *                              feats, n_feats)
 */

static CYTHON_INLINE int __pyx_f_5thinc_7learner_11LinearModel_set_scores(struct __pyx_obj_5thinc_7learner_LinearModel *__pyx_v_self, __pyx_t_5thinc_8typedefs_weight_t *__pyx_v_scores, struct __pyx_t_5thinc_8features_Feature const *__pyx_v_feats, int const __pyx_v_n_feats) {
  int __pyx_v_f_i;
  int __pyx_r;

  /* "thinc/learner.pxd":40
 * 
 *     cdef inline int set_scores(self, weight_t* scores, const Feature* feats, const int n_feats) nogil:
 *         cdef int f_i = gather_weights(self.weights.c_map, self.nr_class, self._weight_lines,             # <<<<<<<<<<<<<<
 *                              feats, n_feats)
 *         set_scores(scores, self._weight_lines, f_i, self.nr_class)
 */
  __pyx_v_f_i = __pyx_f_5thinc_7weights_gather_weights(__pyx_v_self->weights->c_map, __pyx_v_self->nr_class, __pyx_v_self->_weight_lines, __pyx_v_feats, __pyx_v_n_feats);

  /* "thinc/learner.pxd":42
 *         cdef int f_i = gather_weights(self.weights.c_map, self.nr_class, self._weight_lines,
 *                              feats, n_feats)
 *         set_scores(scores, self._weight_lines, f_i, self.nr_class)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_f_5thinc_7weights_set_scores(__pyx_v_scores, __pyx_v_self->_weight_lines, __pyx_v_f_i, __pyx_v_self->nr_class);

  /* "thinc/learner.pxd":43
 *                              feats, n_feats)
 *         set_scores(scores, self._weight_lines, f_i, self.nr_class)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "thinc/learner.pxd":39
 *         return self.scores
 * 
 *     cdef inline int set_scores(self, weight_t* scores, const Feature* feats, const int n_feats) nogil:             # <<<<<<<<<<<<<<
 *         cdef int f_i = gather_weights(self.weights.c_map, self.nr_class, self._weight_lines,
 *                              feats, n_feats)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "thinc/search.pxd":50
 *     cdef int _fill(self, weight_t** scores, bint** is_valid) except -1
 * 
 *     cdef inline void* at(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self._states[i].content
 * 
 */

static CYTHON_INLINE void *__pyx_f_5thinc_6search_4Beam_at(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, int __pyx_v_i) {
  void *__pyx_r;

  /* "thinc/search.pxd":51
 * 
 *     cdef inline void* at(self, int i) nogil:
 *         return self._states[i].content             # <<<<<<<<<<<<<<
 * 
 *     cdef int initialize(self, init_func_t init_func, int n, void* extra_args) except -1
 */
  __pyx_r = (__pyx_v_self->_states[__pyx_v_i]).content;
  goto __pyx_L0;

  /* "thinc/search.pxd":50
 *     cdef int _fill(self, weight_t** scores, bint** is_valid) except -1
 * 
 *     cdef inline void* at(self, int i) nogil:             # <<<<<<<<<<<<<<
 *         return self._states[i].content
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "thinc/search.pxd":58
 * 
 * 
 *     cdef inline void set_cell(self, int i, int j, weight_t score, bint is_valid, int cost) nogil:             # <<<<<<<<<<<<<<
 *         self.scores[i][j] = score
 *         self.is_valid[i][j] = is_valid
 */

static CYTHON_INLINE void __pyx_f_5thinc_6search_4Beam_set_cell(struct __pyx_obj_5thinc_6search_Beam *__pyx_v_self, int __pyx_v_i, int __pyx_v_j, __pyx_t_5thinc_8typedefs_weight_t __pyx_v_score, int __pyx_v_is_valid, int __pyx_v_cost) {

  /* "thinc/search.pxd":59
 * 
 *     cdef inline void set_cell(self, int i, int j, weight_t score, bint is_valid, int cost) nogil:
 *         self.scores[i][j] = score             # <<<<<<<<<<<<<<
 *         self.is_valid[i][j] = is_valid
 *         self.costs[i][j] = cost
 */
  ((__pyx_v_self->scores[__pyx_v_i])[__pyx_v_j]) = __pyx_v_score;

  /* "thinc/search.pxd":60
 *     cdef inline void set_cell(self, int i, int j, weight_t score, bint is_valid, int cost) nogil:
 *         self.scores[i][j] = score
 *         self.is_valid[i][j] = is_valid             # <<<<<<<<<<<<<<
 *         self.costs[i][j] = cost
 * 
 */
  ((__pyx_v_self->is_valid[__pyx_v_i])[__pyx_v_j]) = __pyx_v_is_valid;

  /* "thinc/search.pxd":61
 *         self.scores[i][j] = score
 *         self.is_valid[i][j] = is_valid
 *         self.costs[i][j] = cost             # <<<<<<<<<<<<<<
 * 
 *     cdef int set_row(self, int i, weight_t* scores, bint* is_valid, int* costs) except -1
 */
  ((__pyx_v_self->costs[__pyx_v_i])[__pyx_v_j]) = __pyx_v_cost;

  /* "thinc/search.pxd":58
 * 
 * 
 *     cdef inline void set_cell(self, int i, int j, weight_t score, bint is_valid, int cost) nogil:             # <<<<<<<<<<<<<<
 *         self.scores[i][j] = score
 *         self.is_valid[i][j] = is_valid
 */

  /* function exit code */
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "c_test_search",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Users_matt_repos_thinc_tests_c, __pyx_k_Users_matt_repos_thinc_tests_c, sizeof(__pyx_k_Users_matt_repos_thinc_tests_c), 0, 0, 1, 0},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_beam_width, __pyx_k_beam_width, sizeof(__pyx_k_beam_width), 0, 0, 1, 1},
  {&__pyx_n_u_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 1, 0, 1},
  {&__pyx_n_s_extra, __pyx_k_extra, sizeof(__pyx_k_extra), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_nr_class, __pyx_k_nr_class, sizeof(__pyx_k_nr_class), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_score, __pyx_k_score, sizeof(__pyx_k_score), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_test_init, __pyx_k_test_init, sizeof(__pyx_k_test_init), 0, 0, 1, 1},
  {&__pyx_n_s_test_initialize, __pyx_k_test_initialize, sizeof(__pyx_k_test_initialize), 0, 0, 1, 1},
  {&__pyx_n_s_test_initialize_extra, __pyx_k_test_initialize_extra, sizeof(__pyx_k_test_initialize_extra), 0, 0, 1, 1},
  {&__pyx_n_s_test_transition, __pyx_k_test_transition, sizeof(__pyx_k_test_transition), 0, 0, 1, 1},
  {&__pyx_n_s_tests_c_test_search, __pyx_k_tests_c_test_search, sizeof(__pyx_k_tests_c_test_search), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "tests/c_test_search.pyx":36
 * 
 * 
 * def test_init(nr_class, beam_width):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     assert b.size == 1
 */
  __pyx_tuple__2 = PyTuple_Pack(3, __pyx_n_s_nr_class, __pyx_n_s_beam_width, __pyx_n_s_b); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_matt_repos_thinc_tests_c, __pyx_n_s_test_init, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tests/c_test_search.pyx":43
 * 
 * 
 * def test_initialize(nr_class, beam_width, length):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)
 */
  __pyx_tuple__4 = PyTuple_Pack(6, __pyx_n_s_nr_class, __pyx_n_s_beam_width, __pyx_n_s_length, __pyx_n_s_b, __pyx_n_s_i, __pyx_n_s_s); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_matt_repos_thinc_tests_c, __pyx_n_s_test_initialize, 43, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tests/c_test_search.pyx":52
 * 
 * 
 * def test_initialize_extra(nr_class, beam_width, length, unicode extra):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, <void*><Py_UNICODE*>extra)
 */
  __pyx_tuple__6 = PyTuple_Pack(7, __pyx_n_s_nr_class, __pyx_n_s_beam_width, __pyx_n_s_length, __pyx_n_s_extra, __pyx_n_s_b, __pyx_n_s_i, __pyx_n_s_s); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_matt_repos_thinc_tests_c, __pyx_n_s_test_initialize_extra, 52, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "tests/c_test_search.pyx":60
 * 
 * 
 * def test_transition(nr_class=3, beam_width=6, length=3):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)
 */
  __pyx_tuple__8 = PyTuple_Pack(5, __pyx_n_s_nr_class, __pyx_n_s_beam_width, __pyx_n_s_length, __pyx_n_s_b, __pyx_n_s_s); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_matt_repos_thinc_tests_c, __pyx_n_s_test_transition, 60, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_30 = PyInt_FromLong(30); if (unlikely(!__pyx_int_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initc_test_search(void); /*proto*/
PyMODINIT_FUNC initc_test_search(void)
#else
PyMODINIT_FUNC PyInit_c_test_search(void); /*proto*/
PyMODINIT_FUNC PyInit_c_test_search(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_c_test_search(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("c_test_search", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_tests__c_test_search) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "tests.c_test_search")) {
      if (unlikely(PyDict_SetItemString(modules, "tests.c_test_search", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_5cymem_5cymem_Pool = __Pyx_ImportType("cymem.cymem", "Pool", sizeof(struct __pyx_obj_5cymem_5cymem_Pool), 1); if (unlikely(!__pyx_ptype_5cymem_5cymem_Pool)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5cymem_5cymem_Pool = (struct __pyx_vtabstruct_5cymem_5cymem_Pool*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_Pool->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_Pool)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5cymem_5cymem_Address = __Pyx_ImportType("cymem.cymem", "Address", sizeof(struct __pyx_obj_5cymem_5cymem_Address), 1); if (unlikely(!__pyx_ptype_5cymem_5cymem_Address)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7preshed_4maps_PreshMap = __Pyx_ImportType("preshed.maps", "PreshMap", sizeof(struct __pyx_obj_7preshed_4maps_PreshMap), 1); if (unlikely(!__pyx_ptype_7preshed_4maps_PreshMap)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_7preshed_4maps_PreshMap = (struct __pyx_vtabstruct_7preshed_4maps_PreshMap*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMap->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMap)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7preshed_4maps_PreshMapArray = __Pyx_ImportType("preshed.maps", "PreshMapArray", sizeof(struct __pyx_obj_7preshed_4maps_PreshMapArray), 1); if (unlikely(!__pyx_ptype_7preshed_4maps_PreshMapArray)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_7preshed_4maps_PreshMapArray = (struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray*)__Pyx_GetVtable(__pyx_ptype_7preshed_4maps_PreshMapArray->tp_dict); if (unlikely(!__pyx_vtabptr_7preshed_4maps_PreshMapArray)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5thinc_5cache_ScoresCache = __Pyx_ImportType("thinc.cache", "ScoresCache", sizeof(struct __pyx_obj_5thinc_5cache_ScoresCache), 1); if (unlikely(!__pyx_ptype_5thinc_5cache_ScoresCache)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5thinc_5cache_ScoresCache = (struct __pyx_vtabstruct_5thinc_5cache_ScoresCache*)__Pyx_GetVtable(__pyx_ptype_5thinc_5cache_ScoresCache->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_5cache_ScoresCache)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5thinc_8features_Extractor = __Pyx_ImportType("thinc.features", "Extractor", sizeof(struct __pyx_obj_5thinc_8features_Extractor), 1); if (unlikely(!__pyx_ptype_5thinc_8features_Extractor)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5thinc_8features_Extractor = (struct __pyx_vtabstruct_5thinc_8features_Extractor*)__Pyx_GetVtable(__pyx_ptype_5thinc_8features_Extractor->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_8features_Extractor)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5thinc_7learner_LinearModel = __Pyx_ImportType("thinc.learner", "LinearModel", sizeof(struct __pyx_obj_5thinc_7learner_LinearModel), 1); if (unlikely(!__pyx_ptype_5thinc_7learner_LinearModel)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5thinc_7learner_LinearModel = (struct __pyx_vtabstruct_5thinc_7learner_LinearModel*)__Pyx_GetVtable(__pyx_ptype_5thinc_7learner_LinearModel->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_7learner_LinearModel)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5thinc_7learner__Writer = __Pyx_ImportType("thinc.learner", "_Writer", sizeof(struct __pyx_obj_5thinc_7learner__Writer), 1); if (unlikely(!__pyx_ptype_5thinc_7learner__Writer)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5thinc_7learner__Writer = (struct __pyx_vtabstruct_5thinc_7learner__Writer*)__Pyx_GetVtable(__pyx_ptype_5thinc_7learner__Writer->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_7learner__Writer)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5thinc_7learner__Reader = __Pyx_ImportType("thinc.learner", "_Reader", sizeof(struct __pyx_obj_5thinc_7learner__Reader), 1); if (unlikely(!__pyx_ptype_5thinc_7learner__Reader)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5thinc_7learner__Reader = (struct __pyx_vtabstruct_5thinc_7learner__Reader*)__Pyx_GetVtable(__pyx_ptype_5thinc_7learner__Reader->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_7learner__Reader)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5thinc_6search_Beam = __Pyx_ImportType("thinc.search", "Beam", sizeof(struct __pyx_obj_5thinc_6search_Beam), 1); if (unlikely(!__pyx_ptype_5thinc_6search_Beam)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5thinc_6search_Beam = (struct __pyx_vtabstruct_5thinc_6search_Beam*)__Pyx_GetVtable(__pyx_ptype_5thinc_6search_Beam->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_6search_Beam)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5thinc_6search_MaxViolation = __Pyx_ImportType("thinc.search", "MaxViolation", sizeof(struct __pyx_obj_5thinc_6search_MaxViolation), 1); if (unlikely(!__pyx_ptype_5thinc_6search_MaxViolation)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5thinc_6search_MaxViolation = (struct __pyx_vtabstruct_5thinc_6search_MaxViolation*)__Pyx_GetVtable(__pyx_ptype_5thinc_6search_MaxViolation->tp_dict); if (unlikely(!__pyx_vtabptr_5thinc_6search_MaxViolation)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("thinc.weights"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "gather_weights", (void (**)(void))&__pyx_f_5thinc_7weights_gather_weights, "int (struct __pyx_t_7preshed_4maps_MapStruct *, __pyx_t_5thinc_8typedefs_class_t const , struct __pyx_t_5thinc_7weights_WeightLine *, struct __pyx_t_5thinc_8features_Feature const *, int const )") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "set_scores", (void (**)(void))&__pyx_f_5thinc_7weights_set_scores, "int (__pyx_t_5thinc_8typedefs_weight_t *, struct __pyx_t_5thinc_7weights_WeightLine const *, __pyx_t_5thinc_8typedefs_class_t const , __pyx_t_5thinc_8typedefs_class_t const )") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Execution code ---*/

  /* "tests/c_test_search.pyx":36
 * 
 * 
 * def test_init(nr_class, beam_width):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     assert b.size == 1
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5tests_13c_test_search_1test_init, NULL, __pyx_n_s_tests_c_test_search); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_init, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tests/c_test_search.pyx":43
 * 
 * 
 * def test_initialize(nr_class, beam_width, length):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5tests_13c_test_search_3test_initialize, NULL, __pyx_n_s_tests_c_test_search); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_initialize, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tests/c_test_search.pyx":52
 * 
 * 
 * def test_initialize_extra(nr_class, beam_width, length, unicode extra):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, <void*><Py_UNICODE*>extra)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5tests_13c_test_search_5test_initialize_extra, NULL, __pyx_n_s_tests_c_test_search); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_initialize_extra, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tests/c_test_search.pyx":60
 * 
 * 
 * def test_transition(nr_class=3, beam_width=6, length=3):             # <<<<<<<<<<<<<<
 *     b = Beam(nr_class, beam_width)
 *     b.initialize(initialize, length, NULL)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5tests_13c_test_search_7test_transition, NULL, __pyx_n_s_tests_c_test_search); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_transition, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tests/c_test_search.pyx":1
 * from __future__ import unicode_literals             # <<<<<<<<<<<<<<
 * from thinc.search cimport Beam
 * from cymem.cymem cimport Pool
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "thinc/search.pxd":58
 * 
 * 
 *     cdef inline void set_cell(self, int i, int j, weight_t score, bint is_valid, int cost) nogil:             # <<<<<<<<<<<<<<
 *         self.scores[i][j] = score
 *         self.is_valid[i][j] = is_valid
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init tests.c_test_search", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init tests.c_test_search");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value) {
    const int32_t neg_one = (int32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int32_t),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
    const int32_t neg_one = (int32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int32_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int32_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, long, PyLong_AsLong(x))
            } else if (sizeof(int32_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32_t");
    return (int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32_t");
    return (int32_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
