angular.module("mopidy-mobile.connection",[]).provider("connection",function(){var provider=this,settings={autoConnect:!1,callingConvention:"by-position-or-by-name"},isUriRefRegExp=/^\//;provider.settings={backoffDelayMin:function(value){settings.backoffDelayMin=value},backoffDelayMax:function(value){settings.backoffDelayMax=value},webSocketUrl:function(value){settings.webSocketUrl=value}},provider.$get=function($q,$log,$window,$ionicLoading){$log.info("Creating Mopidy instance",settings);var mopidy=new Mopidy(settings),pending={},reconnects=0;mopidy.on($log.debug.bind($log)),mopidy.on("websocket:outgoingMessage",function(event){$ionicLoading.show(),pending[event.id]=event}),mopidy.on("websocket:incomingMessage",function(event){var data=angular.fromJson(event.data);data.id in pending&&(delete pending[data.id],$ionicLoading.hide()),reconnects=0}),mopidy.on("reconnectionPending",function(){++reconnects>3&&(location.hash="",location.reload(!0))});var promise=$q(function(resolve){mopidy.once("state:online",function(){function makeObject(keys,values){for(var obj={},i=0,length=keys.length;i!==length;++i)obj[keys[i]]=values[i];return obj}var when=Mopidy.when||mopidy.getVersion().__proto__.constructor,library=angular.copy(mopidy.library),tracklist=angular.copy(mopidy.tracklist);angular.extend(mopidy,{resolveURI:function(uri){if(settings.webSocketUrl&&isUriRefRegExp.test(uri)){var match=/^ws:\/\/([^\/]+)/.exec(settings.webSocketUrl);return"http://"+match[1]+uri}return uri}}),angular.extend(mopidy.library,{lookup:function(params){return"uris"in params?when.all(params.uris.map(function(uri){return library.lookup({uri:uri})})).then(function(results){return Array.prototype.concat.apply([],results)}):library.lookup(params)}}),angular.extend(mopidy.tracklist,{add:function(params){return"uris"in params?mopidy.library.lookup({uris:params.uris}).then(function(tracks){return tracklist.add("at_position"in params?{tracks:tracks,at_position:params.at_position}:{tracks:tracks})}):tracklist.add(params)},getOptions:function(){return when.all([tracklist.getConsume(),tracklist.getRandom(),tracklist.getRepeat(),tracklist.getSingle()]).then(function(results){return makeObject(["consume","random","repeat","single"],results)})},setOptions:function(params){var promises=[];return"consume"in params&&promises.push(tracklist.setConsume({value:params.consume})),"random"in params&&promises.push(tracklist.setRandom({value:params.random})),"repeat"in params&&promises.push(tracklist.setRepeat({value:params.repeat})),"single"in params&&promises.push(tracklist.setSingle({value:params.single})),when.all(promises)},getPlaybackTlTracks:function(params){return when.all([tracklist.eotTrack(params),tracklist.nextTrack(params),tracklist.previousTrack(params)]).then(function(results){return makeObject(["eot","next","previous"],results)})}}),resolve(mopidy)}),mopidy.connect()}),factory=function(callback){if(callback){var defer=$q.defer();return promise.then(function(mopidy){callback(mopidy).then(function(result){defer.resolve(result)})}),defer.promise}return promise};return angular.extend(factory,{reconnect:function(webSocketUrl){$log.log("Reconnecting to "+webSocketUrl),$window.location.reload(!0)}})}}),angular.module("mopidy-mobile.library",["ionic","mopidy-mobile.connection","mopidy-mobile.settings"]).config(function($stateProvider){$stateProvider.state("tabs.library",{"abstract":!0,url:"/library",views:{library:{template:"<ion-nav-view></ion-nav-view>"}}}).state("tabs.library.root",{url:"",templateUrl:"templates/browse.html",controller:"BrowseCtrl",resolve:{mopidy:function(connection){return connection()},ref:function(){return null},refs:function(connection){return connection(function(mopidy){return mopidy.library.browse({uri:null})})}}}).state("tabs.library.browse",{url:"/browse?type&name&uri",controller:"BrowseCtrl",templateUrl:"templates/browse.html",resolve:{mopidy:function(connection){return connection()},ref:function($stateParams){return{type:$stateParams.type,name:$stateParams.name,uri:$stateParams.uri}},refs:function($stateParams,connection){return connection(function(mopidy){return mopidy.library.browse({uri:$stateParams.uri})})}}}).state("tabs.library.search",{url:"/search?q&uri",controller:"SearchCtrl",templateUrl:"templates/search.html",resolve:{mopidy:function(connection){return connection()},q:function($stateParams){return $stateParams.q},results:function($stateParams,connection){return connection(function(mopidy){return mopidy.library.search({query:{any:$stateParams.q},uris:$stateParams.uri?[$stateParams.uri]:null})})}}}).state("tabs.library.lookup",{url:"/lookup?name&uri",controller:"LookupCtrl",templateUrl:"templates/lookup.html",resolve:{mopidy:function(connection){return connection()},name:function($stateParams){return $stateParams.name},uri:function($stateParams){return $stateParams.uri},tracks:function($stateParams,connection){return connection(function(mopidy){return mopidy.library.lookup({uri:$stateParams.uri})})}}})}).controller("BrowseCtrl",function($scope,$state,$ionicPopover,settings,mopidy,ref,refs){$scope.ref=ref,$scope.refs=refs,$scope.tracks=refs.filter(function(ref){return"track"===ref.type}),$ionicPopover.fromTemplateUrl("templates/popovers/library.html",{scope:$scope}).then(function(popover){$scope.popover=popover}),$scope.add=function(){mopidy.tracklist.add({uris:$scope.tracks.map(function(ref){return ref.uri})})},$scope.click=function(ref){settings.click(mopidy,ref.uri)},$scope.play=function(){mopidy.tracklist.add({uris:$scope.tracks.map(function(ref){return ref.uri})}).then(function(tlTracks){mopidy.playback.play({tl_track:tlTracks[0]})})},$scope.refresh=function(){mopidy.library.refresh({uri:$scope.ref?$scope.ref.uri:null}).then(function(){$scope.$broadcast("scroll.refreshComplete")})},$scope.replace=function(){mopidy.tracklist.clear({}).then(function(){return mopidy.tracklist.add({uris:$scope.tracks.map(function(ref){return ref.uri})})}).then(function(tlTracks){mopidy.playback.play({tl_track:tlTracks[0]})})},$scope.search=function(q){$state.go("^.search",{q:q,uri:$scope.ref?$scope.ref.uri:null})}}).controller("SearchCtrl",function($scope,$ionicPopover,settings,mopidy,q,results){function compare(a,b){return(a.name||"")>(b.name||"")?1:(a.name||"")<(b.name||"")?-1:0}switch($scope.q=q,results.length){case 0:$scope.artists=$scope.albums=$scope.tracks=[];break;case 1:$scope.artists=results[0].artists,$scope.albums=results[0].albums,$scope.tracks=results[0].tracks;break;default:$scope.artists=Array.prototype.concat.apply([],results.map(function(result){return result.artists||[]})).sort(compare),$scope.albums=Array.prototype.concat.apply([],results.map(function(result){return result.albums||[]})).sort(compare),$scope.tracks=Array.prototype.concat.apply([],results.map(function(result){return result.tracks||[]})).sort(compare)}$ionicPopover.fromTemplateUrl("templates/popovers/library.html",{scope:$scope}).then(function(popover){$scope.popover=popover}),$scope.add=function(){return mopidy.tracklist.add({tracks:angular.copy($scope.tracks)})},$scope.click=function(track){return settings.click(mopidy,track.uri)},$scope.play=function(){return mopidy.tracklist.add({tracks:angular.copy($scope.tracks)}).then(function(tlTracks){return mopidy.playback.play({tl_track:tlTracks[0]})})},$scope.replace=function(){return mopidy.tracklist.clear({}).then(function(){return mopidy.tracklist.add({tracks:angular.copy($scope.tracks)})}).then(function(tlTracks){return mopidy.playback.play({tl_track:tlTracks[0]})})}}).controller("LookupCtrl",function($scope,$ionicPopover,settings,mopidy,name,tracks,uri){$scope.name=name,$scope.tracks=tracks,$scope.uri=uri,$ionicPopover.fromTemplateUrl("templates/popovers/library.html",{scope:$scope}).then(function(popover){$scope.popover=popover}),$scope.add=function(){return mopidy.tracklist.add({tracks:angular.copy($scope.tracks)})},$scope.click=function(track){return settings.click(mopidy,track.uri)},$scope.play=function(){return mopidy.tracklist.add({tracks:angular.copy($scope.tracks)}).then(function(tlTracks){return mopidy.playback.play({tl_track:tlTracks[0]})})},$scope.replace=function(){return mopidy.tracklist.clear({}).then(function(){return mopidy.tracklist.add({tracks:angular.copy($scope.tracks)})}).then(function(tlTracks){return mopidy.playback.play({tl_track:tlTracks[0]})})}}),angular.module("mopidy-mobile.locales",["pascalprecht.translate"]).constant("locales",{en:{displayName:"English",messages:{"Add Connection":"Add Connection","Add Tracks to Tracklist":"Add Tracks to Tracklist","Add to Tracklist":"Add to Tracklist",Cancel:"Cancel","Clear Tracklist":"Clear Tracklist",Clear:"Clear","Connection Name":"Connection Name",Connection:"Connection",Connections:"Connections",Consume:"Consume","Default Click Action":"Default Click Action",Edit:"Edit",Empty:"Empty","Enable Logging":"Enable Logging","Error saving playlist":"Error saving playlist",Language:"Language",Library:"Library","Log Buffer Size":"Log Buffer Size","Log Debug Messages":"Log Debug Messages",Logging:"Logging","Mopidy Host":"Mopidy Host","Mopidy Port":"Mopidy Port","Nothing playing":"Nothing playling",OK:"OK","Play All Tracks":"Play All Tracks","Play All":"Play All","Play Track":"Play Track",Playback:"Playback","Playlist Name":"Playlist Name","Playlist saved":"Playlist saved",Playlists:"Playlists","Pull to refresh":"Pull to refresh",Random:"Random",Remove:"Remove",Repeat:"Repeat","Replace Current Tracklist":"Replace Current Tracklist","Save as Playlist":"Save as Playlist","Save as":"Save as",Save:"Save","Search Results for":"Search Results for","Search Results":"Search Results","Search here":"Search here",Settings:"Settings",Single:"Single",Theme:"Theme",Tracklist:"Tracklist","{count} Tracks":"{{count}} Tracks","{index} of {count}":"{{index}} of {{count}}"}},de:{displayName:"Deutsch",messages:{"Add Connection":"Vebindung hinzufügen","Add Tracks to Tracklist":"Titel hinzufügen","Add to Tracklist":"Titel hinzufügen",Cancel:"Abbrechen","Clear Tracklist":"Titel löschen",Clear:"Leeren","Connection Name":"Name der Verbindung",Connection:"Verbindung",Connections:"Verbindungen",Consume:"Verbrauchsmodus","Default Click Action":"Beim Klicken",Edit:"Bearbeiten",Empty:"Leer","Enable Debugging":"Debugging aktivieren","Enable Logging":"Enable Logging","Error saving playlist":"Fehler beim Speichern der Playlist",Language:"Sprache",Library:"Bibliothek","Log Buffer Size":"Log Buffer Size","Log Debug Messages":"Log Debug Messages",Logging:"Logging","Mopidy Host":"Mopidy Host","Mopidy Port":"Mopidy Port","Nothing playing":"Nichts spielt",OK:"OK","Play All Tracks":"Alle Titel abspielen","Play All":"Alle abspielen","Play Track":"Titel abspielen",Playback:"Wiedergabe","Playlist Name":"Name der Playlist","Playlist saved":"Playlist gespeichert",Playlists:"Listen","Pull to refresh":"Zum Aktualisieren ziehen",Random:"Zufällig",Remove:"Löschen",Repeat:"Wiederholen","Replace Current Tracklist":"Titel ersetzen","Save as Playlist":"Als Playlist speichern","Save as":"Speichern unter",Save:"Speichern","Search Results for":"Ergebnisse für","Search Results":"Suchergebnisse","Search here":"Hier suchen",Settings:"Einstellungen",Single:"Einzelmodus",Theme:"Design",Tracklist:"Titel","{count} Tracks":"{{count}} Titel","{index} of {count}":"{{index}} von {{count}}"}}}).factory("missingTranslationHandler",function($log){return function(translationId){$log.warn("Missing translation: "+translationId)}}).filter("duration",function(){return function(ms){if(void 0===ms||null===ms)return"n/a";var s=Math.round(ms/1e3),sec=s%60,min=parseInt(s/60),value=min+":"+(10>sec?"0":"")+sec;return value}}).config(function($translateProvider,locales){angular.forEach(locales,function(locale,id){$translateProvider.translations(id,locale.messages)}),$translateProvider.useMissingTranslationHandler("missingTranslationHandler")}),angular.module("mopidy-mobile.logging",["ionic"]).config(function($provide){$provide.decorator("$log",function($delegate,logging){function wrap(type,fn){return function(){var args=[].slice.call(arguments);return logging.log(type,args),fn.apply($delegate,args)}}var log=angular.copy($delegate);return angular.extend($delegate,{log:wrap("log",log.log),info:wrap("info",log.info),warn:wrap("warn",log.warn),error:wrap("error",log.error),debug:wrap("debug",log.debug)})})}).provider("logging",function(){var provider=this,enabled=!1,debugEnabled=!1,maxBufferSize=20;angular.extend(provider,{enabled:function(flag){return void 0!==flag?(enabled=flag,this):enabled},debugEnabled:function(flag){return void 0!==flag?(debugEnabled=flag,this):debugEnabled},maxBufferSize:function(value){return void 0!==value?(maxBufferSize=value,this):maxBufferSize}}),provider.$get=function(){var id=0,messages=[];return angular.extend(angular.copy(provider),{log:function(type,args){enabled&&("debug"!==type||debugEnabled)&&(messages.push({id:id++,type:type,args:args}),messages.length>maxBufferSize&&messages.splice(0,messages.length-maxBufferSize))},maxBufferSize:function(value){var ret=provider.maxBufferSize(value);return messages.length>maxBufferSize&&messages.splice(0,messages.length-maxBufferSize),ret},messages:messages})}}),angular.module("mopidy-mobile",["ionic","mopidy-mobile.connection","mopidy-mobile.logging","mopidy-mobile.locales","mopidy-mobile.playback","mopidy-mobile.tracklist","mopidy-mobile.library","mopidy-mobile.playlists","mopidy-mobile.settings"]).config(function($stateProvider,$urlRouterProvider,$ionicConfigProvider){$stateProvider.state("tabs",{"abstract":!0,url:"/tabs",templateUrl:"templates/tabs.html"}),$urlRouterProvider.otherwise("/tabs/settings"),$ionicConfigProvider.tabs.position("bottom"),$ionicConfigProvider.tabs.style("standard")}).run(function($ionicPlatform){$ionicPlatform.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&window.cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0)})}),angular.module("mopidy-mobile.playback",["ionic","mopidy-mobile.settings"]).config(function($stateProvider){$stateProvider.state("tabs.playback",{url:"/playback",views:{playback:{templateUrl:"templates/playback.html",controller:"PlaybackCtrl",resolve:{mopidy:function(connection){return connection()},mute:function(connection){return connection(function(mopidy){return mopidy.playback.getMute()})},options:function(connection){return connection(function(mopidy){return mopidy.tracklist.getOptions()})},state:function(connection){return connection(function(mopidy){return mopidy.playback.getState()})},tlTracks:function(connection){return connection(function(mopidy){var currentTlTrack;return mopidy.playback.getCurrentTlTrack().then(function(tlTrack){return currentTlTrack=tlTrack,mopidy.tracklist.getPlaybackTlTracks({tl_track:tlTrack})}).then(function(tlTracks){return angular.extend(tlTracks,{current:currentTlTrack})})})}}}}})}).controller("PlaybackCtrl",function($scope,$interval,$window,$log,$q,mopidy,mute,options,state,tlTracks){function setCurrentTlTrack(tlTrack,timePosition){$scope.$apply(function(scope){tlTrack&&scope.tlTracks.current&&tlTrack.tlid===scope.tlTracks.current.tlid||(scope.tlTracks={current:tlTrack},scope.track=tlTrack?tlTrack.track:null,mopidy.tracklist.getPlaybackTlTracks({tl_track:tlTrack}).then(function(tlTracks){scope.$apply(function(scope){!scope.track&&tlTracks.eot&&(scope.track=tlTracks.eot.track),angular.extend(scope.tlTracks,tlTracks)})})),void 0!==timePosition&&(scope.time.value=timePosition)})}var handlers={"event:muteChanged":function(event){$scope.$apply(function(scope){scope.mute=event.mute})},"event:optionsChanged":function(){mopidy.tracklist.getOptions().then(function(options){$scope.$apply(function(scope){scope.options=options})})},"event:playbackStateChanged":function(event){$scope.$apply(function(scope){scope.state=event.new_state})},"event:trackPlaybackEnded":function(){mopidy.playback.getCurrentTlTrack().then(function(tlTrack){setCurrentTlTrack(tlTrack,0)})},"event:trackPlaybackPaused":function(event){setCurrentTlTrack(event.tl_track,event.time_position)},"event:trackPlaybackResumed":function(event){setCurrentTlTrack(event.tl_track,event.time_position)},"event:trackPlaybackStarted":function(event){setCurrentTlTrack(event.tl_track,0)},"event:tracklistChanged":function(){mopidy.playback.getCurrentTlTrack().then(setCurrentTlTrack)},"event:volumeChanged":function(event){$scope.volume.pending||$scope.$apply(function(scope){scope.volume.value=event.volume})},"event:seeked":function(event){$scope.time.pending||$scope.$apply(function(scope){scope.time.value=event.time_position})}},time=$scope.time={pending:!1,value:0};time.change=function(){function update(value){mopidy.playback.seek({time_position:value}).then(function(){value===$window.parseInt(time.value)?defer.resolve():defer.notify()})}if(!time.pending){var defer=$q.defer();time.pending=!0,update($window.parseInt(time.value)),defer.promise.then(function(){$log.debug("seek done"),time.pending=!1},function(){$log.debug("seek error"),time.pending=!1},function(){$log.debug("seek pending: "+time.value),update($window.parseInt(time.value))})}},mopidy.playback.getTimePosition().then(function(value){$scope.$apply(function(scope){scope.time.position=value})});var volume=$scope.volume={pending:!1,value:0};volume.change=function(){function update(value){mopidy.playback.setVolume({volume:value}).then(function(){value===$window.parseInt(volume.value)?defer.resolve():defer.notify()})}if(!volume.pending){var defer=$q.defer();volume.pending=!0,update($window.parseInt(volume.value)),defer.promise.then(function(){$log.debug("volume done"),volume.pending=!1},function(){$log.debug("volume error"),volume.pending=!1},function(){$log.debug("volume pending: "+volume.value),update($window.parseInt(volume.value))})}},mopidy.playback.getVolume().then(function(value){$scope.$apply(function(scope){scope.volume.value=value})}),$scope.mute=mute,$scope.options=options,$scope.state=state,$scope.tlTracks=tlTracks,$scope.track=(tlTracks.current||tlTracks.eot||{track:null}).track,$scope.interval=$interval(function(){if("playing"===$scope.state){var t=$window.parseInt($scope.time.value);Math.floor(t/1e3)%10===0?mopidy.playback.getTimePosition().then(function(value){$scope.$apply(function(scope){scope.time.value=value})}):$scope.time.value=t+1e3}},1e3),$scope.play=function(){mopidy.playback.play()},$scope.pause=function(){mopidy.playback.pause()},$scope.stop=function(){mopidy.playback.stop()},$scope.next=function(){var state=$scope.state;mopidy.playback.next().then(function(){"stopped"===state&&mopidy.playback.getCurrentTlTrack().then(setCurrentTlTrack)})},$scope.previous=function(){var state=$scope.state;mopidy.playback.previous().then(function(){"stopped"===state&&mopidy.playback.getCurrentTlTrack().then(setCurrentTlTrack)})},$scope.setMute=function(mute){mopidy.playback.setMute({value:mute})},$scope.setOptions=function(params){mopidy.tracklist.setOptions(params)},$scope.getImageURI=function(track){return track&&track.album&&track.album.images&&track.album.images.length?mopidy.resolveURI(track.album.images[0]):""},$scope.$on("$destroy",function(){angular.forEach(handlers,function(listener,event){mopidy.off(event,listener)}),$interval.cancel($scope.interval)}),angular.forEach(handlers,function(listener,event){mopidy.on(event,listener)})}),angular.module("mopidy-mobile.playlists",["ionic","mopidy-mobile.connection","mopidy-mobile.settings"]).config(function($stateProvider){$stateProvider.state("tabs.playlists",{"abstract":!0,url:"/playlists",views:{playlists:{template:"<ion-nav-view></ion-nav-view>"}}}).state("tabs.playlists.root",{url:"",controller:"PlaylistsCtrl",templateUrl:"templates/playlists.html",resolve:{mopidy:function(connection){return connection()},playlists:function(connection){return connection(function(mopidy){return mopidy.playlists.getPlaylists()})}}}).state("tabs.playlists.playlist",{url:"/{uri}",controller:"PlaylistCtrl",templateUrl:"templates/playlist.html",resolve:{mopidy:function(connection){return connection()},playlist:function($stateParams,connection){return connection(function(mopidy){return mopidy.playlists.lookup({uri:$stateParams.uri})})}}})}).controller("PlaylistsCtrl",function($scope,$log,mopidy,playlists){var handlers={"event:playlistChanged":function(){mopidy.playlists.getPlaylists().then(function(playlists){$scope.$apply(function(scope){scope.playlists=playlists})})},"event:playlistsLoaded":function(){mopidy.playlists.getPlaylists().then(function(playlists){$scope.$apply(function(scope){scope.playlists=playlists})})}};$scope.playlists=playlists,$scope.refresh=function(){mopidy.playlists.refresh({uri_scheme:null}).then(function(){$scope.$broadcast("scroll.refreshComplete")})},$scope.$on("$destroy",function(){angular.forEach(handlers,function(listener,event){mopidy.off(event,listener)})}),angular.forEach(handlers,function(listener,event){mopidy.on(event,listener)})}).controller("PlaylistCtrl",function($scope,$ionicPopover,settings,mopidy,playlist){$ionicPopover.fromTemplateUrl("templates/popovers/playlist.html",{scope:$scope}).then(function(popover){$scope.popover=popover}),$scope.playlist=playlist,$scope.add=function(){mopidy.tracklist.add({tracks:angular.copy(playlist.tracks)})},$scope.play=function(){mopidy.tracklist.add({tracks:angular.copy(playlist.tracks)}).then(function(tlTracks){mopidy.playback.play({tl_track:tlTracks[0]})})},$scope.replace=function(){mopidy.tracklist.clear({}).then(function(){return mopidy.tracklist.add({tracks:angular.copy(playlist.tracks)})}).then(function(tlTracks){mopidy.playback.play({tl_track:tlTracks[0]})})},$scope.click=function(track){settings.click(mopidy,track.uri)}}),angular.module("mopidy-mobile.settings",["ionic","pascalprecht.translate","mopidy-mobile.connection","mopidy-mobile.logging"]).config(function($stateProvider,$translateProvider,connectionProvider,loggingProvider,settingsProvider){$stateProvider.state("tabs.settings",{url:"/settings",views:{settings:{templateUrl:"templates/settings.html",controller:"SettingsCtrl"}}}).state("tabs.connections",{url:"/connections",views:{settings:{templateUrl:"templates/connections.html",controller:"ConnectionsCtrl"}}}).state("tabs.logging",{url:"/logging",views:{settings:{templateUrl:"templates/logging.html",controller:"LoggingCtrl"}}}),connectionProvider.settings.backoffDelayMin(250),connectionProvider.settings.backoffDelayMax(1e3),connectionProvider.settings.webSocketUrl(settingsProvider.get("webSocketUrl")),angular.forEach(settingsProvider.get("logging"),function(value,key){angular.isFunction(loggingProvider[key])&&loggingProvider[key](value)}),$translateProvider.preferredLanguage(settingsProvider.get("locale","en"))}).controller("SettingsCtrl",function($scope,$state,$rootScope,$log,$window,$translate,locales,settings){function isWebExtension(){for(var scripts=$window.document.scripts,i=0;i!=scripts.length;++i)if(/\/mopidy\/mopidy\.(min\.)?js$/.test(scripts[i].src||""))return!0;return!1}$scope.settings={webSocketUrl:settings.get("webSocketUrl"),locale:settings.get("locale","en"),stylesheet:settings.get("stylesheet","css/ionic.min.css"),action:settings.get("action","add+play")},isWebExtension()||($scope.settings.webSocketUrl||$state.go("^.connections"),$scope.connections=settings.get("connections")),$scope.locales=locales,$scope.$watch("settings.webSocketUrl",function(newValue,oldValue){newValue!==oldValue&&(newValue?(settings.set("webSocketUrl",newValue),$log.log("Reconnecting to "+newValue),$window.location.hash="",$window.location.reload(!0)):$state.go("^.connections"))}),$scope.$watch("settings.locale",function(value){settings.set("locale",value),$translate.use(value)}),$scope.$watch("settings.stylesheet",function(value){var link=angular.element(document.getElementById("stylesheet"));settings.set("stylesheet",value),link.attr("href",value)}),$scope.$watch("settings.action",function(value){settings.set("action",value)}),$rootScope.$on("connectionsChanged",function(){$scope.connections=settings.get("connections"),$scope.settings.webSocketUrl=settings.get("webSocketUrl")})}).controller("ConnectionsCtrl",function($scope,$state,$rootScope,settings){$scope.connection={name:"",host:"",port:6680},$scope.save=function(connection){var webSocketUrl="ws://"+connection.host+":"+connection.port+"/mopidy/ws/",connections=settings.get("connections",{});connections[webSocketUrl]=connection,settings.set("connections",connections),settings.set("webSocketUrl",webSocketUrl),$rootScope.$broadcast("connectionsChanged"),$state.go("^.settings")}}).controller("LoggingCtrl",function($scope,logging,settings){$scope.logging={enabled:logging.enabled(),debugEnabled:logging.debugEnabled(),maxBufferSize:logging.maxBufferSize()},$scope.format=angular.toJson,$scope.messages=logging.messages,$scope.$watch("logging",function(values){logging.enabled(values.enabled),logging.debugEnabled(values.debugEnabled),logging.maxBufferSize(values.maxBufferSize),settings.set("logging",values)},!0)}).provider("settings",function(){var provider=this,prefix="mopidy-mobile.";angular.extend(provider,{get:function(key,defaultValue){if(key=prefix+key,!(key in window.localStorage))return defaultValue;try{return angular.fromJson(window.localStorage[key])}catch(e){return window.console.log("exception",window.localStorage[key]),defaultValue}}}),provider.$get=function(){var trackActions={add:function(mopidy,uri){return mopidy.tracklist.add({uri:uri})},"add+play":function(mopidy,uri){return mopidy.tracklist.add({uri:uri}).then(function(tlTracks){return mopidy.playback.play({tl_track:tlTracks[0]})})}};return angular.extend(provider,{set:function(key,value){return window.localStorage[prefix+key]=angular.toJson(value),this},click:function(mopidy,uri){return trackActions[this.get("action","add+play")](mopidy,uri)}})}}),angular.module("mopidy-mobile.tracklist",["ionic","mopidy-mobile.connection"]).config(function($stateProvider){$stateProvider.state("tabs.tracklist",{url:"/tracklist",views:{tracklist:{templateUrl:"templates/tracklist.html",controller:"TracklistCtrl",resolve:{mopidy:function(connection){return connection()},currentTlTrack:function(connection){return connection(function(mopidy){return mopidy.playback.getCurrentTlTrack()})},options:function(connection){return connection(function(mopidy){return mopidy.tracklist.getOptions()})},tlTracks:function(connection){return connection(function(mopidy){return mopidy.tracklist.getTlTracks()})},msg:function($q,$translate){return $q.all({Cancel:$translate("Cancel"),"Clear Tracklist":$translate("Clear Tracklist"),"Save as Playlist":$translate("Save as Playlist"),OK:$translate("OK"),"Playlist Name":$translate("Playlist Name"),"Playlist saved":$translate("Playlist saved"),"Error saving playlist":$translate("Error saving playlist")})}}}}})}).controller("TracklistCtrl",function($scope,$ionicPopover,$ionicPopup,mopidy,msg,currentTlTrack,options,tlTracks){var handlers={"event:optionsChanged":function(){mopidy.tracklist.getOptions().then(function(options){$scope.$apply(function(scope){scope.options=options})})},"event:trackPlaybackEnded":function(event){$scope.$apply(function(scope){scope.currentTlTrack=event.tl_track})},"event:trackPlaybackPaused":function(event){$scope.$apply(function(scope){scope.currentTlTrack=event.tl_track})},"event:trackPlaybackResumed":function(event){$scope.$apply(function(scope){scope.currentTlTrack=event.tl_track})},"event:trackPlaybackStarted":function(event){$scope.$apply(function(scope){scope.currentTlTrack=event.tl_track})},"event:tracklistChanged":function(){mopidy.playback.getCurrentTlTrack().then(function(tlTrack){$scope.$apply(function(scope){scope.currentTlTrack=tlTrack})}),mopidy.tracklist.getTlTracks().then(function(tlTracks){$scope.$apply(function(scope){scope.tlTracks=tlTracks})})}};$ionicPopover.fromTemplateUrl("templates/popovers/tracklist.html",{scope:$scope}).then(function(popover){$scope.popover=popover}),$scope.currentTlTrack=currentTlTrack,$scope.options=options,$scope.tlTracks=tlTracks,$scope.clear=function(){$ionicPopup.confirm({title:msg["Clear Tracklist"],okText:msg.OK,cancelText:msg.Cancel}).then(function(result){result&&mopidy.tracklist.clear()})},$scope.getTracks=function(){return $scope.tlTracks.map(function(tlTrack){return tlTrack.track})},$scope.index=function(tlTrack){for(var tlid=tlTrack.tlid,tlTracks=$scope.tlTracks,i=0,length=tlTracks.length;i!==length;++i)if(tlTracks[i].tlid===tlid)return i;return-1},$scope.play=function(tlTrack){mopidy.playback.play({tl_track:angular.copy(tlTrack)})},$scope.remove=function(tlTrack){mopidy.tracklist.remove({criteria:{tlid:[tlTrack.tlid]}})},$scope.save=function(){$ionicPopup.prompt({title:msg["Save as Playlist"],template:msg["Playlist Name"],okText:msg.OK,cancelText:msg.Cancel}).then(function(name){name&&mopidy.playlists.create({name:name}).then(function(playlist){return playlist.tracks=$scope.getTracks(),mopidy.playlists.save({playlist:playlist})}).then(function(){$ionicPopup.alert({title:msg["Playlist saved"],okText:msg.OK})},function(error){$ionicPopup.alert({title:msg["Error saving playlist"],subTitle:error.message,template:"<pre>"+error.data.message+"</pre>",okText:msg.OK})})})},$scope.setOptions=function(params){mopidy.tracklist.setOptions(params)},$scope.getThumbnailURI=function(track){return track.album&&track.album.images&&track.album.images.length?mopidy.resolveURI(track.album.images[0]):"images/thumbnail.png"},$scope.$on("$destroy",function(){angular.forEach(handlers,function(listener,event){mopidy.off(event,listener)}),$scope.popover.remove()}),angular.forEach(handlers,function(listener,event){mopidy.on(event,listener)})});