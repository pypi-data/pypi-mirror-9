angular.module("mopidy-mobile.connection",[]).provider("Mopidy",function(){var provider=this,settings={autoConnect:!1,callingConvention:"by-position-or-by-name"},isUriRefRegExp=/^\//;provider.settings={backoffDelayMin:function(value){settings.backoffDelayMin=value},backoffDelayMax:function(value){settings.backoffDelayMax=value},webSocketUrl:function(value){settings.webSocketUrl=value}},provider.isWebExtension=function(){for(var scripts=window.document.scripts,i=0;i!=scripts.length;++i)if(/\/mopidy\/mopidy\.(min\.)?js$/.test(scripts[i].src||""))return!0;return!1},provider.$get=function($q,$log,$window,$ionicLoading){var mopidy=new Mopidy(settings),pending={},reconnects=0;mopidy.on($log.debug.bind($log)),mopidy.on("websocket:outgoingMessage",function(event){$ionicLoading.show(),pending[event.id]=event}),mopidy.on("websocket:incomingMessage",function(event){var data=angular.fromJson(event.data);data.id in pending&&(delete pending[data.id],$ionicLoading.hide()),reconnects=0}),mopidy.on("reconnectionPending",function(){++reconnects>3&&(location.hash="",location.reload(!0))});var promise=$q(function(resolve){mopidy.once("state:online",function(){function makeObject(keys,values){for(var obj={},i=0,length=keys.length;i!==length;++i)obj[keys[i]]=values[i];return obj}var when=mopidy.getVersion().__proto__.constructor;angular.extend(mopidy,{all:when.all,iterate:when.iterate,join:function(){return mopidy.all(arguments)},resolveURI:function(uri){if(settings.webSocketUrl&&isUriRefRegExp.test(uri)){var match=/^ws:\/\/([^\/]+)/.exec(settings.webSocketUrl);return"http://"+match[1]+uri}return uri}}),angular.extend(mopidy.tracklist,{tracks:function(params){return mopidy.join(mopidy.tracklist.eotTrack(params),mopidy.tracklist.nextTrack(params),mopidy.tracklist.previousTrack(params)).then(function(results){return makeObject(["eot","next","previous"],results)})},getOptions:function(){return mopidy.join(mopidy.tracklist.getConsume(),mopidy.tracklist.getRandom(),mopidy.tracklist.getRepeat(),mopidy.tracklist.getSingle()).then(function(results){return makeObject(["consume","random","repeat","single"],results)})},setOptions:function(params){var promises=[];return"consume"in params&&promises.push(mopidy.tracklist.setConsume({value:params.consume})),"random"in params&&promises.push(mopidy.tracklist.setRandom({value:params.random})),"repeat"in params&&promises.push(mopidy.tracklist.setRepeat({value:params.repeat})),"single"in params&&promises.push(mopidy.tracklist.setSingle({value:params.single})),mopidy.all(promises)}}),resolve(mopidy)}),mopidy.connect()}),factory=function(callback){if(callback){var defer=$q.defer();return promise.then(function(mopidy){callback(mopidy).then(function(result){defer.resolve(result)})}),defer.promise}return promise};return angular.extend(factory,{reconnect:function(){$window.location.reload(!0)}})}}),angular.module("mopidy-mobile.library",["ionic","mopidy-mobile.connection","mopidy-mobile.settings"]).config(function($stateProvider){$stateProvider.state("tabs.library",{"abstract":!0,url:"/library",views:{library:{template:"<ion-nav-view></ion-nav-view>"}}}).state("tabs.library.root",{url:"",templateUrl:"templates/browse.html",controller:"BrowseCtrl",resolve:{mopidy:function(Mopidy){return Mopidy()},ref:function(){return null},refs:function(Mopidy){return Mopidy(function(mopidy){return mopidy.library.browse({uri:null})})}}}).state("tabs.library.browse",{url:"/browse?type&name&uri",controller:"BrowseCtrl",templateUrl:"templates/browse.html",resolve:{mopidy:function(Mopidy){return Mopidy()},ref:function($stateParams){return{type:$stateParams.type,name:$stateParams.name,uri:$stateParams.uri}},refs:function($stateParams,Mopidy){return Mopidy(function(mopidy){return mopidy.library.browse({uri:$stateParams.uri})})}}}).state("tabs.library.search",{url:"/search?q&uri",controller:"SearchCtrl",templateUrl:"templates/search.html",resolve:{mopidy:function(Mopidy){return Mopidy()},q:function($stateParams){return $stateParams.q},results:function($stateParams,Mopidy){return Mopidy(function(mopidy){return mopidy.library.search({query:{any:$stateParams.q},uris:$stateParams.uri?[$stateParams.uri]:null})})}}})}).controller("BrowseCtrl",function($scope,$state,$ionicPopover,settings,mopidy,ref,refs){$scope.ref=ref,$scope.refs=refs,$scope.tracks=[];for(var i=0,length=refs.length;i!==length;++i)"track"===refs[i].type&&$scope.tracks.push({__model__:"Track",name:refs[i].name,uri:refs[i].uri});$ionicPopover.fromTemplateUrl("templates/popovers/library.html",{scope:$scope}).then(function(popover){$scope.popover=popover}),$scope.add=function(){mopidy.tracklist.add({tracks:angular.copy($scope.tracks)})},$scope.click=function(ref){settings.click(mopidy,ref.uri)},$scope.play=function(){mopidy.tracklist.add({tracks:angular.copy($scope.tracks)}).then(function(tlTracks){mopidy.playback.play({tl_track:tlTracks[0]})})},$scope.refresh=function(){mopidy.library.refresh({uri:$scope.ref?$scope.ref.uri:null}).then(function(){$scope.$broadcast("scroll.refreshComplete")})},$scope.replace=function(){mopidy.tracklist.clear({}).then(function(){return mopidy.tracklist.add({tracks:angular.copy($scope.tracks)})}).then(function(tlTracks){mopidy.playback.play({tl_track:tlTracks[0]})})},$scope.search=function(q){$state.go("^.search",{q:q,uri:$scope.ref?$scope.ref.uri:null})}}).controller("SearchCtrl",function($scope,settings,mopidy,q,results){$scope.q=q,$scope.results=results,$scope.click=function(model){settings.click(mopidy,model.uri)}}),angular.module("mopidy-mobile.locales",["pascalprecht.translate"]).constant("locales",{en:{displayName:"English",messages:{"Add Tracks to Tracklist":"Add Tracks to Tracklist","Add to Tracklist":"Add to Tracklist",Cancel:"Cancel","Clear Tracklist":"Clear Tracklist",Clear:"Clear",Connection:"Connection",Consume:"Consume","Default Click Action":"Default Click Action",Edit:"Edit",Empty:"Empty","Error saving playlist":"Error saving playlist",Language:"Language",Library:"Library","Nothing playing":"Nothing playling",OK:"OK","Play All Tracks":"Play All Tracks","Play All":"Play All","Play Track":"Play Track",Playback:"Playback","Playlist Name":"Playlist Name","Playlist saved":"Playlist saved",Playlists:"Playlists","Pull to refresh":"Pull to refresh",Random:"Random",Remove:"Remove",Repeat:"Repeat","Replace Current Tracklist":"Replace Current Tracklist","Save as Playlist":"Save as Playlist","Save as":"Save as",Save:"Save","Search here":"Search here",Settings:"Settings",Single:"Single",Theme:"Theme",Tracklist:"Tracklist","{count} Tracks":"{{count}} Tracks","{index} of {count}":"{{index}} of {{count}}"}},de:{displayName:"Deutsch",messages:{"Add Tracks to Tracklist":"Titel hinzufügen","Add to Tracklist":"Titel hinzufügen",Cancel:"Abbrechen","Clear Tracklist":"Titel löschen",Clear:"Leeren",Connection:"Verbindung",Consume:"Verbrauchsmodus","Default Click Action":"Beim Klicken",Edit:"Bearbeiten",Empty:"Leer","Error saving playlist":"Fehler beim Speichern der Playlist",Language:"Sprache",Library:"Bibliothek","Nothing playing":"Nichts spielt",OK:"OK","Play All Tracks":"Alle Titel abspielen","Play All":"Alle abspielen","Play Track":"Titel abspielen",Playback:"Wiedergabe","Playlist Name":"Name der Playlist","Playlist saved":"Playlist gespeichert",Playlists:"Listen","Pull to refresh":"Zum Aktualisieren ziehen",Random:"Zufällig",Remove:"Löschen",Repeat:"Wiederholen","Replace Current Tracklist":"Titel ersetzen","Save as Playlist":"Als Playlist speichern","Save as":"Speichern unter",Save:"Speichern","Search here":"Hier suchen",Settings:"Einstellungen",Single:"Einzelmodus",Theme:"Design",Tracklist:"Titel","{count} Tracks":"{{count}} Titel","{index} of {count}":"{{index}} von {{count}}"}}}).factory("missingTranslationHandler",function($log){return function(translationId){$log.warn("Missing translation: "+translationId)}}).filter("duration",function(){return function(ms){if(void 0===ms||null===ms)return"n/a";var s=Math.round(ms/1e3),sec=s%60,min=parseInt(s/60),value=min+":"+(10>sec?"0":"")+sec;return value}}).config(function($translateProvider,locales){angular.forEach(locales,function(locale,id){$translateProvider.translations(id,locale.messages)}),$translateProvider.useMissingTranslationHandler("missingTranslationHandler")}),angular.module("mopidy-mobile",["ionic","mopidy-mobile.connection","mopidy-mobile.locales","mopidy-mobile.playback","mopidy-mobile.tracklist","mopidy-mobile.library","mopidy-mobile.playlists","mopidy-mobile.settings"]).config(function($stateProvider,$urlRouterProvider,$ionicConfigProvider){$stateProvider.state("tabs",{"abstract":!0,url:"/tabs",templateUrl:"templates/tabs.html"}),$urlRouterProvider.otherwise("/tabs/playback"),$ionicConfigProvider.tabs.position("bottom"),$ionicConfigProvider.tabs.style("standard")}).run(function($ionicPlatform){$ionicPlatform.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&window.cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0)})}),angular.module("mopidy-mobile.playback",["ionic","mopidy-mobile.settings"]).config(function($stateProvider){$stateProvider.state("tabs.playback",{url:"/playback",views:{playback:{templateUrl:"templates/playback.html",controller:"PlaybackCtrl",resolve:{mopidy:function(Mopidy){return Mopidy()},mute:function(Mopidy){return Mopidy(function(mopidy){return mopidy.playback.getMute()})},options:function(Mopidy){return Mopidy(function(mopidy){return mopidy.tracklist.getOptions()})},state:function(Mopidy){return Mopidy(function(mopidy){return mopidy.playback.getState()})},tlTracks:function(Mopidy){return Mopidy(function(mopidy){return mopidy.playback.getCurrentTlTrack().then(function(tlTrack){return mopidy.join(mopidy.tracklist.tracks({tl_track:tlTrack}),tlTrack)}).then(function(results){return angular.extend(results[0],{current:results[1]})})})}}}}})}).controller("PlaybackCtrl",function($scope,$interval,$window,$log,$q,mopidy,mute,options,state,tlTracks){function setCurrentTlTrack(tlTrack,timePosition){$scope.$apply(function(scope){tlTrack&&scope.tlTracks.current&&tlTrack.tlid===scope.tlTracks.current.tlid||(scope.tlTracks={current:tlTrack},scope.track=tlTrack?tlTrack.track:null,mopidy.tracklist.tracks({tl_track:tlTrack}).then(function(tlTracks){scope.$apply(function(scope){!scope.track&&tlTracks.eot&&(scope.track=tlTracks.eot.track),angular.extend(scope.tlTracks,tlTracks)})})),void 0!==timePosition&&(scope.time.value=timePosition)})}var handlers={"event:muteChanged":function(event){$scope.$apply(function(scope){scope.mute=event.mute})},"event:optionsChanged":function(){mopidy.tracklist.getOptions().then(function(options){$scope.$apply(function(scope){scope.options=options})})},"event:playbackStateChanged":function(event){$scope.$apply(function(scope){scope.state=event.new_state})},"event:trackPlaybackEnded":function(){mopidy.playback.getCurrentTlTrack().then(function(tlTrack){setCurrentTlTrack(tlTrack,0)})},"event:trackPlaybackPaused":function(event){setCurrentTlTrack(event.tl_track,event.time_position)},"event:trackPlaybackResumed":function(event){setCurrentTlTrack(event.tl_track,event.time_position)},"event:trackPlaybackStarted":function(event){setCurrentTlTrack(event.tl_track,0)},"event:tracklistChanged":function(){mopidy.playback.getCurrentTlTrack().then(setCurrentTlTrack)},"event:volumeChanged":function(event){$scope.volume.pending||$scope.$apply(function(scope){scope.volume.value=event.volume})},"event:seeked":function(event){$scope.time.pending||$scope.$apply(function(scope){scope.time.value=event.time_position})}},time=$scope.time={pending:!1,value:0};time.change=function(){function update(value){mopidy.playback.seek({time_position:value}).then(function(){value===$window.parseInt(time.value)?defer.resolve():defer.notify()})}if(!time.pending){var defer=$q.defer();time.pending=!0,update($window.parseInt(time.value)),defer.promise.then(function(){$log.debug("seek done"),time.pending=!1},function(){$log.debug("seek error"),time.pending=!1},function(){$log.debug("seek pending: "+time.value),update($window.parseInt(time.value))})}},mopidy.playback.getTimePosition().then(function(value){$scope.$apply(function(scope){scope.time.position=value})});var volume=$scope.volume={pending:!1,value:0};volume.change=function(){function update(value){mopidy.playback.setVolume({volume:value}).then(function(){value===$window.parseInt(volume.value)?defer.resolve():defer.notify()})}if(!volume.pending){var defer=$q.defer();volume.pending=!0,update($window.parseInt(volume.value)),defer.promise.then(function(){$log.debug("volume done"),volume.pending=!1},function(){$log.debug("volume error"),volume.pending=!1},function(){$log.debug("volume pending: "+volume.value),update($window.parseInt(volume.value))})}},mopidy.playback.getVolume().then(function(value){$scope.$apply(function(scope){scope.volume.value=value})}),$scope.mute=mute,$scope.options=options,$scope.state=state,$scope.tlTracks=tlTracks,$scope.track=(tlTracks.current||tlTracks.eot||{track:null}).track,$scope.interval=$interval(function(){if("playing"===$scope.state){var t=$window.parseInt($scope.time.value);Math.floor(t/1e3)%10===0?mopidy.playback.getTimePosition().then(function(value){$scope.$apply(function(scope){scope.time.value=value})}):$scope.time.value=t+1e3}},1e3),$scope.play=function(){mopidy.playback.play()},$scope.pause=function(){mopidy.playback.pause()},$scope.stop=function(){mopidy.playback.stop()},$scope.next=function(){var state=$scope.state;mopidy.playback.next().then(function(){"stopped"===state&&mopidy.playback.getCurrentTlTrack().then(setCurrentTlTrack)})},$scope.previous=function(){var state=$scope.state;mopidy.playback.previous().then(function(){"stopped"===state&&mopidy.playback.getCurrentTlTrack().then(setCurrentTlTrack)})},$scope.setMute=function(mute){mopidy.playback.setMute({value:mute})},$scope.setOptions=function(params){mopidy.tracklist.setOptions(params)},$scope.getImageURI=function(track){return track&&track.album&&track.album.images&&track.album.images.length?mopidy.resolveURI(track.album.images[0]):""},$scope.$on("$destroy",function(){angular.forEach(handlers,function(listener,event){mopidy.off(event,listener)}),$interval.cancel($scope.interval)}),angular.forEach(handlers,function(listener,event){mopidy.on(event,listener)})}),angular.module("mopidy-mobile.playlists",["ionic","mopidy-mobile.connection","mopidy-mobile.settings"]).config(function($stateProvider){$stateProvider.state("tabs.playlists",{"abstract":!0,url:"/playlists",views:{playlists:{template:"<ion-nav-view></ion-nav-view>"}}}).state("tabs.playlists.root",{url:"",controller:"PlaylistsCtrl",templateUrl:"templates/playlists.html",resolve:{mopidy:function(Mopidy){return Mopidy()},playlists:function(Mopidy){return Mopidy(function(mopidy){return mopidy.playlists.getPlaylists()})}}}).state("tabs.playlists.playlist",{url:"/{uri}",controller:"PlaylistCtrl",templateUrl:"templates/playlist.html",resolve:{mopidy:function(Mopidy){return Mopidy()},playlist:function($stateParams,Mopidy){return Mopidy(function(mopidy){return mopidy.playlists.lookup({uri:$stateParams.uri})})}}})}).controller("PlaylistsCtrl",function($scope,$log,mopidy,playlists){var handlers={"event:playlistChanged":function(playlist){$log.debug("playlistChanged: "+playlist.name)},"event:playlistsLoaded":function(){mopidy.playlists.getPlaylists().then(function(playlists){$scope.$apply(function(scope){scope.playlists=playlists})})}};$scope.playlists=playlists,$scope.refresh=function(){mopidy.playlists.refresh({uri_scheme:null}).then(function(){$scope.$broadcast("scroll.refreshComplete")})},$scope.$on("$destroy",function(){angular.forEach(handlers,function(listener,event){mopidy.off(event,listener)})}),angular.forEach(handlers,function(listener,event){mopidy.on(event,listener)})}).controller("PlaylistCtrl",function($scope,$ionicPopover,settings,mopidy,playlist){$ionicPopover.fromTemplateUrl("templates/popovers/playlist.html",{scope:$scope}).then(function(popover){$scope.popover=popover}),$scope.playlist=playlist,$scope.add=function(){mopidy.tracklist.add({tracks:angular.copy(playlist.tracks)})},$scope.play=function(){mopidy.tracklist.add({tracks:angular.copy(playlist.tracks)}).then(function(tlTracks){mopidy.playback.play({tl_track:tlTracks[0]})})},$scope.replace=function(){mopidy.tracklist.clear({}).then(function(){return mopidy.tracklist.add({tracks:angular.copy(playlist.tracks)})}).then(function(tlTracks){mopidy.playback.play({tl_track:tlTracks[0]})})},$scope.click=function(track){settings.click(mopidy,track.uri)}}),angular.module("mopidy-mobile.settings",["ionic","mopidy-mobile.connection"]).config(function($stateProvider,$logProvider,$translateProvider,settingsProvider,MopidyProvider){$stateProvider.state("tabs.settings",{url:"/settings",views:{settings:{templateUrl:"templates/settings.html",controller:"SettingsCtrl"}}}),$logProvider.debugEnabled(!1),$translateProvider.preferredLanguage(settingsProvider.get("locale","en")),MopidyProvider.settings.backoffDelayMin(250),MopidyProvider.settings.backoffDelayMax(1e3);var webSocketUrl=settingsProvider.get("webSocketUrl");webSocketUrl?MopidyProvider.settings.webSocketUrl(webSocketUrl):MopidyProvider.isWebExtension()||(webSocketUrl=window.prompt("Mopidy WebSocket URL","ws://"+(location.hostname||"localhost")+":6680/mopidy/ws/"),MopidyProvider.settings.webSocketUrl(webSocketUrl),settingsProvider.set("webSocketUrl",webSocketUrl))}).controller("SettingsCtrl",function($scope,$state,$translate,Mopidy,settings,locales){$scope.locales=locales,$scope.settings={webSocketUrl:settings.get("webSocketUrl"),locale:settings.get("locale","en"),stylesheet:settings.get("stylesheet","css/ionic.min.css"),action:settings.get("action","add+play")},$scope.updateWebSocketUrl=function(){var value=$scope.settings.webSocketUrl;settings.set("webSocketUrl",value),Mopidy.reconnect(value)},$scope.$watch("settings.locale",function(value){settings.set("locale",value),$translate.use(value)}),$scope.$watch("settings.stylesheet",function(value){var link=angular.element(document.getElementById("stylesheet"));settings.set("stylesheet",value),link.attr("href",value)}),$scope.$watch("settings.action",function(value){settings.set("action",value)})}).provider("settings",function(){var provider=this;angular.extend(provider,{get:function(key,defaultValue){return key="mopidy-mobile."+key,key in window.localStorage?window.localStorage[key]:defaultValue},set:function(key,value){key="mopidy-mobile."+key,window.localStorage[key]=value}}),provider.$get=function(){var trackActions={add:function(mopidy,uri){return mopidy.tracklist.add({uri:uri})},"add+play":function(mopidy,uri){return mopidy.tracklist.add({uri:uri}).then(function(tlTracks){return mopidy.playback.play({tl_track:tlTracks[0]})})}};return angular.extend(provider,{click:function(mopidy,uri){return trackActions[this.get("action","add+play")](mopidy,uri)}})}}),angular.module("mopidy-mobile.tracklist",["ionic","mopidy-mobile.connection"]).config(function($stateProvider){$stateProvider.state("tabs.tracklist",{url:"/tracklist",views:{tracklist:{templateUrl:"templates/tracklist.html",controller:"TracklistCtrl",resolve:{mopidy:function(Mopidy){return Mopidy()},currentTlTrack:function(Mopidy){return Mopidy(function(mopidy){return mopidy.playback.getCurrentTlTrack()})},options:function(Mopidy){return Mopidy(function(mopidy){return mopidy.tracklist.getOptions()})},tlTracks:function(Mopidy){return Mopidy(function(mopidy){return mopidy.tracklist.getTlTracks()})},msg:function($q,$translate){return $q.all({Cancel:$translate("Cancel"),"Clear Tracklist":$translate("Clear Tracklist"),"Save as Playlist":$translate("Save as Playlist"),OK:$translate("OK"),"Playlist Name":$translate("Playlist Name"),"Playlist saved":$translate("Playlist saved"),"Error saving playlist":$translate("Error saving playlist")})}}}}})}).controller("TracklistCtrl",function($scope,$ionicPopover,$ionicPopup,mopidy,msg,currentTlTrack,options,tlTracks){var handlers={"event:optionsChanged":function(){mopidy.tracklist.getOptions().then(function(options){$scope.$apply(function(scope){scope.options=options})})},"event:trackPlaybackEnded":function(event){$scope.$apply(function(scope){scope.currentTlTrack=event.tl_track})},"event:trackPlaybackPaused":function(event){$scope.$apply(function(scope){scope.currentTlTrack=event.tl_track})},"event:trackPlaybackResumed":function(event){$scope.$apply(function(scope){scope.currentTlTrack=event.tl_track})},"event:trackPlaybackStarted":function(event){$scope.$apply(function(scope){scope.currentTlTrack=event.tl_track})},"event:tracklistChanged":function(){mopidy.join(mopidy.playback.getCurrentTlTrack(),mopidy.tracklist.getTlTracks()).then(function(results){$scope.$apply(function(scope){scope.currentTlTrack=results[0],scope.tlTracks=results[1]})})}};$ionicPopover.fromTemplateUrl("templates/popovers/tracklist.html",{scope:$scope}).then(function(popover){$scope.popover=popover}),$scope.currentTlTrack=currentTlTrack,$scope.options=options,$scope.tlTracks=tlTracks,$scope.clear=function(){$ionicPopup.confirm({title:msg["Clear Tracklist"],okText:msg.OK,cancelText:msg.Cancel}).then(function(result){result&&mopidy.tracklist.clear()})},$scope.getTracks=function(){for(var tracks=[],tlTracks=$scope.tlTracks,i=0,length=tlTracks.length;i!==length;++i)tracks.push(tlTracks[i].track);return tracks},$scope.index=function(tlTrack){for(var tlid=tlTrack.tlid,tlTracks=$scope.tlTracks,i=0,length=tlTracks.length;i!==length;++i)if(tlTracks[i].tlid===tlid)return i;return-1},$scope.play=function(tlTrack){mopidy.playback.play({tl_track:angular.copy(tlTrack)})},$scope.remove=function(tlTrack){mopidy.tracklist.remove({criteria:{tlid:[tlTrack.tlid]}})},$scope.save=function(){$ionicPopup.prompt({title:msg["Save as Playlist"],template:msg["Playlist Name"],okText:msg.OK,cancelText:msg.Cancel}).then(function(name){name&&mopidy.playlists.create({name:name}).then(function(playlist){return playlist.tracks=$scope.getTracks(),mopidy.playlists.save({playlist:playlist})}).then(function(){$ionicPopup.alert({title:msg["Playlist saved"],okText:msg.OK})},function(error){$ionicPopup.alert({title:msg["Error saving playlist"],subTitle:error.message,template:"<pre>"+error.data.message+"</pre>",okText:msg.OK})})})},$scope.setOptions=function(params){mopidy.tracklist.setOptions(params)},$scope.getImageURI=function(track){return track.album&&track.album.images&&track.album.images.length?mopidy.resolveURI(track.album.images[0]):"images/mopidy.png"},$scope.$on("$destroy",function(){angular.forEach(handlers,function(listener,event){mopidy.off(event,listener)}),$scope.popover.remove()}),angular.forEach(handlers,function(listener,event){mopidy.on(event,listener)})});