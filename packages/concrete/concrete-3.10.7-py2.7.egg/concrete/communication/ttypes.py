#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import concrete.uuid.ttypes
import concrete.language.ttypes
import concrete.structure.ttypes
import concrete.entities.ttypes
import concrete.situations.ttypes
import concrete.email.ttypes
import concrete.twitter.ttypes
import concrete.audio.ttypes
import concrete.nitf.ttypes
import concrete.metadata.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Communication(object):
  """
  A single communication instance, containing linguistic content
  generated by a single speaker or author.  This type is used for
  both inter-personal communications (such as phone calls or
  conversations) and third-party communications (such as news
  articles).

  Each communication instance is grounded by its original
  (unannotated) contents, which should be stored in either the
  "text" field (for text communications) or the "audio" field (for
  audio communications).  If the communication is not available in
  its original form, then these fields should store the
  communication in the least-processed form available.

  Attributes:
   - id: Stable identifier for this communication, identifying both the
  name of the source corpus and the document that it corresponds to
  in that corpus.
   - uuid: Universally unique identifier for this communication instance.
  This is generated randomly, and can *not* be mapped back to the
  source corpus. It is used as a target for symbolic "pointers".
   - type: An enumeration used to indicate what type of communication this
  is. The optional fields named "<i>kind</i>Info" can be used to
  store extra fields that are specific to the communication
  type.
   - text: The full text contents of this communication in its original
  form, or in the least-processed form available, if the original
  is not available.
   - startTime: The time when this communication started (in unix time UTC --
  i.e., seconds since January 1, 1970).
   - endTime: The time when this communication ended (in unix time UTC --
  i.e., seconds since January 1, 1970).
   - metadata: metadata.AnnotationMetadata to support this particular communication.

  Communications derived from other communications should
  indicate in this metadata object their dependency
  to the original communication ID.
   - keyValueMap: A catch-all store of keys and values. Use sparingly!
   - lidList: Theories about the languages that are present in this
  communication.
   - sectionList: Theory about the block structure of this communication.
   - entityMentionSetList: Theories about which spans of text are used to mention entities
  in this communication.
   - entitySetList: Theories about what entities are discussed in this
  communication, with pointers to individual mentions.
   - situationMentionSetList: Theories about what situations are explicitly mentioned in this
  communication.
   - situationSetList: Theories about what situations are asserted in this
  communication.
   - originalText: Optional original text field that points back to an original
  communication.

  This field can be populated for sake of convenience when creating
  "perspective" communication (communications that are based on
  highly destructive changes to an original communication [e.g.,
  via MT]). This allows developers to quickly access the original
  text that this perspective communication is based off of.
   - sound: The full audio contents of this communication in its original
  form, or in the least-processed form available, if the original
  is not available.
   - tweetInfo: Extra information for communications where kind==TWEET:
  Information about this tweet that is provided by the Twitter
  API.  For information about the Twitter API, see:
  <https://dev.twitter.com/docs/platform-objects>
   - emailInfo: Extra information for communications where kind==EMAIL
   - nitfInfo: Extra information that may come from the NITF
  (News Industry Text Format) schema. See 'nitf.thrift'.
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRUCT, 'uuid', (concrete.uuid.ttypes.UUID, concrete.uuid.ttypes.UUID.thrift_spec), None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.STRING, 'text', None, None, ), # 4
    (5, TType.I64, 'startTime', None, None, ), # 5
    (6, TType.I64, 'endTime', None, None, ), # 6
    None, # 7
    (8, TType.STRUCT, 'metadata', (concrete.metadata.ttypes.AnnotationMetadata, concrete.metadata.ttypes.AnnotationMetadata.thrift_spec), None, ), # 8
    (9, TType.MAP, 'keyValueMap', (TType.STRING,None,TType.STRING,None), None, ), # 9
    (10, TType.LIST, 'lidList', (TType.STRUCT,(concrete.language.ttypes.LanguageIdentification, concrete.language.ttypes.LanguageIdentification.thrift_spec)), None, ), # 10
    (11, TType.LIST, 'sectionList', (TType.STRUCT,(concrete.structure.ttypes.Section, concrete.structure.ttypes.Section.thrift_spec)), None, ), # 11
    (12, TType.LIST, 'entityMentionSetList', (TType.STRUCT,(concrete.entities.ttypes.EntityMentionSet, concrete.entities.ttypes.EntityMentionSet.thrift_spec)), None, ), # 12
    (13, TType.LIST, 'entitySetList', (TType.STRUCT,(concrete.entities.ttypes.EntitySet, concrete.entities.ttypes.EntitySet.thrift_spec)), None, ), # 13
    (14, TType.LIST, 'situationMentionSetList', (TType.STRUCT,(concrete.situations.ttypes.SituationMentionSet, concrete.situations.ttypes.SituationMentionSet.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'situationSetList', (TType.STRUCT,(concrete.situations.ttypes.SituationSet, concrete.situations.ttypes.SituationSet.thrift_spec)), None, ), # 15
    (16, TType.STRING, 'originalText', None, None, ), # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'sound', (concrete.audio.ttypes.Sound, concrete.audio.ttypes.Sound.thrift_spec), None, ), # 20
    (21, TType.STRUCT, 'tweetInfo', (concrete.twitter.ttypes.TweetInfo, concrete.twitter.ttypes.TweetInfo.thrift_spec), None, ), # 21
    (22, TType.STRUCT, 'emailInfo', (concrete.email.ttypes.EmailCommunicationInfo, concrete.email.ttypes.EmailCommunicationInfo.thrift_spec), None, ), # 22
    (23, TType.STRUCT, 'nitfInfo', (concrete.nitf.ttypes.NITFInfo, concrete.nitf.ttypes.NITFInfo.thrift_spec), None, ), # 23
  )

  def __init__(self, id=None, uuid=None, type=None, text=None, startTime=None, endTime=None, metadata=None, keyValueMap=None, lidList=None, sectionList=None, entityMentionSetList=None, entitySetList=None, situationMentionSetList=None, situationSetList=None, originalText=None, sound=None, tweetInfo=None, emailInfo=None, nitfInfo=None,):
    self.id = id
    self.uuid = uuid
    self.type = type
    self.text = text
    self.startTime = startTime
    self.endTime = endTime
    self.metadata = metadata
    self.keyValueMap = keyValueMap
    self.lidList = lidList
    self.sectionList = sectionList
    self.entityMentionSetList = entityMentionSetList
    self.entitySetList = entitySetList
    self.situationMentionSetList = situationMentionSetList
    self.situationSetList = situationSetList
    self.originalText = originalText
    self.sound = sound
    self.tweetInfo = tweetInfo
    self.emailInfo = emailInfo
    self.nitfInfo = nitfInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.uuid = concrete.uuid.ttypes.UUID()
          self.uuid.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.text = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.startTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.metadata = concrete.metadata.ttypes.AnnotationMetadata()
          self.metadata.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.keyValueMap = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString().decode('utf-8')
            _val6 = iprot.readString().decode('utf-8')
            self.keyValueMap[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.lidList = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = concrete.language.ttypes.LanguageIdentification()
            _elem12.read(iprot)
            self.lidList.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.sectionList = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = concrete.structure.ttypes.Section()
            _elem18.read(iprot)
            self.sectionList.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.entityMentionSetList = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = concrete.entities.ttypes.EntityMentionSet()
            _elem24.read(iprot)
            self.entityMentionSetList.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.entitySetList = []
          (_etype28, _size25) = iprot.readListBegin()
          for _i29 in xrange(_size25):
            _elem30 = concrete.entities.ttypes.EntitySet()
            _elem30.read(iprot)
            self.entitySetList.append(_elem30)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.situationMentionSetList = []
          (_etype34, _size31) = iprot.readListBegin()
          for _i35 in xrange(_size31):
            _elem36 = concrete.situations.ttypes.SituationMentionSet()
            _elem36.read(iprot)
            self.situationMentionSetList.append(_elem36)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.situationSetList = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = concrete.situations.ttypes.SituationSet()
            _elem42.read(iprot)
            self.situationSetList.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.originalText = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.sound = concrete.audio.ttypes.Sound()
          self.sound.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRUCT:
          self.tweetInfo = concrete.twitter.ttypes.TweetInfo()
          self.tweetInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRUCT:
          self.emailInfo = concrete.email.ttypes.EmailCommunicationInfo()
          self.emailInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRUCT:
          self.nitfInfo = concrete.nitf.ttypes.NITFInfo()
          self.nitfInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Communication')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRUCT, 2)
      self.uuid.write(oprot)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 4)
      oprot.writeString(self.text.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 5)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 6)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    if self.metadata is not None:
      oprot.writeFieldBegin('metadata', TType.STRUCT, 8)
      self.metadata.write(oprot)
      oprot.writeFieldEnd()
    if self.keyValueMap is not None:
      oprot.writeFieldBegin('keyValueMap', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.keyValueMap))
      for kiter43,viter44 in self.keyValueMap.items():
        oprot.writeString(kiter43.encode('utf-8'))
        oprot.writeString(viter44.encode('utf-8'))
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.lidList is not None:
      oprot.writeFieldBegin('lidList', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.lidList))
      for iter45 in self.lidList:
        iter45.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sectionList is not None:
      oprot.writeFieldBegin('sectionList', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.sectionList))
      for iter46 in self.sectionList:
        iter46.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.entityMentionSetList is not None:
      oprot.writeFieldBegin('entityMentionSetList', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.entityMentionSetList))
      for iter47 in self.entityMentionSetList:
        iter47.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.entitySetList is not None:
      oprot.writeFieldBegin('entitySetList', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.entitySetList))
      for iter48 in self.entitySetList:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.situationMentionSetList is not None:
      oprot.writeFieldBegin('situationMentionSetList', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.situationMentionSetList))
      for iter49 in self.situationMentionSetList:
        iter49.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.situationSetList is not None:
      oprot.writeFieldBegin('situationSetList', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.situationSetList))
      for iter50 in self.situationSetList:
        iter50.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.originalText is not None:
      oprot.writeFieldBegin('originalText', TType.STRING, 16)
      oprot.writeString(self.originalText.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sound is not None:
      oprot.writeFieldBegin('sound', TType.STRUCT, 20)
      self.sound.write(oprot)
      oprot.writeFieldEnd()
    if self.tweetInfo is not None:
      oprot.writeFieldBegin('tweetInfo', TType.STRUCT, 21)
      self.tweetInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.emailInfo is not None:
      oprot.writeFieldBegin('emailInfo', TType.STRUCT, 22)
      self.emailInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.nitfInfo is not None:
      oprot.writeFieldBegin('nitfInfo', TType.STRUCT, 23)
      self.nitfInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.uuid is None:
      raise TProtocol.TProtocolException(message='Required field uuid is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.metadata is None:
      raise TProtocol.TProtocolException(message='Required field metadata is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
