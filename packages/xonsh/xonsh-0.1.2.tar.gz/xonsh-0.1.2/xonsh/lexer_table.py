# lexer_table.py. This file automatically created by PLY (version 3.4). Don't edit!
_tabversion   = '3.4'
_lextokens    = {'IMPORT': 1, 'TRY': 1, 'RPAREN': 1, 'FOR': 1, 'DOUBLEDIV': 1, 'RBRACKET': 1, 'LT': 1, 'DOUBLEDIVEQUAL': 1, 'XOREQUAL': 1, 'NE': 1, 'AMPERSAND': 1, 'PIPE': 1, 'YIELD': 1, 'PLUSEQUAL': 1, 'DEL': 1, 'POWEQUAL': 1, 'CONTINUE': 1, 'IN': 1, 'RAISE': 1, 'COMMENT': 1, 'CLASS': 1, 'LBRACKET': 1, 'PASS': 1, 'RSHIFT': 1, 'GE': 1, 'BREAK': 1, 'OCT_LITERAL': 1, 'DOLLAR': 1, 'HEX_LITERAL': 1, 'LE': 1, 'RSHIFTEQUAL': 1, 'DEDENT': 1, 'ELSE': 1, 'RAW_STRING_LITERAL': 1, 'AT': 1, 'AND': 1, 'DOLLAR_LBRACE': 1, 'LSHIFTEQUAL': 1, 'NONLOCAL': 1, 'GT': 1, 'BIN_LITERAL': 1, 'INDENT': 1, 'LPAREN': 1, 'DIVEQUAL': 1, 'MOD': 1, 'AMPERSANDEQUAL': 1, 'STRING_LITERAL': 1, 'UNICODE_LITERAL': 1, 'NOT': 1, 'TIMESEQUAL': 1, 'LAMBDA': 1, 'DOLLAR_LPAREN': 1, 'FALSE': 1, 'EXCEPT': 1, 'POW': 1, 'DIVIDE': 1, 'EQUALS': 1, 'DOUBLE_QUESTION': 1, 'LSHIFT': 1, 'IS': 1, 'NEWLINE': 1, 'TILDE': 1, 'PLUS': 1, 'AS': 1, 'COMMA': 1, 'EQ': 1, 'WHILE': 1, 'PIPEEQUAL': 1, 'RETURN': 1, 'ASSERT': 1, 'PERIOD': 1, 'IF': 1, 'BYTES_LITERAL': 1, 'SEMI': 1, 'LBRACE': 1, 'INT_LITERAL': 1, 'ELLIPSIS': 1, 'NONE': 1, 'DOLLAR_LBRACKET': 1, 'RARROW': 1, 'OR': 1, 'TRUE': 1, 'QUESTION': 1, 'FLOAT_LITERAL': 1, 'WITH': 1, 'COLON': 1, 'NAME': 1, 'MINUS': 1, 'MODEQUAL': 1, 'ENDMARKER': 1, 'REGEXPATH': 1, 'XOR': 1, 'DEF': 1, 'ELIF': 1, 'FROM': 1, 'RBRACE': 1, 'MINUSEQUAL': 1, 'FINALLY': 1, 'GLOBAL': 1, 'TIMES': 1}
_lexreflags   = 0
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_INDENT>[ \\t]+)|(?P<t_NEWLINE>\\n)|(?P<t_DOLLAR_LPAREN>\\$\\()|(?P<t_LPAREN>\\()|(?P<t_RPAREN>\\))|(?P<t_DOLLAR_LBRACE>\\$\\{)|(?P<t_LBRACE>\\{)|(?P<t_RBRACE>\\})|(?P<t_DOLLAR_LBRACKET>\\$\\[)|(?P<t_LBRACKET>\\[)|(?P<t_RBRACKET>\\])|(?P<t_DOUBLE_QUESTION>\\?\\?)|(?P<t_STRING_LITERAL>(?:\'(?:[^\'\\n\\r\\\\]|(?:\'\')|(?:\\\\x[0-9a-fA-F]+)|(?:\\\\.))*\')|(?:"(?:[^"\\n\\r\\\\]|(?:"")|(?:\\\\x[0-9a-fA-F]+)|(?:\\\\.))*"))|(?P<t_RAW_STRING_LITERAL>r(?:\'(?:[^\'\\n\\r\\\\]|(?:\'\')|(?:\\\\x[0-9a-fA-F]+)|(?:\\\\.))*\')|r(?:"(?:[^"\\n\\r\\\\]|(?:"")|(?:\\\\x[0-9a-fA-F]+)|(?:\\\\.))*"))|(?P<t_UNICODE_LITERAL>u(?:\'(?:[^\'\\n\\r\\\\]|(?:\'\')|(?:\\\\x[0-9a-fA-F]+)|(?:\\\\.))*\')|u(?:"(?:[^"\\n\\r\\\\]|(?:"")|(?:\\\\x[0-9a-fA-F]+)|(?:\\\\.))*"))|(?P<t_BYTES_LITERAL>b(?:\'(?:[^\'\\n\\r\\\\]|(?:\'\')|(?:\\\\x[0-9a-fA-F]+)|(?:\\\\.))*\')|b(?:"(?:[^"\\n\\r\\\\]|(?:"")|(?:\\\\x[0-9a-fA-F]+)|(?:\\\\.))*"))|(?P<t_FLOAT_LITERAL>(((((?:[0-9]*\\.[0-9]+)|(?:[0-9]+\\.))(?:[eE][-+]?[0-9]+)?)|([0-9]+(?:[eE][-+]?[0-9]+)))))|(?P<t_HEX_LITERAL>0[xX][0-9a-fA-F]+)|(?P<t_OCT_LITERAL>0[oO]?[0-7]+)|(?P<t_BIN_LITERAL>0[bB]?[0-1]+)|(?P<t_INT_LITERAL>\\d+)|(?P<t_NONE>None)|(?P<t_TRUE>True)|(?P<t_FALSE>False)|(?P<t_NAME>[a-zA-Z_][0-9a-zA-Z_]*)|(?P<t_REGEXPATH>`[^`]*`)|(?P<t_ELLIPSIS>\\.\\.\\.)|(?P<t_ignore_COMMENT>\\#.*$)|(?P<t_POWEQUAL>\\*\\*=)|(?P<t_POW>\\*\\*)|(?P<t_ENDMARKER>\\x03)|(?P<t_XOREQUAL>\\^=)|(?P<t_PLUSEQUAL>\\+=)|(?P<t_DOUBLEDIVEQUAL>//=)|(?P<t_PIPEEQUAL>\\|=)|(?P<t_TIMESEQUAL>\\*=)|(?P<t_RSHIFTEQUAL>>>=)|(?P<t_LSHIFTEQUAL><<=)|(?P<t_GE>>=)|(?P<t_XOR>\\^)|(?P<t_RARROW>->)|(?P<t_PLUS>\\+)|(?P<t_RSHIFT>>>)|(?P<t_PIPE>\\|)|(?P<t_DIVEQUAL>/=)|(?P<t_LSHIFT><<)|(?P<t_LE><=)|(?P<t_EQ>==)|(?P<t_AMPERSANDEQUAL>&=)|(?P<t_DOUBLEDIV>//)|(?P<t_NE>!=)|(?P<t_MINUSEQUAL>-=)|(?P<t_DOLLAR>\\$)|(?P<t_TIMES>\\*)|(?P<t_MODEQUAL>%=)|(?P<t_QUESTION>\\?)|(?P<t_PERIOD>\\.)|(?P<t_MINUS>-)|(?P<t_SEMI>;)|(?P<t_EQUALS>=)|(?P<t_AMPERSAND>&)|(?P<t_LT><)|(?P<t_GT>>)|(?P<t_DIVIDE>/)|(?P<t_COLON>:)|(?P<t_TILDE>~)|(?P<t_COMMA>,)|(?P<t_AT>@)|(?P<t_MOD>%)', [None, ('t_INDENT', 'INDENT'), ('t_NEWLINE', 'NEWLINE'), ('t_DOLLAR_LPAREN', 'DOLLAR_LPAREN'), ('t_LPAREN', 'LPAREN'), ('t_RPAREN', 'RPAREN'), ('t_DOLLAR_LBRACE', 'DOLLAR_LBRACE'), ('t_LBRACE', 'LBRACE'), ('t_RBRACE', 'RBRACE'), ('t_DOLLAR_LBRACKET', 'DOLLAR_LBRACKET'), ('t_LBRACKET', 'LBRACKET'), ('t_RBRACKET', 'RBRACKET'), ('t_DOUBLE_QUESTION', 'DOUBLE_QUESTION'), ('t_STRING_LITERAL', 'STRING_LITERAL'), ('t_RAW_STRING_LITERAL', 'RAW_STRING_LITERAL'), ('t_UNICODE_LITERAL', 'UNICODE_LITERAL'), ('t_BYTES_LITERAL', 'BYTES_LITERAL'), ('t_FLOAT_LITERAL', 'FLOAT_LITERAL'), None, None, None, None, None, ('t_HEX_LITERAL', 'HEX_LITERAL'), ('t_OCT_LITERAL', 'OCT_LITERAL'), ('t_BIN_LITERAL', 'BIN_LITERAL'), ('t_INT_LITERAL', 'INT_LITERAL'), ('t_NONE', 'NONE'), ('t_TRUE', 'TRUE'), ('t_FALSE', 'FALSE'), ('t_NAME', 'NAME'), (None, 'REGEXPATH'), (None, 'ELLIPSIS'), (None, None), (None, 'POWEQUAL'), (None, 'POW'), (None, 'ENDMARKER'), (None, 'XOREQUAL'), (None, 'PLUSEQUAL'), (None, 'DOUBLEDIVEQUAL'), (None, 'PIPEEQUAL'), (None, 'TIMESEQUAL'), (None, 'RSHIFTEQUAL'), (None, 'LSHIFTEQUAL'), (None, 'GE'), (None, 'XOR'), (None, 'RARROW'), (None, 'PLUS'), (None, 'RSHIFT'), (None, 'PIPE'), (None, 'DIVEQUAL'), (None, 'LSHIFT'), (None, 'LE'), (None, 'EQ'), (None, 'AMPERSANDEQUAL'), (None, 'DOUBLEDIV'), (None, 'NE'), (None, 'MINUSEQUAL'), (None, 'DOLLAR'), (None, 'TIMES'), (None, 'MODEQUAL'), (None, 'QUESTION'), (None, 'PERIOD'), (None, 'MINUS'), (None, 'SEMI'), (None, 'EQUALS'), (None, 'AMPERSAND'), (None, 'LT'), (None, 'GT'), (None, 'DIVIDE'), (None, 'COLON'), (None, 'TILDE'), (None, 'COMMA'), (None, 'AT'), (None, 'MOD')])]}
_lexstateignore = {'INITIAL': ''}
_lexstateerrorf = {'INITIAL': 't_error'}
