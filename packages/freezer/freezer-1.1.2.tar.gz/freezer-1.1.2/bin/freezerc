#!/usr/bin/env python
'''
Copyright 2014 Hewlett-Packard

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

This product includes cryptographic software written by Eric Young
(eay@cryptsoft.com). This product includes software written by Tim
Hudson (tjh@cryptsoft.com).
========================================================================

Freezer offer the following features:
[*] Backup your filesystem using lvm snapshot to swift
[*] Data Encryption (AES-256-CFB)
[*] Backup your file system tree directly (without volume snapshot)
[*] Backup your journaled mongodb directory tree using lvm snap to swift
[*] Backup MySQL DB with lvm snapshot
[*] Restore automatically your data from swift to your filesystems
[*] Low storage consumption as the backup are uploaded as a stream
[*] Flexible Incremental backup policy
'''

from freezer.main import freezer_main
from freezer.arguments import backup_arguments
from freezer.utils import create_dir

import os
import subprocess
import logging
import sys

# Initialize backup options
(backup_args, arg_parse) = backup_arguments()

if backup_args.version:
    print "freezer version {0}".format(backup_args.__version__)
    sys.exit(1)

if len(sys.argv) < 2:
    arg_parse.print_help()
    sys.exit(1)


def configure_log_file_using_defaults():

    dry_run_message = ''
    if backup_args.dry_run:
        dry_run_message = '[DRY_RUN] '

    def configure_logging(file_name):
        expanded_file_name = os.path.expanduser(file_name)
        expanded_dir_name = os.path.dirname(expanded_file_name)
        create_dir(expanded_dir_name, do_log=False)
        logging.basicConfig(
            filename=expanded_file_name,
            level=logging.INFO,
            format=('%(asctime)s %(name)s %(levelname)s {0}%(message)s'.
                    format(dry_run_message)))
        return expanded_file_name

    if backup_args.log_file:
        return configure_logging(backup_args.log_file)

    for file_name in ['/var/log/freezer.log', '~/.freezer/freezer.log']:
        try:
            return configure_logging(file_name)
        except IOError:
            pass

    raise Exception("Unable to write to log file")


def set_max_process_priority():
    # children processes inherit niceness from father
    try:
        logging.warning(
            '[*] Setting freezer execution with high CPU and I/O priority')
        PID = os.getpid()
        # Set cpu priority
        os.nice(-19)
        # Set I/O Priority to Real Time class with level 0
        subprocess.call(
            [u'{0}'.format(backup_args.ionice),
                u'-c', u'1', u'-n', u'0', u'-t', u'-p', u'{0}'.format(PID)])
    except Exception as priority_error:
        logging.warning('[*] Priority: {0}'.format(priority_error))


def fail(exit_code, e, do_log=True):
    msg = '[*] Critical Error: {0}\n'.format(e)
    if not backup_args.quiet:
        sys.stderr.write(msg)
    if do_log:
        logging.critical(msg)
    sys.exit(exit_code)


if __name__ == '__main__':
    try:
        log_file_name = configure_log_file_using_defaults()
    except Exception as err:
        fail(1, err, do_log=False)

    if not backup_args.quiet:
        print 'log file at {0}'.format(log_file_name)

    if backup_args.max_priority:
        set_max_process_priority()

    try:
        freezer_main(backup_args)
    except ValueError as err:
        fail(1, err)
    except ImportError as err:
        fail(1, err)
    except Exception as err:
        fail(1, err)
