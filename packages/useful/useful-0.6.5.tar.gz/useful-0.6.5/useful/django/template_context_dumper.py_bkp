import os
import bz2
import pickle

from django.utils.encoding import force_text
from django.utils.text import slugify


def dump_template_context(dump_path, template_name, data, context_instance):
    if not os.path.exists(dump_path):
        os.makedirs(dump_path, mode=0755)

    out_filename = slugify(force_text(template_name).replace('/', '_').replace('.', '-'))
    out_filename += '.template-context.bz2'
    out_filepath = os.path.join(dump_path, out_filename)

    out_file = bz2.BZ2File(out_filepath, 'w')

    try:
        csrf_memo, stream_memo, meta_memo = [], {}, {}

        print
        print "PRE"
        import pprint; pprint.pprint(context_instance)  # TODO REMOVE

        for ctx_dict in context_instance:
            if 'csrf_token' in ctx_dict:
                csrf_memo.append((ctx_dict, ctx_dict['csrf_token']))
                ctx_dict['csrf_token'] = force_text(ctx_dict['csrf_token'])

            req = ctx_dict.get('request')
            if req is not None:
                if hasattr(req, '_stream'):
                    if id(req) not in stream_memo:
                        stream_memo[id(req)] = (req, req._stream)
                    del req._stream

                if hasattr(req, 'META'):
                    if id(req) not in meta_memo:
                        meta_memo[id(req)] = (req, req.META.copy())
                        for k, v in req.META.items():
#                             if not isinstance(v, basestring):
                            if not k.startswith('HTTP_'):
                                del req.META[k]

        print
        print "IN"
        import pprint; pprint.pprint(context_instance)  # TODO REMOVE

        dump = dict(template_name=template_name,
                    data=data,
                    context_instance=context_instance)
#                     context_class=context_instance.__class__,
#                     request=dict(GET=request.GET,
#                                  POST=request.POST,
#                                  COOKIES
#                                  META=dict((k, v) for k, v in request.META.items()
#                                            if k.startswith('HTTP_') and isinstance(v, basestring)),
#                                  user=request.user,
#                                  path=request.path))
        pickle.dump(dump, out_file, protocol=pickle.HIGHEST_PROTOCOL)
        out_file.close()
        1/0
        for ctx_dict, token in csrf_memo:
            ctx_dict['csrf_token'] = token
        for req, _stream in stream_memo.values():
            req._stream = _stream
        for req, meta in meta_memo.values():
            req.META = meta

        print
        print "POST"
        import pprint; pprint.pprint(context_instance)  # TODO REMOVE


    except:
        out_file.close()
        os.unlink(out_filepath)
        raise
