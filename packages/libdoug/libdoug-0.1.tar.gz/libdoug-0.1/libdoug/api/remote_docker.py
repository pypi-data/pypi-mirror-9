# vim: set fileencoding=utf-8
# Pavel Odvody <podvody@redhat.com>
#
# libdoug - DOcker Update Guard
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307 USA

from libdoug.api.remote_base import DockerAPIRequest

"""
 Docker Devour Remote API Bindings
 Autogenerated by ./api_parser.py against:
 126460df717cbf9cee3f6fdbac9639e7f09aaf239a873c3fba6f54cfa3ad398c
 May require manual edits afterwards!
"""

container_list = DockerAPIRequest.new(desc=u'List containers', type=u'GET', 
			url=u'/containers/json', url_sub=[], 
			get_params=[u'all', u'limit', u'since', u'before', u'size', u'filters'],
			filters=[u'exited', u'status'], 
			json=[], 
			status=[u'200', u'400', u'500'], 
			headers=[])

container_create = DockerAPIRequest.new(desc=u'Create a container', type=u'POST', 
			url=u'/containers/create', url_sub=[], 
			get_params=[u'name'],
			filters=[], 
			json=[u'Hostname', u'Domainname', u'User', u'Memory', u'MemorySwap', u'CpuShares', u'AttachStdin', u'AttachStdout', u'AttachStderr', u'Tty', u'OpenStdin', u'StdinOnce', u'Env', u'Cmd', u'Entrypoint', u'Image', u'Volumes', u'WorkingDir', u'NetworkDisabled', u'ExposedPorts', u'SecurityOpts', u'HostConfig', u'Binds', u'Links', u'LxcConf', u'PortBindings', u'PublishAllPorts', u'Privileged', u'Dns', u'DnsSearch', u'ExtraHosts', u'VolumesFrom', u'CapAdd', u'Capdrop', u'RestartPolicy', u'NetworkMode', u'Devices'], 
			status=[u'201', u'404', u'406', u'500'], 
			headers=[])

container_inspect = DockerAPIRequest.new(desc=u'Inspect a container', type=u'GET', 
			url=u'/containers/(id)/json', url_sub=[(12, 16)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

container_top = DockerAPIRequest.new(desc=u'List processes running inside a container', type=u'GET', 
			url=u'/containers/(id)/top', url_sub=[(12, 16)], 
			get_params=[u'ps_args'],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

container_logs = DockerAPIRequest.new(desc=u'Get container logs', type=u'GET', 
			url=u'/containers/(id)/logs', url_sub=[(12, 16)], 
			get_params=[u'follow', u'stdout', u'stderr', u'timestamps', u'tail'],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

container_diff = DockerAPIRequest.new(desc=u'Inspect changes on a container\'s filesystem', type=u'GET', 
			url=u'/containers/(id)/changes', url_sub=[(12, 16)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

container_export = DockerAPIRequest.new(desc=u'Export a container', type=u'GET', 
			url=u'/containers/(id)/export', url_sub=[(12, 16)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

container_resize_tty = DockerAPIRequest.new(desc=u'Resize a container TTY', type=u'POST', 
			url=u'/containers/(id)/resize?h=&lt;height&gt;&amp;w=&lt;width&gt;', url_sub=[(12, 16)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

container_start = DockerAPIRequest.new(desc=u'Start a container', type=u'POST', 
			url=u'/containers/(id)/start', url_sub=[(12, 16)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'204', u'304', u'404', u'500'], 
			headers=[])

container_stop = DockerAPIRequest.new(desc=u'Stop a container', type=u'POST', 
			url=u'/containers/(id)/stop', url_sub=[(12, 16)], 
			get_params=[u't'],
			filters=[], 
			json=[], 
			status=[u'204', u'304', u'404', u'500'], 
			headers=[])

container_restart = DockerAPIRequest.new(desc=u'Restart a container', type=u'POST', 
			url=u'/containers/(id)/restart', url_sub=[(12, 16)], 
			get_params=[u't'],
			filters=[], 
			json=[], 
			status=[u'204', u'404', u'500'], 
			headers=[])

container_kill = DockerAPIRequest.new(desc=u'Kill a container', type=u'POST', 
			url=u'/containers/(id)/kill', url_sub=[(12, 16)], 
			get_params=[u'signal'],
			filters=[], 
			json=[], 
			status=[u'204', u'404', u'500'], 
			headers=[])

container_pause = DockerAPIRequest.new(desc=u'Pause a container', type=u'POST', 
			url=u'/containers/(id)/pause', url_sub=[(12, 16)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'204', u'404', u'500'], 
			headers=[])

container_unpause = DockerAPIRequest.new(desc=u'Unpause a container', type=u'POST', 
			url=u'/containers/(id)/unpause', url_sub=[(12, 16)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'204', u'404', u'500'], 
			headers=[])

container_attach = DockerAPIRequest.new(desc=u'Attach to a container', type=u'POST', 
			url=u'/containers/(id)/attach', url_sub=[(12, 16)], 
			get_params=[u'logs', u'stream', u'stdin', u'stdout', u'stderr'],
			filters=[], 
			json=[], 
			status=[u'200', u'400', u'404', u'500'], 
			headers=[])

container_attach_websocket = DockerAPIRequest.new(desc=u'Attach to a container (websocket)', type=u'GET', 
			url=u'/containers/(id)/attach/ws', url_sub=[(12, 16)], 
			get_params=[u'logs', u'stream', u'stdin', u'stdout', u'stderr'],
			filters=[], 
			json=[], 
			status=[u'200', u'400', u'404', u'500'], 
			headers=[])

container_wait = DockerAPIRequest.new(desc=u'Wait a container', type=u'POST', 
			url=u'/containers/(id)/wait', url_sub=[(12, 16)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

container_remove = DockerAPIRequest.new(desc=u'Remove a container', type=u'DELETE', 
			url=u'/containers/(id)', url_sub=[(12, 16)], 
			get_params=[u'v', u'force'],
			filters=[], 
			json=[], 
			status=[u'204', u'400', u'404', u'500'], 
			headers=[])

container_copy = DockerAPIRequest.new(desc=u'Copy files or folders from a container', type=u'POST', 
			url=u'/containers/(id)/copy', url_sub=[(12, 16)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

image_list = DockerAPIRequest.new(desc=u'List Images', type=u'GET', 
			url=u'/images/json', url_sub=[], 
			get_params=[u'all', u'filters'],
			filters=[u'dangling'], 
			json=[], 
			status=[], 
			headers=[])

image_create = DockerAPIRequest.new(desc=u'Create an image', type=u'POST', 
			url=u'/images/create', url_sub=[], 
			get_params=[u'fromImage', u'fromSrc', u'repo', u'tag', u'registry'],
			filters=[], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[u'X-Registry-Auth'])

image_inspect = DockerAPIRequest.new(desc=u'Inspect an image', type=u'GET', 
			url=u'/images/(name)/json', url_sub=[(8, 14)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

image_history = DockerAPIRequest.new(desc=u'Get the history of an image', type=u'GET', 
			url=u'/images/(name)/history', url_sub=[(8, 14)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

image_push = DockerAPIRequest.new(desc=u'Push an image on the registry', type=u'POST', 
			url=u'/images/(name)/push', url_sub=[(8, 14)], 
			get_params=[u'tag'],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])

image_tag = DockerAPIRequest.new(desc=u'Tag an image into a repository', type=u'POST', 
			url=u'/images/(name)/tag', url_sub=[(8, 14)], 
			get_params=[u'repo', u'force', u'tag'],
			filters=[], 
			json=[], 
			status=[u'201', u'400', u'404', u'409', u'500'], 
			headers=[])

image_remove = DockerAPIRequest.new(desc=u'Remove an image', type=u'DELETE', 
			url=u'/images/(name)', url_sub=[(8, 14)], 
			get_params=[u'force', u'noprune'],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'409', u'500'], 
			headers=[])

image_search = DockerAPIRequest.new(desc=u'Search images', type=u'GET', 
			url=u'/images/search', url_sub=[], 
			get_params=[u'term'],
			filters=[], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[])

image_build = DockerAPIRequest.new(desc=u'Build an image from Dockerfile via stdin', type=u'POST', 
			url=u'/build', url_sub=[], 
			get_params=[u't', u'q', u'nocache', u'pull', u'rm', u'forcerm'],
			filters=[], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[u'Content-type', u'X-Registry-Config'])

docker_auth = DockerAPIRequest.new(desc=u'Check auth configuration', type=u'POST', 
			url=u'/auth', url_sub=[], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'204', u'500'], 
			headers=[])

docker_info = DockerAPIRequest.new(desc=u'Display system-wide information', type=u'GET', 
			url=u'/info', url_sub=[], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[])

docker_version = DockerAPIRequest.new(desc=u'Show the docker version information', type=u'GET', 
			url=u'/version', url_sub=[], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[])

docker_ping = DockerAPIRequest.new(desc=u'Ping the docker server', type=u'GET', 
			url=u'/_ping', url_sub=[], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[])

container_commit = DockerAPIRequest.new(desc=u'Create a new image from a container\'s changes', type=u'POST', 
			url=u'/commit', url_sub=[], 
			get_params=[u'container', u'repo', u'tag', u'comment', u'author'],
			filters=[], 
			json=[u'config'], 
			status=[u'201', u'404', u'500'], 
			headers=[])

container_events = DockerAPIRequest.new(desc=u'Monitor Docker\'s events', type=u'GET', 
			url=u'/events', url_sub=[], 
			get_params=[u'since', u'until', u'filters'],
			filters=[u'event', u'image', u'container'], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[])

image_export = DockerAPIRequest.new(desc=u'Get a tarball containing all images in a repository', type=u'GET', 
			url=u'/images/(name)/get', url_sub=[(8, 14)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[])

image_export_all = DockerAPIRequest.new(desc=u'Get a tarball containing all images.', type=u'GET', 
			url=u'/images/get', url_sub=[], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[])

image_import = DockerAPIRequest.new(desc=u'Load a tarball with a set of images and tags into docker', type=u'POST', 
			url=u'/images/load', url_sub=[], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[])

exec_create = DockerAPIRequest.new(desc=u'Exec Create', type=u'POST', 
			url=u'/containers/(id)/exec', url_sub=[(12, 16)], 
			get_params=[],
			filters=[], 
			json=[u'AttachStdin', u'AttachStdout', u'AttachStderr', u'Tty', u'Cmd'], 
			status=[u'201', u'404'], 
			headers=[])

exec_start = DockerAPIRequest.new(desc=u'Exec Start', type=u'POST', 
			url=u'/exec/(id)/start', url_sub=[(6, 10)], 
			get_params=[],
			filters=[], 
			json=[u'Detach', u'Tty'], 
			status=[u'201', u'404'], 
			headers=[])

exec_resize = DockerAPIRequest.new(desc=u'Exec Resize', type=u'POST', 
			url=u'/exec/(id)/resize', url_sub=[(6, 10)], 
			get_params=[u'h', u'w'],
			filters=[], 
			json=[], 
			status=[u'201', u'404'], 
			headers=[])

exec_inspect = DockerAPIRequest.new(desc=u'Exec Inspect', type=u'GET', 
			url=u'/exec/(id)/json', url_sub=[(6, 10)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404', u'500'], 
			headers=[])
