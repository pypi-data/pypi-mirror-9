# vim: set fileencoding=utf-8
# Pavel Odvody <podvody@redhat.com>
#
# libdoug - DOcker Update Guard
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307 USA

from libdoug.api.remote_base import DockerAPIRequest

"""
 Docker Devour Remote API Bindings
 Autogenerated by ./api_parser.py against:
 e0b7d85ceb4a6f4b13db646416f1e51a568d3913cce5c56414501a60ca7b0fd0
 May require manual edits afterwards!
"""

repository_create = DockerAPIRequest.new(desc=u'Create a user repository', type=u'PUT', 
			url=u'/v1/repositories/(namespace)/(repo_name)/', url_sub=[(17, 28), (29, 40)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'400', u'401', u'403'], 
			headers=[])

repository_delete = DockerAPIRequest.new(desc=u'Delete a user repository', type=u'DELETE', 
			url=u'/v1/repositories/(namespace)/(repo_name)/', url_sub=[(17, 28), (29, 40)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'202', u'400', u'401', u'403'], 
			headers=[])

repository_library_create = DockerAPIRequest.new(desc=u'Create a library repository', type=u'PUT', 
			url=u'/v1/repositories/(repo_name)/', url_sub=[(17, 28)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'400', u'401', u'403'], 
			headers=[])

repository_library_delete = DockerAPIRequest.new(desc=u'Delete a library repository', type=u'DELETE', 
			url=u'/v1/repositories/(repo_name)/', url_sub=[(17, 28)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'202', u'400', u'401', u'403'], 
			headers=[])

repository_update = DockerAPIRequest.new(desc=u'Update user repository images', type=u'PUT', 
			url=u'/v1/repositories/(namespace)/(repo_name)/images', url_sub=[(17, 28), (29, 40)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'204', u'400', u'401', u'403'], 
			headers=[])

repository_list = DockerAPIRequest.new(desc=u'List user repository images', type=u'GET', 
			url=u'/v1/repositories/(namespace)/(repo_name)/images', url_sub=[(17, 28), (29, 40)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404'], 
			headers=[])

repository_library_update = DockerAPIRequest.new(desc=u'Update library repository images', type=u'PUT', 
			url=u'/v1/repositories/(repo_name)/images', url_sub=[(17, 28)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'204', u'400', u'401', u'403'], 
			headers=[])

repository_library_images = DockerAPIRequest.new(desc=u'List library repository images', type=u'GET', 
			url=u'/v1/repositories/(repo_name)/images', url_sub=[(17, 28)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'404'], 
			headers=[])

repository_library_auth = DockerAPIRequest.new(desc=u'Authorize a token for a library', type=u'PUT', 
			url=u'/v1/repositories/(repo_name)/auth', url_sub=[(17, 28)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'403', u'404'], 
			headers=[])

repository_auth = DockerAPIRequest.new(desc=u'Authorize a token for a user repository', type=u'PUT', 
			url=u'/v1/repositories/(namespace)/(repo_name)/auth', url_sub=[(17, 28), (29, 40)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'403', u'404'], 
			headers=[])

user_login = DockerAPIRequest.new(desc=u'User Login', type=u'GET', 
			url=u'/v1/users/', url_sub=[], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'401', u'403'], 
			headers=[])

user_register = DockerAPIRequest.new(desc=u'User Register', type=u'POST', 
			url=u'/v1/users/', url_sub=[], 
			get_params=[],
			filters=[], 
			json=[u'email', u'username', u'password'], 
			status=[u'201', u'400'], 
			headers=[])

user_update = DockerAPIRequest.new(desc=u'Update User', type=u'PUT', 
			url=u'/v1/users/(username)/', url_sub=[(10, 20)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'204', u'400', u'401', u'403', u'404'], 
			headers=[])
