# vim: set fileencoding=utf-8
# Pavel Odvody <podvody@redhat.com>
#
# libdoug - DOcker Update Guard
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307 USA

from libdoug.api.remote_base import DockerAPIRequest

"""
Docker Devour Remote API Bindings
Autogenerated by ./api_parser.py against:
11862dd07f958c104c57eedcf6513e19c4f1c74b21ef46b6f1f0544bbe54a568
May require manual edits afterwards!
"""

image_layer_get = DockerAPIRequest.new(desc=u'Get image layer', type=u'GET', 
			url=u'/v1/images/(image_id)/layer', url_sub=[(11, 21)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'401', u'404'], 
			headers=[])

image_layer_put = DockerAPIRequest.new(desc=u'Put image layer', type=u'PUT', 
			url=u'/v1/images/(image_id)/layer', url_sub=[(11, 21)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'401', u'404'], 
			headers=[])

image_layer_put_json = DockerAPIRequest.new(desc=u'Put image layer', type=u'PUT', 
			url=u'/v1/images/(image_id)/json', url_sub=[(11, 21)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'401'], 
			headers=[])

image_layer_get_json = DockerAPIRequest.new(desc=u'Get image layer', type=u'GET', 
			url=u'/v1/images/(image_id)/json', url_sub=[(11, 21)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'401', u'404'], 
			headers=[])

image_ancestry_get = DockerAPIRequest.new(desc=u'Get image ancestry', type=u'GET', 
			url=u'/v1/images/(image_id)/ancestry', url_sub=[(11, 21)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'401', u'404'], 
			headers=[])

repository_tags_get = DockerAPIRequest.new(desc=u'List repository tags', type=u'GET', 
			url=u'/v1/repositories/(namespace)/(repository)/tags', url_sub=[(17, 28), (29, 41)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'401', u'404'], 
			headers=[])

repository_id_for_tag = DockerAPIRequest.new(desc=u'Get image id for a particular tag', type=u'GET', 
			url=u'/v1/repositories/(namespace)/(repository)/tags/(tag*)', url_sub=[(17, 28), (29, 41), (47, 53)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'401', u'404'], 
			headers=[])

repository_delete = DockerAPIRequest.new(desc=u'Delete a repository tag', type=u'DELETE', 
			url=u'/v1/repositories/(namespace)/(repository)/tags/(tag*)', url_sub=[(17, 28), (29, 41), (47, 53)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'401', u'404'], 
			headers=[])

repository_tag_set = DockerAPIRequest.new(desc=u'Set a tag for a specified image id', type=u'PUT', 
			url=u'/v1/repositories/(namespace)/(repository)/tags/(tag*)', url_sub=[(17, 28), (29, 41), (47, 53)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'400', u'401', u'404'], 
			headers=[])

repository_delete = DockerAPIRequest.new(desc=u'Delete a repository', type=u'DELETE', 
			url=u'/v1/repositories/(namespace)/(repository)/', url_sub=[(17, 28), (29, 41)], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200', u'401', u'404'], 
			headers=[])


registry_search = DockerAPIRequest.new(desc=u'Search the registry', type=u'GET', 
			url=u'/v1/search', url_sub=[], 
			get_params=[u'q', u'n', u'page'],
			filters=[], 
			json=[], 
			status=[u'200', u'500'], 
			headers=[])

registry_status = DockerAPIRequest.new(desc=u'Status check for registry', type=u'GET', 
			url=u'/v1/_ping', url_sub=[], 
			get_params=[],
			filters=[], 
			json=[], 
			status=[u'200'], 
			headers=[])
