# vim: set fileencoding=utf-8
# Pavel Odvody <podvody@redhat.com>
#
# libdoug - DOcker Update Guard
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307 USA
from libdoug.utils import flag_gen 

class CliCapture(object):
	"""
	Capture Dockers CLI state in this object
	"""
	def __init__(self):
		self.verb = None
		self.flags = []
		self.context = []

	def addflag(self, f, v):
		self.flags.append((f, v))
		if f.type == FlagType.FauxVerb:
			self.setverb(f.names[1])

	def addcontext(self, c):
		self.context.append(c)

	def setverb(self, v):
		if self.verb:
			raise Exception('Attempt to replace verb: %s with: %s' % (self.verb, v))
		self.verb = v


class ArgType(object):
	"""
	 We can have 1 Verb, N flags, and N context args
	"""
	(Invalid, Verb, Flag, Context) = range(4)

class DockerVerb(object):
	"""
	 Enumeration of Docker CLI sub-commands or "verbs".
	"""
	(Invalid, Attach, Build, Commit, Cp, Create, 
	 Diff, Events, Exec, Export, History, Images, 
	 Import, Info, Inspect, Kill, Load, Login, 
	 Logout, Logs, Port, Pause, Ps, Pull, Push, 
	 Restart, Rm, Rmi, Run, Save, Search, Start, 
	 Stop, Tag, Top, Unpause) = range(36)

class FlagType(object):
	"""
	 Class describing what kind of information
	 is stored in the flag.

	 `PureBool` specifies a flag which is toggled
	 if no explicit value is specified (i.e. you 
	 don't need to write --verbose=true)
	"""
	(Invalid, Bool, Int, String, Path, Pure, FauxVerb) = flag_gen(7)
	PureBool = Bool | Pure

class Flag(object):
	"""
	 Flags for the Docker CLI
	"""
	def __init__(self, names=[], type=FlagType.Invalid, value=None, default=None):
		self.names = names
		self.value = value
		self.type = type
		self.default = default

	def __repr__(self):
		s = ''
		for n in self.names:
			p = '-' if len(n) == 1 else '--'
			s = s + ' / ' + p + n
		return s[3:]
	
	@staticmethod
	def new(**kv):
		f = Flag()
		for (key, value) in kv.iteritems():
			setattr(f, key, value)
		return f

class FlagCollection(object):
	"""
	Provides command level mapping for flag
	objects
	"""
	def __init__(self):
		self.flagmap = {}
		self.default = None

	def __contains__(self, key):
		return key in self.flagmap

	def map(self, cmd):
		return self.flagmap[cmd]

	def getdefault(self):
		return self.default

	@staticmethod
	def new(**kv):
		fc = FlagCollection()
		for (key, value) in kv.iteritems():
			# take only the part before '_', if present
			key = key if '_' not in key else key[:key.find('_')]
			fc.flagmap[key.lower()] = value
			if not fc.default:
				fc.default = value
		return fc

"""
Docker Devour Python Flag bindings
Autogenerated by ./python-bindings.sh against:
Docker version 1.4.1, build 5bc2ff8/1.4.1 
May require manual edits afterwards!
"""

_flags = FlagCollection.new(
	# docker [OPTIONS] COMMAND [arg...]
	DOCKER_FLAGS = [
		Flag.new(names=['api-enable-cors'], type=FlagType.PureBool, default=False),
		Flag.new(names=['b', 'bridge'], type=FlagType.String, default=''),
		Flag.new(names=['bip'], type=FlagType.String, default=''),
		Flag.new(names=['D', 'debug'], type=FlagType.PureBool, default=False),
		Flag.new(names=['d', 'daemon'], type=FlagType.PureBool, default=False),
		Flag.new(names=['dns'], type=FlagType.String, default=''),
		Flag.new(names=['dns-search'], type=FlagType.String, default=''),
		Flag.new(names=['e', 'exec-driver'], type=FlagType.String, default='native'),
		Flag.new(names=['G', 'group'], type=FlagType.String, default='docker'),
		Flag.new(names=['g', 'graph'], type=FlagType.Path, default='/var/lib/docker'),
		Flag.new(names=['H', 'host'], type=FlagType.String, default=''),
		Flag.new(names=['icc'], type=FlagType.Bool, default=True),
		Flag.new(names=['insecure-registry'], type=FlagType.String, default=''),
		Flag.new(names=['ip'], type=FlagType.String, default='0.0.0.0'),
		Flag.new(names=['ip-forward'], type=FlagType.Bool, default=True),
		Flag.new(names=['ip-masq'], type=FlagType.Bool, default=True),
		Flag.new(names=['iptables'], type=FlagType.Bool, default=True),
		Flag.new(names=['l', 'log-level'], type=FlagType.String, default='info'),
		Flag.new(names=['label'], type=FlagType.String, default=''),
		Flag.new(names=['mtu'], type=FlagType.Int, default=0),
		Flag.new(names=['p', 'pidfile'], type=FlagType.Path, default='/var/run/docker.pid'),
		Flag.new(names=['registry-mirror'], type=FlagType.String, default=''),
		Flag.new(names=['s', 'storage-driver'], type=FlagType.String, default=''),
		Flag.new(names=['selinux-enabled'], type=FlagType.PureBool, default=False),
		Flag.new(names=['storage-opt'], type=FlagType.String, default=''),
		Flag.new(names=['tls'], type=FlagType.PureBool, default=False),
		Flag.new(names=['tlscacert'], type=FlagType.Path, default='~/.docker/ca.pem'),
		Flag.new(names=['tlscert'], type=FlagType.Path, default='~/.docker/cert.pem'),
		Flag.new(names=['tlskey'], type=FlagType.Path, default='~/.docker/key.pem'),
		Flag.new(names=['tlsverify'], type=FlagType.PureBool, default=False),
		Flag.new(names=['v', 'version'], type=FlagType.FauxVerb, default=False)
	],

	# docker build [OPTIONS] PATH | URL | -
	BUILD_FLAGS = [
		Flag.new(names=['force-rm'], type=FlagType.PureBool, default=False),
		Flag.new(names=['no-cache'], type=FlagType.PureBool, default=False),
		Flag.new(names=['pull'], type=FlagType.PureBool, default=False),
		Flag.new(names=['q', 'quiet'], type=FlagType.PureBool, default=False),
		Flag.new(names=['rm'], type=FlagType.Bool, default=True),
		Flag.new(names=['t', 'tag'], type=FlagType.String, default='')
	],

	# docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
	RUN_FLAGS = [
		Flag.new(names=['a', 'attach'], type=FlagType.String, default=''),
		Flag.new(names=['add-host'], type=FlagType.String, default=''),
		Flag.new(names=['c', 'cpu-shares'], type=FlagType.Int, default=0),
		Flag.new(names=['cap-add'], type=FlagType.String, default=''),
		Flag.new(names=['cap-drop'], type=FlagType.String, default=''),
		Flag.new(names=['cidfile'], type=FlagType.Path, default=''),
		Flag.new(names=['cpuset'], type=FlagType.String, default=''),
		Flag.new(names=['d', 'detach'], type=FlagType.PureBool, default=False),
		Flag.new(names=['device'], type=FlagType.String, default=''),
		Flag.new(names=['dns'], type=FlagType.String, default=''),
		Flag.new(names=['dns-search'], type=FlagType.String, default=''),
		Flag.new(names=['e', 'env'], type=FlagType.String, default=''),
		Flag.new(names=['entrypoint'], type=FlagType.String, default=''),
		Flag.new(names=['env-file'], type=FlagType.String, default=''),
		Flag.new(names=['expopse'], type=FlagType.String, default=''),
		Flag.new(names=['h', 'hostname'], type=FlagType.String, default=''),
		Flag.new(names=['i', 'interactive'], type=FlagType.PureBool, default=''),
		Flag.new(names=['ipc'], type=FlagType.String, default=''),
		Flag.new(names=['link'], type=FlagType.String, default=''),
		Flag.new(names=['lxc-conf'], type=FlagType.String, default=''),
		Flag.new(names=['m'], type=FlagType.String, default=''),
		Flag.new(names=['mac-address'], type=FlagType.String, default=''),
		Flag.new(names=['name'], type=FlagType.String, default=''),
		Flag.new(names=['net'], type=FlagType.String, default='bridge'),
		Flag.new(names=['P', 'publish-all'], type=FlagType.PureBool, default=''),
		Flag.new(names=['p', 'publish'], type=FlagType.String, default=''),
		Flag.new(names=['privileged'], type=FlagType.PureBool, default=False),
		Flag.new(names=['restart'], type=FlagType.String, default=''),
		Flag.new(names=['rm'], type=FlagType.PureBool, default=False),
		Flag.new(names=['security-opt'], type=FlagType.String, default=''),
		Flag.new(names=['sig-proxy'], type=FlagType.PureBool, default=True),
		Flag.new(names=['t', 'tty'], type=FlagType.PureBool, default=False),
		Flag.new(names=['u', 'user'], type=FlagType.String, default=''),
		Flag.new(names=['v', 'volume'], type=FlagType.String, default=''),
		Flag.new(names=['volumes-from'], type=FlagType.String, default=''),
		Flag.new(names=['w', 'workdir'], type=FlagType.String, default='')
	],

	# docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
	COMMIT_FLAGS = [
		Flag.new(names=['a', 'author'], type=FlagType.String, default=''),
		Flag.new(names=['m', 'message'], type=FlagType.String, default=''),
		Flag.new(names=['p', 'pause'], type=FlagType.PureBool, default=True)
	],

	# docker create [OPTIONS] IMAGE [COMMAND] [ARG...]
	CREATE_FLAGS = [
		Flag.new(names=['a', 'attach'], type=FlagType.String, default=''),
		Flag.new(names=['add-host'], type=FlagType.String, default=''),
		Flag.new(names=['c', 'cpu-shares'], type=FlagType.Int, default=0),
		Flag.new(names=['cap-add'], type=FlagType.String, default=''),
		Flag.new(names=['cap-drop'], type=FlagType.String, default=''),
		Flag.new(names=['cidfile'], type=FlagType.Path, default=''),
		Flag.new(names=['cpuset'], type=FlagType.String, default=''),
		Flag.new(names=['device'], type=FlagType.String, default=''),
		Flag.new(names=['dns'], type=FlagType.String, default=''),
		Flag.new(names=['dns-search'], type=FlagType.String, default=''),
		Flag.new(names=['e', 'env'], type=FlagType.String, default=''),
		Flag.new(names=['entrypoint'], type=FlagType.String, default=''),
		Flag.new(names=['env-file'], type=FlagType.String, default=''),
		Flag.new(names=['expopse'], type=FlagType.String, default=''),
		Flag.new(names=['h', 'hostname'], type=FlagType.String, default=''),
		Flag.new(names=['i', 'interactive'], type=FlagType.PureBool, default=False),
		Flag.new(names=['ipc'], type=FlagType.String, default=''),
		Flag.new(names=['link'], type=FlagType.String, default=''),
		Flag.new(names=['lxc-conf'], type=FlagType.String, default=''),
		Flag.new(names=['m'], type=FlagType.String, default=''),
		Flag.new(names=['mac-address'], type=FlagType.String, default=''),
		Flag.new(names=['name'], type=FlagType.String, default=''),
		Flag.new(names=['net'], type=FlagType.String, default='bridge'),
		Flag.new(names=['P', 'publish-all'], type=FlagType.PureBool, default=''),
		Flag.new(names=['p', 'publish'], type=FlagType.String, default=''),
		Flag.new(names=['privileged'], type=FlagType.PureBool, default=False),
		Flag.new(names=['restart'], type=FlagType.String, default=''),
		Flag.new(names=['security-opt'], type=FlagType.String, default=''),
		Flag.new(names=['t', 'tty'], type=FlagType.PureBool, default=False),
		Flag.new(names=['u', 'user'], type=FlagType.String, default=''),
		Flag.new(names=['v', 'volume'], type=FlagType.String, default=''),
		Flag.new(names=['volumes-from'], type=FlagType.String, default='')
	],

	# docker pull [OPTIONS] NAME[:TAG]
	PULL_FLAGS = [
		Flag.new(names=['a', 'all-tags'], type=FlagType.PureBool, default=False)
	],

	# docker rm [OPTIONS] CONTAINER [CONTAINER...]
	RM_FLAGS = [
		Flag.new(names=['f', 'force'], type=FlagType.PureBool, default=False),
		Flag.new(names=['l', 'link'], type=FlagType.PureBool, default=False),
		Flag.new(names=['v', 'volumes'], type=FlagType.PureBool, default=False)
	],

	# docker rmi [OPTIONS] IMAGE [IMAGE...]
	RMI_FLAGS = [
		Flag.new(names=['f', 'force'], type=FlagType.PureBool, default=False),
		Flag.new(names=['no-prune'], type=FlagType.PureBool, default=False)
	],

	# docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]
	TAG_FLAGS = [
		Flag.new(names=['f', 'force'], type=FlagType.PureBool, default=False)
	],

	# docker attach [OPTIONS] CONTAINER
	ATTACH_FLAGS=[
		Flag.new(names=["no-stdin"], type=FlagType.PureBool, default=False),
		Flag.new(names=["sig-proxy"], type=FlagType.Bool, default=True)
	],

	# docker events [OPTIONS] 
	EVENTS_FLAGS=[
		Flag.new(names=["f", "filter"], type=FlagType.String, default=''),
		Flag.new(names=["since"], type=FlagType.String, default=''),
		Flag.new(names=["until"], type=FlagType.String, default='')
	],

	# docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
	EXEC_FLAGS=[
		Flag.new(names=["d", "detach"], type=FlagType.PureBool, default=False),
		Flag.new(names=["i", "interactive"], type=FlagType.PureBool, default=False),
		Flag.new(names=["t", "tty"], type=FlagType.PureBool, default=False)
	],

	HISTORY_FLAGS=[
		Flag.new(names=["no-trunc"], type=FlagType.PureBool, default=False),
		Flag.new(names=["q", "quiet"], type=FlagType.PureBool, default=False)
	],

	IMAGES_FLAGS=[
		Flag.new(names=["a", "all"], type=FlagType.PureBool, default=False),
		Flag.new(names=["f", "filter"], type=FlagType.String, default=''),
		Flag.new(names=["no-trunc"], type=FlagType.PureBool, default=False),
		Flag.new(names=["q", "quiet"], type=FlagType.PureBool, default=False)
	],

	INSPECT_FLAGS=[
		Flag.new(names=["f", "format"], type=FlagType.String, default=True)
	],

	KILL_FLAGS=[
		Flag.new(names=["s", "signal"], type=FlagType.String, default='KILL')
	],

	LOAD_FLAGS=[
		Flag.new(names=["i", "input"], type=FlagType.Path, default='')
	],

	LOGIN_FLAGS=[
		Flag.new(names=["e", "email"], type=FlagType.String, default=''),
		Flag.new(names=["p", "password"], type=FlagType.String, default=''),
		Flag.new(names=["u", "username"], type=FlagType.String, default='')
	],

	LOGS_FLAGS=[
		Flag.new(names=["f", "follow"], type=FlagType.PureBool, default=False),
		Flag.new(names=["t", "timestamps"], type=FlagType.PureBool, default=False),
		Flag.new(names=["tail"], type=FlagType.String, default='')
	],

	PS_FLAGS=[
		Flag.new(names=["a", "all"], type=FlagType.PureBool, default=False),
		Flag.new(names=["before"], type=FlagType.String, default=''),
		Flag.new(names=["f", "filter"], type=FlagType.String, default=''),
		Flag.new(names=["l", "latest"], type=FlagType.PureBool, default=False),
		Flag.new(names=["n"], type=FlagType.Int, default='-1'),
		Flag.new(names=["no-trunc"], type=FlagType.PureBool, default=True),
		Flag.new(names=["q", "quiet"], type=FlagType.PureBool, default=False),
		Flag.new(names=["s", "size"], type=FlagType.PureBool, default=False),
		Flag.new(names=["since"], type=FlagType.String, default='')
	],

	RESTART_FLAGS=[
		Flag.new(names=["t", "time"], type=FlagType.Int, default=10)
	],

	SAVE_FLAGS=[
		Flag.new(names=["o", "output"], type=FlagType.Path, default='')
	],


	SEARCH_FLAGS=[
		Flag.new(names=["automated"], type=FlagType.PureBool, default=False),
		Flag.new(names=["no-trunc"], type=FlagType.PureBool, default=False),
		Flag.new(names=["s", "stars"], type=FlagType.Int, default=0)
	],

	START_FLAGS=[
		Flag.new(names=["a", "attach"], type=FlagType.PureBool, default=False),
		Flag.new(names=["i", "interactive"], type=FlagType.PureBool, default=False)
	],

	STOP_FLAGS=[
		Flag.new(names=["t", "time"], type=FlagType.Int, default=10)
	],

	LOGOUT_FLAGS = [],
	PORT_FLAGS = [],
	PAUSE_FLAGS = [],
	TOP_FLAGS = [],
	UNPAUSE_FLAGS = [],
	VERSION_FLAGS = [],
	WAIT_FLAGS = [],
	CP_FLAGS = [],
	DIFF_FLAGS = [],
	IMPORT_FLAGS = [],
	INFO_FLAGS = [],
	EXPORT_FLAGS = [],
	# docker push NAME[:TAG]
	PUSH_FLAGS = []
)

_stringverbs = [verb.lower() for verb in dir(DockerVerb) if not verb.startswith('__')]

def flag_value_from_str(flag, s=''):
	if flag.type & FlagType.Bool != 0:
		return s.lower() == 'true'
	elif flag.type & FlagType.Int != 0:
		return int(s, 0)
	else:
		return s

def flag_type_compare(ft, rft):
	return ft.type & rft != 0

def parse_cli(args, flagcol=_flags):
	argit, cli = iter(args), CliCapture()
	flagset = flagcol.getdefault()

	def in_flag_set(f):
		flagname = f.strip('-').split('=', 1)[0]
		for flag in flagset:
			if flagname in flag.names:
				return flag
		return None

	try:
		while True:
			item = next(argit)
			if item.lower() in _stringverbs:
				cli.setverb(item)
				if item in flagcol:
					flagset = flagcol.map(item)
			elif item.startswith('--'):
				flag = in_flag_set(item)
				if flag:
					if flag_type_compare(flag, FlagType.FauxVerb):
						cli.addflag(flag, None)
					else:
						has_eq = item.count('=') != 0
						if not flag_type_compare(flag, FlagType.PureBool) or has_eq:
							cli.addflag(flag, flag_value_from_str(flag, next(argit) if not has_eq else item.split('=', 1)[1]))
						else:
							cli.addflag(flag, not flag.default)
				else:
					print 'UNKOWN FLAG: ', item
			elif item[0] == '-' and len(item) > 1:
				for fp in item[1:]:
					flag = in_flag_set(fp)
					if flag:
						if flag_type_compare(flag, FlagType.FauxVerb):
							cli.addflag(flag, None)
						else:
							if not flag_type_compare(flag, FlagType.PureBool):
								cli.addflag(flag, flag_value_from_str(flag, next(argit)))
							else:
								cli.addflag(flag, not flag.default)
					else:
						print 'UNKOWN FLAG: ', item
			else:
				while True:
					cli.addcontext(item)
					item = next(argit)
				break
	except StopIteration:
		pass

	return cli
