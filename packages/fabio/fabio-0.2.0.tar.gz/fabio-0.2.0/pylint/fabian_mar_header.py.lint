************* Module fabian_mar_header
C: 11:obselete: Invalid name "obselete" (should match [A-Z_][a-zA-Z0-9]+$)
C: 11:obselete: Missing docstring
W: 11:obselete: Class has no __init__ method
C: 18:obselete._readheader_fabian: Invalid name "l" (should match [a-z_][a-zA-Z0-9_]{2,30}$)
C: 19:obselete._readheader_fabian: Invalid name "l" (should match [a-z_][a-zA-Z0-9_]{2,30}$)
E: 24:obselete._readheader_fabian: Undefined variable 'N'
E: 24:obselete._readheader_fabian: Undefined variable 'N'
C: 27:obselete._readheader_fabian: Comma not followed by a space
        self.header['header_major_version'] = N.fromstring(l[20:24],N.uint32)[0]  # UINT32 ; /* header_major_version (n.) */
                                                                   ^^
E: 27:obselete._readheader_fabian: Undefined variable 'N'
E: 27:obselete._readheader_fabian: Undefined variable 'N'
C: 28:obselete._readheader_fabian: Comma not followed by a space
        self.header['header_minor_version'] = N.fromstring(l[24:28],N.uint32)[0]  # UINT32 ; /* header_minor_version (.n) */
                                                                   ^^
E: 28:obselete._readheader_fabian: Undefined variable 'N'
E: 28:obselete._readheader_fabian: Undefined variable 'N'
C: 29:obselete._readheader_fabian: Comma not followed by a space
        self.header['header_byte_orde'] = N.fromstring(l[28:32],N.uint32)[0]  # UINT32 r;/* BIG_ENDIAN (Motorola,MIPS); LITTLE_ENDIAN (DEC, Intel) */
                                                               ^^
E: 29:obselete._readheader_fabian: Undefined variable 'N'
E: 29:obselete._readheader_fabian: Undefined variable 'N'
C: 30:obselete._readheader_fabian: Comma not followed by a space
        self.header['data_byte_order'] = N.fromstring(l[32:36],N.uint32)[0]  # UINT32 ; /* BIG_ENDIAN (Motorola,MIPS); LITTLE_ENDIAN (DEC, Intel) */
                                                              ^^
E: 30:obselete._readheader_fabian: Undefined variable 'N'
E: 30:obselete._readheader_fabian: Undefined variable 'N'
C: 31:obselete._readheader_fabian: Comma not followed by a space
        self.header['header_size'] = N.fromstring(l[36:40],N.uint32)[0]  # UINT32 ; /* in bytes */
                                                          ^^
E: 31:obselete._readheader_fabian: Undefined variable 'N'
E: 31:obselete._readheader_fabian: Undefined variable 'N'
C: 32:obselete._readheader_fabian: Comma not followed by a space
        self.header['frame_type'] = N.fromstring(l[40:44],N.uint32)[0]  # UINT32 ; /* flag for frame type */
                                                         ^^
E: 32:obselete._readheader_fabian: Undefined variable 'N'
E: 32:obselete._readheader_fabian: Undefined variable 'N'
C: 42:obselete._readheader_fabian: Comma not followed by a space
        self.header['nfast'] = N.fromstring(l[80:84],N.uint32)[0]  # UINT32 ; /* number of pixels in one line */
                                                    ^^
E: 42:obselete._readheader_fabian: Undefined variable 'N'
E: 42:obselete._readheader_fabian: Undefined variable 'N'
C: 43:obselete._readheader_fabian: Comma not followed by a space
        self.header['nslow'] = N.fromstring(l[84:88],N.uint32)[0]  # UINT32 ; /* number of lines in image */
                                                    ^^
E: 43:obselete._readheader_fabian: Undefined variable 'N'
E: 43:obselete._readheader_fabian: Undefined variable 'N'
C: 44:obselete._readheader_fabian: Comma not followed by a space
        self.header['depth'] = N.fromstring(l[88:92],N.uint32)[0]  # UINT32 ; /* number of bytes per pixel */
                                                    ^^
E: 44:obselete._readheader_fabian: Undefined variable 'N'
E: 44:obselete._readheader_fabian: Undefined variable 'N'
C: 46:obselete._readheader_fabian: Comma not followed by a space
        self.header['signif_bits'] = N.fromstring(l[96:100],N.uint32)[0]  # UINT32 ; /* true depth of data, in bits */
                                                           ^^
E: 46:obselete._readheader_fabian: Undefined variable 'N'
E: 46:obselete._readheader_fabian: Undefined variable 'N'
C: 49:obselete._readheader_fabian: Comma not followed by a space
        self.header['sequence'] = N.fromstring(l[108:112],N.uint32)[0]  # UINT32 ; /* TRUE or FALSE */
                                                         ^^
E: 49:obselete._readheader_fabian: Undefined variable 'N'
E: 49:obselete._readheader_fabian: Undefined variable 'N'
C: 50:obselete._readheader_fabian: Comma not followed by a space
        self.header['nimages'] = N.fromstring(l[112:116],N.uint32)[0]  # UINT32 ; /* total number of images - size of each is nfast*(nslow/nimages) */
                                                        ^^
E: 50:obselete._readheader_fabian: Undefined variable 'N'
E: 50:obselete._readheader_fabian: Undefined variable 'N'
C: 51:obselete._readheader_fabian: Comma not followed by a space
        self.header['origin'] = N.fromstring(l[116:120],N.uint32)[0]  # UINT32 ; /* corner of origin */
                                                       ^^
E: 51:obselete._readheader_fabian: Undefined variable 'N'
E: 51:obselete._readheader_fabian: Undefined variable 'N'
C: 52:obselete._readheader_fabian: Comma not followed by a space
        self.header['orientation'] = N.fromstring(l[120:124],N.uint32)[0]  # UINT32 ; /* direction of fast axis */
                                                            ^^
E: 52:obselete._readheader_fabian: Undefined variable 'N'
E: 52:obselete._readheader_fabian: Undefined variable 'N'
C: 53:obselete._readheader_fabian: Comma not followed by a space
        self.header['view_direction'] = N.fromstring(l[124:128],N.uint32)[0]  # UINT32 ; /* direction to view frame */
                                                               ^^
E: 53:obselete._readheader_fabian: Undefined variable 'N'
E: 53:obselete._readheader_fabian: Undefined variable 'N'
C: 54:obselete._readheader_fabian: Comma not followed by a space
        self.header['overflow_locatio'] = N.fromstring(l[128:132],N.uint32)[0]  # UINT32 n;/* FOLLOWING_HEADER, FOLLOWING_DATA */
                                                                 ^^
E: 54:obselete._readheader_fabian: Undefined variable 'N'
E: 54:obselete._readheader_fabian: Undefined variable 'N'
C: 55:obselete._readheader_fabian: Comma not followed by a space
        self.header['over_8_bits'] = N.fromstring(l[132:136],N.uint32)[0]  # UINT32 ; /* # of pixels with counts > 255 */
                                                            ^^
E: 55:obselete._readheader_fabian: Undefined variable 'N'
E: 55:obselete._readheader_fabian: Undefined variable 'N'
C: 56:obselete._readheader_fabian: Comma not followed by a space
        self.header['over_16_bits'] = N.fromstring(l[136:140],N.uint32)[0]  # UINT32 ; /* # of pixels with count > 65535 */
                                                             ^^
E: 56:obselete._readheader_fabian: Undefined variable 'N'
E: 56:obselete._readheader_fabian: Undefined variable 'N'
C: 57:obselete._readheader_fabian: Comma not followed by a space
        self.header['multiplexed'] = N.fromstring(l[140:144],N.uint32)[0]  # UINT32 ; /* multiplex flag */
                                                            ^^
E: 57:obselete._readheader_fabian: Undefined variable 'N'
E: 57:obselete._readheader_fabian: Undefined variable 'N'
C: 58:obselete._readheader_fabian: Comma not followed by a space
        self.header['nfastimages'] = N.fromstring(l[144:148],N.uint32)[0]  # UINT32 ; /* # of images in fast direction */
                                                            ^^
E: 58:obselete._readheader_fabian: Undefined variable 'N'
E: 58:obselete._readheader_fabian: Undefined variable 'N'
C: 59:obselete._readheader_fabian: Comma not followed by a space
        self.header['nslowimages'] = N.fromstring(l[148:152],N.uint32)[0]  # UINT32 ; /* # of images in slow direction */
                                                            ^^
E: 59:obselete._readheader_fabian: Undefined variable 'N'
E: 59:obselete._readheader_fabian: Undefined variable 'N'
C: 60:obselete._readheader_fabian: Comma not followed by a space
        self.header['background_applied'] = N.fromstring(l[152:156],N.uint32)[0]  # UINT32 ; /* flags correction has been applied hold magic number ? */
                                                                   ^^
E: 60:obselete._readheader_fabian: Undefined variable 'N'
E: 60:obselete._readheader_fabian: Undefined variable 'N'
C: 61:obselete._readheader_fabian: Comma not followed by a space
        self.header['bias_applied'] = N.fromstring(l[156:160],N.uint32)[0]  # UINT32 ; /* flags correction has been applied - hold magic number ? */
                                                             ^^
E: 61:obselete._readheader_fabian: Undefined variable 'N'
E: 61:obselete._readheader_fabian: Undefined variable 'N'
C: 62:obselete._readheader_fabian: Comma not followed by a space
        self.header['flatfield_applied'] = N.fromstring(l[160:164],N.uint32)[0]  # UINT32 ; /* flags correction has been applied hold magic number ? */
                                                                  ^^
E: 62:obselete._readheader_fabian: Undefined variable 'N'
E: 62:obselete._readheader_fabian: Undefined variable 'N'
C: 63:obselete._readheader_fabian: Comma not followed by a space
        self.header['distortion_applied'] = N.fromstring(l[164:168],N.uint32)[0]  # UINT32 ; /* flags correction has been applied hold magic number ? */
                                                                   ^^
E: 63:obselete._readheader_fabian: Undefined variable 'N'
E: 63:obselete._readheader_fabian: Undefined variable 'N'
C: 67:obselete._readheader_fabian: Comma not followed by a space
        self.header['xtal_to_detector'] = N.fromstring(l[640:644],N.int32)[0]*1000  #INT32 ; /* 1000*distance in millimeters */
                                                                 ^^
E: 67:obselete._readheader_fabian: Undefined variable 'N'
E: 67:obselete._readheader_fabian: Undefined variable 'N'
C: 68:obselete._readheader_fabian: Comma not followed by a space
        self.header['beam_x'] = N.fromstring(l[644:648],N.int32)[0]*1000  #INT32 ; /* 1000*x beam position (pixels) */
                                                       ^^
E: 68:obselete._readheader_fabian: Undefined variable 'N'
E: 68:obselete._readheader_fabian: Undefined variable 'N'
C: 69:obselete._readheader_fabian: Comma not followed by a space
        self.header['beam_y'] = N.fromstring(l[648:652],N.int32)[0]*1000  #INT32 ; /* 1000*y beam position (pixels) */
                                                       ^^
E: 69:obselete._readheader_fabian: Undefined variable 'N'
E: 69:obselete._readheader_fabian: Undefined variable 'N'
C: 70:obselete._readheader_fabian: Comma not followed by a space
        self.header['integration_time'] = N.fromstring(l[652:656],N.int32)[0]  #INT32 ; /* integration time in milliseconds */
                                                                 ^^
E: 70:obselete._readheader_fabian: Undefined variable 'N'
E: 70:obselete._readheader_fabian: Undefined variable 'N'
C: 71:obselete._readheader_fabian: Comma not followed by a space
        self.header['exposure_time'] = N.fromstring(l[656:660],N.int32)[0]  #INT32 ; /* exposure time in milliseconds */
                                                              ^^
E: 71:obselete._readheader_fabian: Undefined variable 'N'
E: 71:obselete._readheader_fabian: Undefined variable 'N'
C: 72:obselete._readheader_fabian: Comma not followed by a space
        self.header['readout_time'] = N.fromstring(l[660:664],N.int32)[0]  #INT32 ; /* readout time in milliseconds */
                                                             ^^
E: 72:obselete._readheader_fabian: Undefined variable 'N'
E: 72:obselete._readheader_fabian: Undefined variable 'N'
C: 73:obselete._readheader_fabian: Comma not followed by a space
        self.header['nreads'] = N.fromstring(l[664:668],N.int32)[0]  #INT32 ; /* number of readouts to get this image */
                                                       ^^
E: 73:obselete._readheader_fabian: Undefined variable 'N'
E: 73:obselete._readheader_fabian: Undefined variable 'N'
C: 74:obselete._readheader_fabian: Comma not followed by a space
        self.header['start_twotheta'] = N.fromstring(l[668:672],N.int32)[0]*1000  #INT32 ; /* 1000*two_theta angle */
                                                               ^^
E: 74:obselete._readheader_fabian: Undefined variable 'N'
E: 74:obselete._readheader_fabian: Undefined variable 'N'
C: 75:obselete._readheader_fabian: Comma not followed by a space
        self.header['start_omega'] = N.fromstring(l[676:680],N.int32)[0]*1000  #INT32 ; /* 1000*omega angle */
                                                            ^^
E: 75:obselete._readheader_fabian: Undefined variable 'N'
E: 75:obselete._readheader_fabian: Undefined variable 'N'
C: 76:obselete._readheader_fabian: Comma not followed by a space
        self.header['start_chi'] = N.fromstring(l[680:684],N.int32)[0]*1000  #INT32 ; /* 1000*chi angle */
                                                          ^^
E: 76:obselete._readheader_fabian: Undefined variable 'N'
E: 76:obselete._readheader_fabian: Undefined variable 'N'
C: 77:obselete._readheader_fabian: Comma not followed by a space
        self.header['start_kappa'] = N.fromstring(l[684:688],N.int32)[0]*1000  #INT32 ; /* 1000*kappa angle */
                                                            ^^
E: 77:obselete._readheader_fabian: Undefined variable 'N'
E: 77:obselete._readheader_fabian: Undefined variable 'N'
C: 78:obselete._readheader_fabian: Comma not followed by a space
        self.header['start_phi'] = N.fromstring(l[688:692],N.int32)[0]*1000  #INT32 ; /* 1000*phi angle */
                                                          ^^
E: 78:obselete._readheader_fabian: Undefined variable 'N'
E: 78:obselete._readheader_fabian: Undefined variable 'N'
C: 79:obselete._readheader_fabian: Comma not followed by a space
        self.header['start_delta'] = N.fromstring(l[692:696],N.int32)[0]*1000  #INT32 ; /* 1000*delta angle */
                                                            ^^
E: 79:obselete._readheader_fabian: Undefined variable 'N'
E: 79:obselete._readheader_fabian: Undefined variable 'N'
C: 80:obselete._readheader_fabian: Comma not followed by a space
        self.header['start_gamma'] = N.fromstring(l[696:700],N.int32)[0]*1000  #INT32 ; /* 1000*gamma angle */
                                                            ^^
E: 80:obselete._readheader_fabian: Undefined variable 'N'
E: 80:obselete._readheader_fabian: Undefined variable 'N'
C: 81:obselete._readheader_fabian: Comma not followed by a space
        self.header['start_xtal_to_detector'] = N.fromstring(l[700:704],N.int32)[0]*1000  #INT32 ; /* 1000*distance in mm (dist in um)*/
                                                                       ^^
E: 81:obselete._readheader_fabian: Undefined variable 'N'
E: 81:obselete._readheader_fabian: Undefined variable 'N'
C: 82:obselete._readheader_fabian: Comma not followed by a space
        self.header['end_twotheta'] = N.fromstring(l[704:708],N.int32)[0]*1000  #INT32 ; /* 1000*two_theta angle */
                                                             ^^
E: 82:obselete._readheader_fabian: Undefined variable 'N'
E: 82:obselete._readheader_fabian: Undefined variable 'N'
C: 83:obselete._readheader_fabian: Comma not followed by a space
        self.header['end_omega'] = N.fromstring(l[708:712],N.int32)[0]*1000  #INT32 ; /* 1000*omega angle */
                                                          ^^
E: 83:obselete._readheader_fabian: Undefined variable 'N'
E: 83:obselete._readheader_fabian: Undefined variable 'N'
C: 84:obselete._readheader_fabian: Comma not followed by a space
        self.header['end_chi'] = N.fromstring(l[712:716],N.int32)[0]*1000  #INT32 ; /* 1000*chi angle */
                                                        ^^
E: 84:obselete._readheader_fabian: Undefined variable 'N'
E: 84:obselete._readheader_fabian: Undefined variable 'N'
C: 85:obselete._readheader_fabian: Comma not followed by a space
        self.header['end_kappa'] = N.fromstring(l[716:720],N.int32)[0]*1000  #INT32 ; /* 1000*kappa angle */
                                                          ^^
E: 85:obselete._readheader_fabian: Undefined variable 'N'
E: 85:obselete._readheader_fabian: Undefined variable 'N'
C: 86:obselete._readheader_fabian: Comma not followed by a space
        self.header['end_phi'] = N.fromstring(l[720:724],N.int32)[0]*1000  #INT32 ; /* 1000*phi angle */
                                                        ^^
E: 86:obselete._readheader_fabian: Undefined variable 'N'
E: 86:obselete._readheader_fabian: Undefined variable 'N'
C: 87:obselete._readheader_fabian: Comma not followed by a space
        self.header['end_delta'] = N.fromstring(l[724:728],N.int32)[0]*1000  #INT32 ; /* 1000*delta angle */
                                                          ^^
E: 87:obselete._readheader_fabian: Undefined variable 'N'
E: 87:obselete._readheader_fabian: Undefined variable 'N'
C: 88:obselete._readheader_fabian: Comma not followed by a space
        self.header['end_gamma'] = N.fromstring(l[728:732],N.int32)[0]*1000  #INT32 ; /* 1000*gamma angle */
                                                          ^^
E: 88:obselete._readheader_fabian: Undefined variable 'N'
E: 88:obselete._readheader_fabian: Undefined variable 'N'
C: 89:obselete._readheader_fabian: Comma not followed by a space
        self.header['end_xtal_to_detector'] = N.fromstring(l[732:736],N.int32)[0]*1000  #INT32 ; /* 1000*distance in mm (dist in um)*/
                                                                     ^^
E: 89:obselete._readheader_fabian: Undefined variable 'N'
E: 89:obselete._readheader_fabian: Undefined variable 'N'
C: 90:obselete._readheader_fabian: Comma not followed by a space
        self.header['rotation_axis'] = N.fromstring(l[736:740],N.int32)[0]  #INT32 ; /* active rotation axis */
                                                              ^^
E: 90:obselete._readheader_fabian: Undefined variable 'N'
E: 90:obselete._readheader_fabian: Undefined variable 'N'
C: 91:obselete._readheader_fabian: Comma not followed by a space
        self.header['rotation_range'] = N.fromstring(l[740:744],N.int32)[0]*1000  #INT32 ; /* 1000*rotation angle */
                                                               ^^
E: 91:obselete._readheader_fabian: Undefined variable 'N'
E: 91:obselete._readheader_fabian: Undefined variable 'N'
C: 92:obselete._readheader_fabian: Comma not followed by a space
        self.header['detector_rotx'] = N.fromstring(l[744:748],N.int32)[0]*1000  #INT32 ; /* 1000*rotation of detector around X */
                                                              ^^
E: 92:obselete._readheader_fabian: Undefined variable 'N'
E: 92:obselete._readheader_fabian: Undefined variable 'N'
C: 93:obselete._readheader_fabian: Comma not followed by a space
        self.header['detector_roty'] = N.fromstring(l[748:752],N.int32)[0]*1000  #INT32 ; /* 1000*rotation of detector around Y */
                                                              ^^
E: 93:obselete._readheader_fabian: Undefined variable 'N'
E: 93:obselete._readheader_fabian: Undefined variable 'N'
C: 94:obselete._readheader_fabian: Comma not followed by a space
        self.header['detector_rotz'] = N.fromstring(l[752:756],N.int32)[0]*1000  #INT32 ; /* 1000*rotation of detector around Z */
                                                              ^^
E: 94:obselete._readheader_fabian: Undefined variable 'N'
E: 94:obselete._readheader_fabian: Undefined variable 'N'
C: 96:obselete._readheader_fabian: Comma not followed by a space
        self.header['detector_type'] = N.fromstring(l[768:772],N.int32)[0]  #INT32 ; /* detector type */
                                                              ^^
E: 96:obselete._readheader_fabian: Undefined variable 'N'
E: 96:obselete._readheader_fabian: Undefined variable 'N'
C: 97:obselete._readheader_fabian: Comma not followed by a space
        self.header['pixelsize_x'] = N.fromstring(l[772:776],N.int32)[0]  #INT32 ; /* pixel size (nanometers) */
                                                            ^^
E: 97:obselete._readheader_fabian: Undefined variable 'N'
E: 97:obselete._readheader_fabian: Undefined variable 'N'
C: 98:obselete._readheader_fabian: Comma not followed by a space
        self.header['pixelsize_y'] = N.fromstring(l[776:780],N.int32)[0]  #INT32 ; /* pixel size (nanometers) */
                                                            ^^
E: 98:obselete._readheader_fabian: Undefined variable 'N'
E: 98:obselete._readheader_fabian: Undefined variable 'N'
C: 99:obselete._readheader_fabian: Comma not followed by a space
        self.header['mean_bias'] = N.fromstring(l[780:784],N.int32)[0]*1000  #INT32 ; /* 1000*mean bias value */
                                                          ^^
E: 99:obselete._readheader_fabian: Undefined variable 'N'
E: 99:obselete._readheader_fabian: Undefined variable 'N'
C:100:obselete._readheader_fabian: Comma not followed by a space
        self.header['photons_per_100adu'] = N.fromstring(l[784:788],N.int32)[0]  #INT32 ; /* photons / 100 ADUs */
                                                                   ^^
E:100:obselete._readheader_fabian: Undefined variable 'N'
E:100:obselete._readheader_fabian: Undefined variable 'N'
C:101:obselete._readheader_fabian: Comma not followed by a space
        self.header['measured_bias'] = N.fromstring(l[788:792],N.int32)[0]*1000  #INT32 [MAXIMAGES]; /* 1000*mean bias value for each image*/
                                                              ^^
E:101:obselete._readheader_fabian: Undefined variable 'N'
E:101:obselete._readheader_fabian: Undefined variable 'N'
C:102:obselete._readheader_fabian: Comma not followed by a space
        self.header['measured_temperature'] = N.fromstring(l[792:796],N.int32)[0] #INT32  [MAXIMAGES]; /* Temperature of each detector in milliKelvins */
                                                                     ^^
E:102:obselete._readheader_fabian: Undefined variable 'N'
E:102:obselete._readheader_fabian: Undefined variable 'N'
C:103:obselete._readheader_fabian: Comma not followed by a space
        self.header['measured_pressure'] = N.fromstring(l[796:800],N.int32)[0] #INT32 [MAXIMAGES] ; /* Pressure of each chamber in microTorr */
                                                                  ^^
E:103:obselete._readheader_fabian: Undefined variable 'N'
E:103:obselete._readheader_fabian: Undefined variable 'N'
C:108:obselete._readheader_fabian: Comma not followed by a space
        self.header['source_wavelength'] = N.fromstring(l[908:912],N.int32)[0]  #INT32 ; /* wavelength (femtoMeters) */
                                                                  ^^
E:108:obselete._readheader_fabian: Undefined variable 'N'
E:108:obselete._readheader_fabian: Undefined variable 'N'
R: 12:obselete._readheader_fabian: Too many statements (74/50)
W: 16:obselete._readheader_fabian: Attribute 'header' defined outside __init__
R: 11:obselete: Too few public methods (0/2)


Report
======
75 statements analysed.

Raw metrics
-----------

+----------+-------+------+---------+-----------+
|type      |number |%     |previous |difference |
+==========+=======+======+=========+===========+
|code      |77     |55.80 |77       |=          |
+----------+-------+------+---------+-----------+
|docstring |10     |7.25  |10       |=          |
+----------+-------+------+---------+-----------+
|comment   |35     |25.36 |35       |=          |
+----------+-------+------+---------+-----------+
|empty     |16     |11.59 |16       |=          |
+----------+-------+------+---------+-----------+



Duplication
-----------

+-------------------------+------+---------+-----------+
|                         |now   |previous |difference |
+=========================+======+=========+===========+
|nb duplicated lines      |0     |0        |=          |
+-------------------------+------+---------+-----------+
|percent duplicated lines |0.000 |0.000    |=          |
+-------------------------+------+---------+-----------+



Statistics by type
------------------

+---------+-------+-----------+-----------+------------+---------+
|type     |number |old number |difference |%documented |%badname |
+=========+=======+===========+===========+============+=========+
|module   |1      |1          |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|class    |1      |1          |=          |0.00        |100.00   |
+---------+-------+-----------+-----------+------------+---------+
|method   |1      |1          |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|function |0      |0          |=          |0.00        |0.00     |
+---------+-------+-----------+-----------+------------+---------+



Messages by category
--------------------

+-----------+-------+---------+-----------+
|type       |number |previous |difference |
+===========+=======+=========+===========+
|convention |66     |66       |=          |
+-----------+-------+---------+-----------+
|refactor   |2      |2        |=          |
+-----------+-------+---------+-----------+
|warning    |2      |2        |=          |
+-----------+-------+---------+-----------+
|error      |126    |126      |=          |
+-----------+-------+---------+-----------+



Messages
--------

+-----------+------------+
|message id |occurrences |
+===========+============+
|E0602      |126         |
+-----------+------------+
|C0324      |62          |
+-----------+------------+
|C0103      |3           |
+-----------+------------+
|W0232      |1           |
+-----------+------------+
|W0201      |1           |
+-----------+------------+
|R0915      |1           |
+-----------+------------+
|R0903      |1           |
+-----------+------------+
|C0111      |1           |
+-----------+------------+



Global evaluation
-----------------
Your code has been rated at -83.33/10 (previous run: -83.33/10)
You have to do something quick !

