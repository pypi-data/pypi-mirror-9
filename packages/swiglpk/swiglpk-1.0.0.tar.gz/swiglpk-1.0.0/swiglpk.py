# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_swiglpk', [dirname(__file__)])
        except ImportError:
            import _swiglpk
            return _swiglpk
        if fp is not None:
            try:
                _mod = imp.load_module('_swiglpk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _swiglpk = swig_import_helper()
    del swig_import_helper
else:
    import _swiglpk
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _swiglpk.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _swiglpk.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _swiglpk.intArray___setitem__(self, *args)
    def cast(self): return _swiglpk.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _swiglpk.intArray_frompointer
    if _newclass:frompointer = staticmethod(_swiglpk.intArray_frompointer)
intArray_swigregister = _swiglpk.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _swiglpk.intArray_frompointer(*args)
intArray_frompointer = _swiglpk.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _swiglpk.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _swiglpk.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _swiglpk.doubleArray___setitem__(self, *args)
    def cast(self): return _swiglpk.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _swiglpk.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_swiglpk.doubleArray_frompointer)
doubleArray_swigregister = _swiglpk.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _swiglpk.doubleArray_frompointer(*args)
doubleArray_frompointer = _swiglpk.doubleArray_frompointer

GLP_MAJOR_VERSION = _swiglpk.GLP_MAJOR_VERSION
GLP_MINOR_VERSION = _swiglpk.GLP_MINOR_VERSION
class glp_prob(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_prob, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_prob, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_opaque_prob"] = _swiglpk.glp_prob__opaque_prob_set
    __swig_getmethods__["_opaque_prob"] = _swiglpk.glp_prob__opaque_prob_get
    if _newclass:_opaque_prob = _swig_property(_swiglpk.glp_prob__opaque_prob_get, _swiglpk.glp_prob__opaque_prob_set)
    def __init__(self): 
        this = _swiglpk.new_glp_prob()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_prob
    __del__ = lambda self : None;
glp_prob_swigregister = _swiglpk.glp_prob_swigregister
glp_prob_swigregister(glp_prob)

GLP_MIN = _swiglpk.GLP_MIN
GLP_MAX = _swiglpk.GLP_MAX
GLP_CV = _swiglpk.GLP_CV
GLP_IV = _swiglpk.GLP_IV
GLP_BV = _swiglpk.GLP_BV
GLP_FR = _swiglpk.GLP_FR
GLP_LO = _swiglpk.GLP_LO
GLP_UP = _swiglpk.GLP_UP
GLP_DB = _swiglpk.GLP_DB
GLP_FX = _swiglpk.GLP_FX
GLP_BS = _swiglpk.GLP_BS
GLP_NL = _swiglpk.GLP_NL
GLP_NU = _swiglpk.GLP_NU
GLP_NF = _swiglpk.GLP_NF
GLP_NS = _swiglpk.GLP_NS
GLP_SF_GM = _swiglpk.GLP_SF_GM
GLP_SF_EQ = _swiglpk.GLP_SF_EQ
GLP_SF_2N = _swiglpk.GLP_SF_2N
GLP_SF_SKIP = _swiglpk.GLP_SF_SKIP
GLP_SF_AUTO = _swiglpk.GLP_SF_AUTO
GLP_SOL = _swiglpk.GLP_SOL
GLP_IPT = _swiglpk.GLP_IPT
GLP_MIP = _swiglpk.GLP_MIP
GLP_UNDEF = _swiglpk.GLP_UNDEF
GLP_FEAS = _swiglpk.GLP_FEAS
GLP_INFEAS = _swiglpk.GLP_INFEAS
GLP_NOFEAS = _swiglpk.GLP_NOFEAS
GLP_OPT = _swiglpk.GLP_OPT
GLP_UNBND = _swiglpk.GLP_UNBND
class glp_bfcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_bfcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_bfcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_lev"] = _swiglpk.glp_bfcp_msg_lev_set
    __swig_getmethods__["msg_lev"] = _swiglpk.glp_bfcp_msg_lev_get
    if _newclass:msg_lev = _swig_property(_swiglpk.glp_bfcp_msg_lev_get, _swiglpk.glp_bfcp_msg_lev_set)
    __swig_setmethods__["type"] = _swiglpk.glp_bfcp_type_set
    __swig_getmethods__["type"] = _swiglpk.glp_bfcp_type_get
    if _newclass:type = _swig_property(_swiglpk.glp_bfcp_type_get, _swiglpk.glp_bfcp_type_set)
    __swig_setmethods__["lu_size"] = _swiglpk.glp_bfcp_lu_size_set
    __swig_getmethods__["lu_size"] = _swiglpk.glp_bfcp_lu_size_get
    if _newclass:lu_size = _swig_property(_swiglpk.glp_bfcp_lu_size_get, _swiglpk.glp_bfcp_lu_size_set)
    __swig_setmethods__["piv_tol"] = _swiglpk.glp_bfcp_piv_tol_set
    __swig_getmethods__["piv_tol"] = _swiglpk.glp_bfcp_piv_tol_get
    if _newclass:piv_tol = _swig_property(_swiglpk.glp_bfcp_piv_tol_get, _swiglpk.glp_bfcp_piv_tol_set)
    __swig_setmethods__["piv_lim"] = _swiglpk.glp_bfcp_piv_lim_set
    __swig_getmethods__["piv_lim"] = _swiglpk.glp_bfcp_piv_lim_get
    if _newclass:piv_lim = _swig_property(_swiglpk.glp_bfcp_piv_lim_get, _swiglpk.glp_bfcp_piv_lim_set)
    __swig_setmethods__["suhl"] = _swiglpk.glp_bfcp_suhl_set
    __swig_getmethods__["suhl"] = _swiglpk.glp_bfcp_suhl_get
    if _newclass:suhl = _swig_property(_swiglpk.glp_bfcp_suhl_get, _swiglpk.glp_bfcp_suhl_set)
    __swig_setmethods__["eps_tol"] = _swiglpk.glp_bfcp_eps_tol_set
    __swig_getmethods__["eps_tol"] = _swiglpk.glp_bfcp_eps_tol_get
    if _newclass:eps_tol = _swig_property(_swiglpk.glp_bfcp_eps_tol_get, _swiglpk.glp_bfcp_eps_tol_set)
    __swig_setmethods__["max_gro"] = _swiglpk.glp_bfcp_max_gro_set
    __swig_getmethods__["max_gro"] = _swiglpk.glp_bfcp_max_gro_get
    if _newclass:max_gro = _swig_property(_swiglpk.glp_bfcp_max_gro_get, _swiglpk.glp_bfcp_max_gro_set)
    __swig_setmethods__["nfs_max"] = _swiglpk.glp_bfcp_nfs_max_set
    __swig_getmethods__["nfs_max"] = _swiglpk.glp_bfcp_nfs_max_get
    if _newclass:nfs_max = _swig_property(_swiglpk.glp_bfcp_nfs_max_get, _swiglpk.glp_bfcp_nfs_max_set)
    __swig_setmethods__["upd_tol"] = _swiglpk.glp_bfcp_upd_tol_set
    __swig_getmethods__["upd_tol"] = _swiglpk.glp_bfcp_upd_tol_get
    if _newclass:upd_tol = _swig_property(_swiglpk.glp_bfcp_upd_tol_get, _swiglpk.glp_bfcp_upd_tol_set)
    __swig_setmethods__["nrs_max"] = _swiglpk.glp_bfcp_nrs_max_set
    __swig_getmethods__["nrs_max"] = _swiglpk.glp_bfcp_nrs_max_get
    if _newclass:nrs_max = _swig_property(_swiglpk.glp_bfcp_nrs_max_get, _swiglpk.glp_bfcp_nrs_max_set)
    __swig_setmethods__["rs_size"] = _swiglpk.glp_bfcp_rs_size_set
    __swig_getmethods__["rs_size"] = _swiglpk.glp_bfcp_rs_size_get
    if _newclass:rs_size = _swig_property(_swiglpk.glp_bfcp_rs_size_get, _swiglpk.glp_bfcp_rs_size_set)
    __swig_setmethods__["foo_bar"] = _swiglpk.glp_bfcp_foo_bar_set
    __swig_getmethods__["foo_bar"] = _swiglpk.glp_bfcp_foo_bar_get
    if _newclass:foo_bar = _swig_property(_swiglpk.glp_bfcp_foo_bar_get, _swiglpk.glp_bfcp_foo_bar_set)
    def __init__(self): 
        this = _swiglpk.new_glp_bfcp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_bfcp
    __del__ = lambda self : None;
glp_bfcp_swigregister = _swiglpk.glp_bfcp_swigregister
glp_bfcp_swigregister(glp_bfcp)
GLP_BF_FT = _swiglpk.GLP_BF_FT
GLP_BF_BG = _swiglpk.GLP_BF_BG
GLP_BF_GR = _swiglpk.GLP_BF_GR

class glp_smcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_smcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_smcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_lev"] = _swiglpk.glp_smcp_msg_lev_set
    __swig_getmethods__["msg_lev"] = _swiglpk.glp_smcp_msg_lev_get
    if _newclass:msg_lev = _swig_property(_swiglpk.glp_smcp_msg_lev_get, _swiglpk.glp_smcp_msg_lev_set)
    __swig_setmethods__["meth"] = _swiglpk.glp_smcp_meth_set
    __swig_getmethods__["meth"] = _swiglpk.glp_smcp_meth_get
    if _newclass:meth = _swig_property(_swiglpk.glp_smcp_meth_get, _swiglpk.glp_smcp_meth_set)
    __swig_setmethods__["pricing"] = _swiglpk.glp_smcp_pricing_set
    __swig_getmethods__["pricing"] = _swiglpk.glp_smcp_pricing_get
    if _newclass:pricing = _swig_property(_swiglpk.glp_smcp_pricing_get, _swiglpk.glp_smcp_pricing_set)
    __swig_setmethods__["r_test"] = _swiglpk.glp_smcp_r_test_set
    __swig_getmethods__["r_test"] = _swiglpk.glp_smcp_r_test_get
    if _newclass:r_test = _swig_property(_swiglpk.glp_smcp_r_test_get, _swiglpk.glp_smcp_r_test_set)
    __swig_setmethods__["tol_bnd"] = _swiglpk.glp_smcp_tol_bnd_set
    __swig_getmethods__["tol_bnd"] = _swiglpk.glp_smcp_tol_bnd_get
    if _newclass:tol_bnd = _swig_property(_swiglpk.glp_smcp_tol_bnd_get, _swiglpk.glp_smcp_tol_bnd_set)
    __swig_setmethods__["tol_dj"] = _swiglpk.glp_smcp_tol_dj_set
    __swig_getmethods__["tol_dj"] = _swiglpk.glp_smcp_tol_dj_get
    if _newclass:tol_dj = _swig_property(_swiglpk.glp_smcp_tol_dj_get, _swiglpk.glp_smcp_tol_dj_set)
    __swig_setmethods__["tol_piv"] = _swiglpk.glp_smcp_tol_piv_set
    __swig_getmethods__["tol_piv"] = _swiglpk.glp_smcp_tol_piv_get
    if _newclass:tol_piv = _swig_property(_swiglpk.glp_smcp_tol_piv_get, _swiglpk.glp_smcp_tol_piv_set)
    __swig_setmethods__["obj_ll"] = _swiglpk.glp_smcp_obj_ll_set
    __swig_getmethods__["obj_ll"] = _swiglpk.glp_smcp_obj_ll_get
    if _newclass:obj_ll = _swig_property(_swiglpk.glp_smcp_obj_ll_get, _swiglpk.glp_smcp_obj_ll_set)
    __swig_setmethods__["obj_ul"] = _swiglpk.glp_smcp_obj_ul_set
    __swig_getmethods__["obj_ul"] = _swiglpk.glp_smcp_obj_ul_get
    if _newclass:obj_ul = _swig_property(_swiglpk.glp_smcp_obj_ul_get, _swiglpk.glp_smcp_obj_ul_set)
    __swig_setmethods__["it_lim"] = _swiglpk.glp_smcp_it_lim_set
    __swig_getmethods__["it_lim"] = _swiglpk.glp_smcp_it_lim_get
    if _newclass:it_lim = _swig_property(_swiglpk.glp_smcp_it_lim_get, _swiglpk.glp_smcp_it_lim_set)
    __swig_setmethods__["tm_lim"] = _swiglpk.glp_smcp_tm_lim_set
    __swig_getmethods__["tm_lim"] = _swiglpk.glp_smcp_tm_lim_get
    if _newclass:tm_lim = _swig_property(_swiglpk.glp_smcp_tm_lim_get, _swiglpk.glp_smcp_tm_lim_set)
    __swig_setmethods__["out_frq"] = _swiglpk.glp_smcp_out_frq_set
    __swig_getmethods__["out_frq"] = _swiglpk.glp_smcp_out_frq_get
    if _newclass:out_frq = _swig_property(_swiglpk.glp_smcp_out_frq_get, _swiglpk.glp_smcp_out_frq_set)
    __swig_setmethods__["out_dly"] = _swiglpk.glp_smcp_out_dly_set
    __swig_getmethods__["out_dly"] = _swiglpk.glp_smcp_out_dly_get
    if _newclass:out_dly = _swig_property(_swiglpk.glp_smcp_out_dly_get, _swiglpk.glp_smcp_out_dly_set)
    __swig_setmethods__["presolve"] = _swiglpk.glp_smcp_presolve_set
    __swig_getmethods__["presolve"] = _swiglpk.glp_smcp_presolve_get
    if _newclass:presolve = _swig_property(_swiglpk.glp_smcp_presolve_get, _swiglpk.glp_smcp_presolve_set)
    __swig_setmethods__["foo_bar"] = _swiglpk.glp_smcp_foo_bar_set
    __swig_getmethods__["foo_bar"] = _swiglpk.glp_smcp_foo_bar_get
    if _newclass:foo_bar = _swig_property(_swiglpk.glp_smcp_foo_bar_get, _swiglpk.glp_smcp_foo_bar_set)
    def __init__(self): 
        this = _swiglpk.new_glp_smcp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_smcp
    __del__ = lambda self : None;
glp_smcp_swigregister = _swiglpk.glp_smcp_swigregister
glp_smcp_swigregister(glp_smcp)
GLP_MSG_OFF = _swiglpk.GLP_MSG_OFF
GLP_MSG_ERR = _swiglpk.GLP_MSG_ERR
GLP_MSG_ON = _swiglpk.GLP_MSG_ON
GLP_MSG_ALL = _swiglpk.GLP_MSG_ALL
GLP_MSG_DBG = _swiglpk.GLP_MSG_DBG
GLP_PRIMAL = _swiglpk.GLP_PRIMAL
GLP_DUALP = _swiglpk.GLP_DUALP
GLP_DUAL = _swiglpk.GLP_DUAL
GLP_PT_STD = _swiglpk.GLP_PT_STD
GLP_PT_PSE = _swiglpk.GLP_PT_PSE
GLP_RT_STD = _swiglpk.GLP_RT_STD
GLP_RT_HAR = _swiglpk.GLP_RT_HAR

class glp_iptcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_iptcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_iptcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_lev"] = _swiglpk.glp_iptcp_msg_lev_set
    __swig_getmethods__["msg_lev"] = _swiglpk.glp_iptcp_msg_lev_get
    if _newclass:msg_lev = _swig_property(_swiglpk.glp_iptcp_msg_lev_get, _swiglpk.glp_iptcp_msg_lev_set)
    __swig_setmethods__["ord_alg"] = _swiglpk.glp_iptcp_ord_alg_set
    __swig_getmethods__["ord_alg"] = _swiglpk.glp_iptcp_ord_alg_get
    if _newclass:ord_alg = _swig_property(_swiglpk.glp_iptcp_ord_alg_get, _swiglpk.glp_iptcp_ord_alg_set)
    __swig_setmethods__["foo_bar"] = _swiglpk.glp_iptcp_foo_bar_set
    __swig_getmethods__["foo_bar"] = _swiglpk.glp_iptcp_foo_bar_get
    if _newclass:foo_bar = _swig_property(_swiglpk.glp_iptcp_foo_bar_get, _swiglpk.glp_iptcp_foo_bar_set)
    def __init__(self): 
        this = _swiglpk.new_glp_iptcp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_iptcp
    __del__ = lambda self : None;
glp_iptcp_swigregister = _swiglpk.glp_iptcp_swigregister
glp_iptcp_swigregister(glp_iptcp)
GLP_ORD_NONE = _swiglpk.GLP_ORD_NONE
GLP_ORD_QMD = _swiglpk.GLP_ORD_QMD
GLP_ORD_AMD = _swiglpk.GLP_ORD_AMD
GLP_ORD_SYMAMD = _swiglpk.GLP_ORD_SYMAMD

class glp_tree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_tree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_tree, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_opaque_tree"] = _swiglpk.glp_tree__opaque_tree_set
    __swig_getmethods__["_opaque_tree"] = _swiglpk.glp_tree__opaque_tree_get
    if _newclass:_opaque_tree = _swig_property(_swiglpk.glp_tree__opaque_tree_get, _swiglpk.glp_tree__opaque_tree_set)
    def __init__(self): 
        this = _swiglpk.new_glp_tree()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_tree
    __del__ = lambda self : None;
glp_tree_swigregister = _swiglpk.glp_tree_swigregister
glp_tree_swigregister(glp_tree)

class glp_iocp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_iocp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_iocp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_lev"] = _swiglpk.glp_iocp_msg_lev_set
    __swig_getmethods__["msg_lev"] = _swiglpk.glp_iocp_msg_lev_get
    if _newclass:msg_lev = _swig_property(_swiglpk.glp_iocp_msg_lev_get, _swiglpk.glp_iocp_msg_lev_set)
    __swig_setmethods__["br_tech"] = _swiglpk.glp_iocp_br_tech_set
    __swig_getmethods__["br_tech"] = _swiglpk.glp_iocp_br_tech_get
    if _newclass:br_tech = _swig_property(_swiglpk.glp_iocp_br_tech_get, _swiglpk.glp_iocp_br_tech_set)
    __swig_setmethods__["bt_tech"] = _swiglpk.glp_iocp_bt_tech_set
    __swig_getmethods__["bt_tech"] = _swiglpk.glp_iocp_bt_tech_get
    if _newclass:bt_tech = _swig_property(_swiglpk.glp_iocp_bt_tech_get, _swiglpk.glp_iocp_bt_tech_set)
    __swig_setmethods__["tol_int"] = _swiglpk.glp_iocp_tol_int_set
    __swig_getmethods__["tol_int"] = _swiglpk.glp_iocp_tol_int_get
    if _newclass:tol_int = _swig_property(_swiglpk.glp_iocp_tol_int_get, _swiglpk.glp_iocp_tol_int_set)
    __swig_setmethods__["tol_obj"] = _swiglpk.glp_iocp_tol_obj_set
    __swig_getmethods__["tol_obj"] = _swiglpk.glp_iocp_tol_obj_get
    if _newclass:tol_obj = _swig_property(_swiglpk.glp_iocp_tol_obj_get, _swiglpk.glp_iocp_tol_obj_set)
    __swig_setmethods__["tm_lim"] = _swiglpk.glp_iocp_tm_lim_set
    __swig_getmethods__["tm_lim"] = _swiglpk.glp_iocp_tm_lim_get
    if _newclass:tm_lim = _swig_property(_swiglpk.glp_iocp_tm_lim_get, _swiglpk.glp_iocp_tm_lim_set)
    __swig_setmethods__["out_frq"] = _swiglpk.glp_iocp_out_frq_set
    __swig_getmethods__["out_frq"] = _swiglpk.glp_iocp_out_frq_get
    if _newclass:out_frq = _swig_property(_swiglpk.glp_iocp_out_frq_get, _swiglpk.glp_iocp_out_frq_set)
    __swig_setmethods__["out_dly"] = _swiglpk.glp_iocp_out_dly_set
    __swig_getmethods__["out_dly"] = _swiglpk.glp_iocp_out_dly_get
    if _newclass:out_dly = _swig_property(_swiglpk.glp_iocp_out_dly_get, _swiglpk.glp_iocp_out_dly_set)
    __swig_setmethods__["cb_func"] = _swiglpk.glp_iocp_cb_func_set
    __swig_getmethods__["cb_func"] = _swiglpk.glp_iocp_cb_func_get
    if _newclass:cb_func = _swig_property(_swiglpk.glp_iocp_cb_func_get, _swiglpk.glp_iocp_cb_func_set)
    __swig_setmethods__["cb_info"] = _swiglpk.glp_iocp_cb_info_set
    __swig_getmethods__["cb_info"] = _swiglpk.glp_iocp_cb_info_get
    if _newclass:cb_info = _swig_property(_swiglpk.glp_iocp_cb_info_get, _swiglpk.glp_iocp_cb_info_set)
    __swig_setmethods__["cb_size"] = _swiglpk.glp_iocp_cb_size_set
    __swig_getmethods__["cb_size"] = _swiglpk.glp_iocp_cb_size_get
    if _newclass:cb_size = _swig_property(_swiglpk.glp_iocp_cb_size_get, _swiglpk.glp_iocp_cb_size_set)
    __swig_setmethods__["pp_tech"] = _swiglpk.glp_iocp_pp_tech_set
    __swig_getmethods__["pp_tech"] = _swiglpk.glp_iocp_pp_tech_get
    if _newclass:pp_tech = _swig_property(_swiglpk.glp_iocp_pp_tech_get, _swiglpk.glp_iocp_pp_tech_set)
    __swig_setmethods__["mip_gap"] = _swiglpk.glp_iocp_mip_gap_set
    __swig_getmethods__["mip_gap"] = _swiglpk.glp_iocp_mip_gap_get
    if _newclass:mip_gap = _swig_property(_swiglpk.glp_iocp_mip_gap_get, _swiglpk.glp_iocp_mip_gap_set)
    __swig_setmethods__["mir_cuts"] = _swiglpk.glp_iocp_mir_cuts_set
    __swig_getmethods__["mir_cuts"] = _swiglpk.glp_iocp_mir_cuts_get
    if _newclass:mir_cuts = _swig_property(_swiglpk.glp_iocp_mir_cuts_get, _swiglpk.glp_iocp_mir_cuts_set)
    __swig_setmethods__["gmi_cuts"] = _swiglpk.glp_iocp_gmi_cuts_set
    __swig_getmethods__["gmi_cuts"] = _swiglpk.glp_iocp_gmi_cuts_get
    if _newclass:gmi_cuts = _swig_property(_swiglpk.glp_iocp_gmi_cuts_get, _swiglpk.glp_iocp_gmi_cuts_set)
    __swig_setmethods__["cov_cuts"] = _swiglpk.glp_iocp_cov_cuts_set
    __swig_getmethods__["cov_cuts"] = _swiglpk.glp_iocp_cov_cuts_get
    if _newclass:cov_cuts = _swig_property(_swiglpk.glp_iocp_cov_cuts_get, _swiglpk.glp_iocp_cov_cuts_set)
    __swig_setmethods__["clq_cuts"] = _swiglpk.glp_iocp_clq_cuts_set
    __swig_getmethods__["clq_cuts"] = _swiglpk.glp_iocp_clq_cuts_get
    if _newclass:clq_cuts = _swig_property(_swiglpk.glp_iocp_clq_cuts_get, _swiglpk.glp_iocp_clq_cuts_set)
    __swig_setmethods__["presolve"] = _swiglpk.glp_iocp_presolve_set
    __swig_getmethods__["presolve"] = _swiglpk.glp_iocp_presolve_get
    if _newclass:presolve = _swig_property(_swiglpk.glp_iocp_presolve_get, _swiglpk.glp_iocp_presolve_set)
    __swig_setmethods__["binarize"] = _swiglpk.glp_iocp_binarize_set
    __swig_getmethods__["binarize"] = _swiglpk.glp_iocp_binarize_get
    if _newclass:binarize = _swig_property(_swiglpk.glp_iocp_binarize_get, _swiglpk.glp_iocp_binarize_set)
    __swig_setmethods__["fp_heur"] = _swiglpk.glp_iocp_fp_heur_set
    __swig_getmethods__["fp_heur"] = _swiglpk.glp_iocp_fp_heur_get
    if _newclass:fp_heur = _swig_property(_swiglpk.glp_iocp_fp_heur_get, _swiglpk.glp_iocp_fp_heur_set)
    __swig_setmethods__["alien"] = _swiglpk.glp_iocp_alien_set
    __swig_getmethods__["alien"] = _swiglpk.glp_iocp_alien_get
    if _newclass:alien = _swig_property(_swiglpk.glp_iocp_alien_get, _swiglpk.glp_iocp_alien_set)
    __swig_setmethods__["foo_bar"] = _swiglpk.glp_iocp_foo_bar_set
    __swig_getmethods__["foo_bar"] = _swiglpk.glp_iocp_foo_bar_get
    if _newclass:foo_bar = _swig_property(_swiglpk.glp_iocp_foo_bar_get, _swiglpk.glp_iocp_foo_bar_set)
    def __init__(self): 
        this = _swiglpk.new_glp_iocp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_iocp
    __del__ = lambda self : None;
glp_iocp_swigregister = _swiglpk.glp_iocp_swigregister
glp_iocp_swigregister(glp_iocp)
GLP_BR_FFV = _swiglpk.GLP_BR_FFV
GLP_BR_LFV = _swiglpk.GLP_BR_LFV
GLP_BR_MFV = _swiglpk.GLP_BR_MFV
GLP_BR_DTH = _swiglpk.GLP_BR_DTH
GLP_BR_PCH = _swiglpk.GLP_BR_PCH
GLP_BT_DFS = _swiglpk.GLP_BT_DFS
GLP_BT_BFS = _swiglpk.GLP_BT_BFS
GLP_BT_BLB = _swiglpk.GLP_BT_BLB
GLP_BT_BPH = _swiglpk.GLP_BT_BPH
GLP_PP_NONE = _swiglpk.GLP_PP_NONE
GLP_PP_ROOT = _swiglpk.GLP_PP_ROOT
GLP_PP_ALL = _swiglpk.GLP_PP_ALL

class glp_attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_attr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["level"] = _swiglpk.glp_attr_level_set
    __swig_getmethods__["level"] = _swiglpk.glp_attr_level_get
    if _newclass:level = _swig_property(_swiglpk.glp_attr_level_get, _swiglpk.glp_attr_level_set)
    __swig_setmethods__["origin"] = _swiglpk.glp_attr_origin_set
    __swig_getmethods__["origin"] = _swiglpk.glp_attr_origin_get
    if _newclass:origin = _swig_property(_swiglpk.glp_attr_origin_get, _swiglpk.glp_attr_origin_set)
    __swig_setmethods__["klass"] = _swiglpk.glp_attr_klass_set
    __swig_getmethods__["klass"] = _swiglpk.glp_attr_klass_get
    if _newclass:klass = _swig_property(_swiglpk.glp_attr_klass_get, _swiglpk.glp_attr_klass_set)
    __swig_setmethods__["foo_bar"] = _swiglpk.glp_attr_foo_bar_set
    __swig_getmethods__["foo_bar"] = _swiglpk.glp_attr_foo_bar_get
    if _newclass:foo_bar = _swig_property(_swiglpk.glp_attr_foo_bar_get, _swiglpk.glp_attr_foo_bar_set)
    def __init__(self): 
        this = _swiglpk.new_glp_attr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_attr
    __del__ = lambda self : None;
glp_attr_swigregister = _swiglpk.glp_attr_swigregister
glp_attr_swigregister(glp_attr)
GLP_RF_REG = _swiglpk.GLP_RF_REG
GLP_RF_LAZY = _swiglpk.GLP_RF_LAZY
GLP_RF_CUT = _swiglpk.GLP_RF_CUT
GLP_RF_GMI = _swiglpk.GLP_RF_GMI
GLP_RF_MIR = _swiglpk.GLP_RF_MIR
GLP_RF_COV = _swiglpk.GLP_RF_COV
GLP_RF_CLQ = _swiglpk.GLP_RF_CLQ

GLP_ON = _swiglpk.GLP_ON
GLP_OFF = _swiglpk.GLP_OFF
GLP_IROWGEN = _swiglpk.GLP_IROWGEN
GLP_IBINGO = _swiglpk.GLP_IBINGO
GLP_IHEUR = _swiglpk.GLP_IHEUR
GLP_ICUTGEN = _swiglpk.GLP_ICUTGEN
GLP_IBRANCH = _swiglpk.GLP_IBRANCH
GLP_ISELECT = _swiglpk.GLP_ISELECT
GLP_IPREPRO = _swiglpk.GLP_IPREPRO
GLP_NO_BRNCH = _swiglpk.GLP_NO_BRNCH
GLP_DN_BRNCH = _swiglpk.GLP_DN_BRNCH
GLP_UP_BRNCH = _swiglpk.GLP_UP_BRNCH
GLP_EBADB = _swiglpk.GLP_EBADB
GLP_ESING = _swiglpk.GLP_ESING
GLP_ECOND = _swiglpk.GLP_ECOND
GLP_EBOUND = _swiglpk.GLP_EBOUND
GLP_EFAIL = _swiglpk.GLP_EFAIL
GLP_EOBJLL = _swiglpk.GLP_EOBJLL
GLP_EOBJUL = _swiglpk.GLP_EOBJUL
GLP_EITLIM = _swiglpk.GLP_EITLIM
GLP_ETMLIM = _swiglpk.GLP_ETMLIM
GLP_ENOPFS = _swiglpk.GLP_ENOPFS
GLP_ENODFS = _swiglpk.GLP_ENODFS
GLP_EROOT = _swiglpk.GLP_EROOT
GLP_ESTOP = _swiglpk.GLP_ESTOP
GLP_EMIPGAP = _swiglpk.GLP_EMIPGAP
GLP_ENOFEAS = _swiglpk.GLP_ENOFEAS
GLP_ENOCVG = _swiglpk.GLP_ENOCVG
GLP_EINSTAB = _swiglpk.GLP_EINSTAB
GLP_EDATA = _swiglpk.GLP_EDATA
GLP_ERANGE = _swiglpk.GLP_ERANGE
GLP_KKT_PE = _swiglpk.GLP_KKT_PE
GLP_KKT_PB = _swiglpk.GLP_KKT_PB
GLP_KKT_DE = _swiglpk.GLP_KKT_DE
GLP_KKT_DB = _swiglpk.GLP_KKT_DB
GLP_KKT_CS = _swiglpk.GLP_KKT_CS
GLP_MPS_DECK = _swiglpk.GLP_MPS_DECK
GLP_MPS_FILE = _swiglpk.GLP_MPS_FILE
class glp_mpscp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_mpscp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_mpscp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["blank"] = _swiglpk.glp_mpscp_blank_set
    __swig_getmethods__["blank"] = _swiglpk.glp_mpscp_blank_get
    if _newclass:blank = _swig_property(_swiglpk.glp_mpscp_blank_get, _swiglpk.glp_mpscp_blank_set)
    __swig_setmethods__["obj_name"] = _swiglpk.glp_mpscp_obj_name_set
    __swig_getmethods__["obj_name"] = _swiglpk.glp_mpscp_obj_name_get
    if _newclass:obj_name = _swig_property(_swiglpk.glp_mpscp_obj_name_get, _swiglpk.glp_mpscp_obj_name_set)
    __swig_setmethods__["tol_mps"] = _swiglpk.glp_mpscp_tol_mps_set
    __swig_getmethods__["tol_mps"] = _swiglpk.glp_mpscp_tol_mps_get
    if _newclass:tol_mps = _swig_property(_swiglpk.glp_mpscp_tol_mps_get, _swiglpk.glp_mpscp_tol_mps_set)
    __swig_setmethods__["foo_bar"] = _swiglpk.glp_mpscp_foo_bar_set
    __swig_getmethods__["foo_bar"] = _swiglpk.glp_mpscp_foo_bar_get
    if _newclass:foo_bar = _swig_property(_swiglpk.glp_mpscp_foo_bar_get, _swiglpk.glp_mpscp_foo_bar_set)
    def __init__(self): 
        this = _swiglpk.new_glp_mpscp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_mpscp
    __del__ = lambda self : None;
glp_mpscp_swigregister = _swiglpk.glp_mpscp_swigregister
glp_mpscp_swigregister(glp_mpscp)

class glp_cpxcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_cpxcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_cpxcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["foo_bar"] = _swiglpk.glp_cpxcp_foo_bar_set
    __swig_getmethods__["foo_bar"] = _swiglpk.glp_cpxcp_foo_bar_get
    if _newclass:foo_bar = _swig_property(_swiglpk.glp_cpxcp_foo_bar_get, _swiglpk.glp_cpxcp_foo_bar_set)
    def __init__(self): 
        this = _swiglpk.new_glp_cpxcp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_cpxcp
    __del__ = lambda self : None;
glp_cpxcp_swigregister = _swiglpk.glp_cpxcp_swigregister
glp_cpxcp_swigregister(glp_cpxcp)

class glp_tran(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_tran, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_tran, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_opaque_tran"] = _swiglpk.glp_tran__opaque_tran_set
    __swig_getmethods__["_opaque_tran"] = _swiglpk.glp_tran__opaque_tran_get
    if _newclass:_opaque_tran = _swig_property(_swiglpk.glp_tran__opaque_tran_get, _swiglpk.glp_tran__opaque_tran_set)
    def __init__(self): 
        this = _swiglpk.new_glp_tran()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_tran
    __del__ = lambda self : None;
glp_tran_swigregister = _swiglpk.glp_tran_swigregister
glp_tran_swigregister(glp_tran)


def glp_create_prob():
  return _swiglpk.glp_create_prob()
glp_create_prob = _swiglpk.glp_create_prob

def glp_set_prob_name(*args):
  return _swiglpk.glp_set_prob_name(*args)
glp_set_prob_name = _swiglpk.glp_set_prob_name

def glp_set_obj_name(*args):
  return _swiglpk.glp_set_obj_name(*args)
glp_set_obj_name = _swiglpk.glp_set_obj_name

def glp_set_obj_dir(*args):
  return _swiglpk.glp_set_obj_dir(*args)
glp_set_obj_dir = _swiglpk.glp_set_obj_dir

def glp_add_rows(*args):
  return _swiglpk.glp_add_rows(*args)
glp_add_rows = _swiglpk.glp_add_rows

def glp_add_cols(*args):
  return _swiglpk.glp_add_cols(*args)
glp_add_cols = _swiglpk.glp_add_cols

def glp_set_row_name(*args):
  return _swiglpk.glp_set_row_name(*args)
glp_set_row_name = _swiglpk.glp_set_row_name

def glp_set_col_name(*args):
  return _swiglpk.glp_set_col_name(*args)
glp_set_col_name = _swiglpk.glp_set_col_name

def glp_set_row_bnds(*args):
  return _swiglpk.glp_set_row_bnds(*args)
glp_set_row_bnds = _swiglpk.glp_set_row_bnds

def glp_set_col_bnds(*args):
  return _swiglpk.glp_set_col_bnds(*args)
glp_set_col_bnds = _swiglpk.glp_set_col_bnds

def glp_set_obj_coef(*args):
  return _swiglpk.glp_set_obj_coef(*args)
glp_set_obj_coef = _swiglpk.glp_set_obj_coef

def glp_set_mat_row(*args):
  return _swiglpk.glp_set_mat_row(*args)
glp_set_mat_row = _swiglpk.glp_set_mat_row

def glp_set_mat_col(*args):
  return _swiglpk.glp_set_mat_col(*args)
glp_set_mat_col = _swiglpk.glp_set_mat_col

def glp_load_matrix(*args):
  return _swiglpk.glp_load_matrix(*args)
glp_load_matrix = _swiglpk.glp_load_matrix

def glp_check_dup(*args):
  return _swiglpk.glp_check_dup(*args)
glp_check_dup = _swiglpk.glp_check_dup

def glp_sort_matrix(*args):
  return _swiglpk.glp_sort_matrix(*args)
glp_sort_matrix = _swiglpk.glp_sort_matrix

def glp_del_rows(*args):
  return _swiglpk.glp_del_rows(*args)
glp_del_rows = _swiglpk.glp_del_rows

def glp_del_cols(*args):
  return _swiglpk.glp_del_cols(*args)
glp_del_cols = _swiglpk.glp_del_cols

def glp_copy_prob(*args):
  return _swiglpk.glp_copy_prob(*args)
glp_copy_prob = _swiglpk.glp_copy_prob

def glp_erase_prob(*args):
  return _swiglpk.glp_erase_prob(*args)
glp_erase_prob = _swiglpk.glp_erase_prob

def glp_delete_prob(*args):
  return _swiglpk.glp_delete_prob(*args)
glp_delete_prob = _swiglpk.glp_delete_prob

def glp_get_prob_name(*args):
  return _swiglpk.glp_get_prob_name(*args)
glp_get_prob_name = _swiglpk.glp_get_prob_name

def glp_get_obj_name(*args):
  return _swiglpk.glp_get_obj_name(*args)
glp_get_obj_name = _swiglpk.glp_get_obj_name

def glp_get_obj_dir(*args):
  return _swiglpk.glp_get_obj_dir(*args)
glp_get_obj_dir = _swiglpk.glp_get_obj_dir

def glp_get_num_rows(*args):
  return _swiglpk.glp_get_num_rows(*args)
glp_get_num_rows = _swiglpk.glp_get_num_rows

def glp_get_num_cols(*args):
  return _swiglpk.glp_get_num_cols(*args)
glp_get_num_cols = _swiglpk.glp_get_num_cols

def glp_get_row_name(*args):
  return _swiglpk.glp_get_row_name(*args)
glp_get_row_name = _swiglpk.glp_get_row_name

def glp_get_col_name(*args):
  return _swiglpk.glp_get_col_name(*args)
glp_get_col_name = _swiglpk.glp_get_col_name

def glp_get_row_type(*args):
  return _swiglpk.glp_get_row_type(*args)
glp_get_row_type = _swiglpk.glp_get_row_type

def glp_get_row_lb(*args):
  return _swiglpk.glp_get_row_lb(*args)
glp_get_row_lb = _swiglpk.glp_get_row_lb

def glp_get_row_ub(*args):
  return _swiglpk.glp_get_row_ub(*args)
glp_get_row_ub = _swiglpk.glp_get_row_ub

def glp_get_col_type(*args):
  return _swiglpk.glp_get_col_type(*args)
glp_get_col_type = _swiglpk.glp_get_col_type

def glp_get_col_lb(*args):
  return _swiglpk.glp_get_col_lb(*args)
glp_get_col_lb = _swiglpk.glp_get_col_lb

def glp_get_col_ub(*args):
  return _swiglpk.glp_get_col_ub(*args)
glp_get_col_ub = _swiglpk.glp_get_col_ub

def glp_get_obj_coef(*args):
  return _swiglpk.glp_get_obj_coef(*args)
glp_get_obj_coef = _swiglpk.glp_get_obj_coef

def glp_get_num_nz(*args):
  return _swiglpk.glp_get_num_nz(*args)
glp_get_num_nz = _swiglpk.glp_get_num_nz

def glp_get_mat_row(*args):
  return _swiglpk.glp_get_mat_row(*args)
glp_get_mat_row = _swiglpk.glp_get_mat_row

def glp_get_mat_col(*args):
  return _swiglpk.glp_get_mat_col(*args)
glp_get_mat_col = _swiglpk.glp_get_mat_col

def glp_create_index(*args):
  return _swiglpk.glp_create_index(*args)
glp_create_index = _swiglpk.glp_create_index

def glp_find_row(*args):
  return _swiglpk.glp_find_row(*args)
glp_find_row = _swiglpk.glp_find_row

def glp_find_col(*args):
  return _swiglpk.glp_find_col(*args)
glp_find_col = _swiglpk.glp_find_col

def glp_delete_index(*args):
  return _swiglpk.glp_delete_index(*args)
glp_delete_index = _swiglpk.glp_delete_index

def glp_set_rii(*args):
  return _swiglpk.glp_set_rii(*args)
glp_set_rii = _swiglpk.glp_set_rii

def glp_set_sjj(*args):
  return _swiglpk.glp_set_sjj(*args)
glp_set_sjj = _swiglpk.glp_set_sjj

def glp_get_rii(*args):
  return _swiglpk.glp_get_rii(*args)
glp_get_rii = _swiglpk.glp_get_rii

def glp_get_sjj(*args):
  return _swiglpk.glp_get_sjj(*args)
glp_get_sjj = _swiglpk.glp_get_sjj

def glp_scale_prob(*args):
  return _swiglpk.glp_scale_prob(*args)
glp_scale_prob = _swiglpk.glp_scale_prob

def glp_unscale_prob(*args):
  return _swiglpk.glp_unscale_prob(*args)
glp_unscale_prob = _swiglpk.glp_unscale_prob

def glp_set_row_stat(*args):
  return _swiglpk.glp_set_row_stat(*args)
glp_set_row_stat = _swiglpk.glp_set_row_stat

def glp_set_col_stat(*args):
  return _swiglpk.glp_set_col_stat(*args)
glp_set_col_stat = _swiglpk.glp_set_col_stat

def glp_std_basis(*args):
  return _swiglpk.glp_std_basis(*args)
glp_std_basis = _swiglpk.glp_std_basis

def glp_adv_basis(*args):
  return _swiglpk.glp_adv_basis(*args)
glp_adv_basis = _swiglpk.glp_adv_basis

def glp_cpx_basis(*args):
  return _swiglpk.glp_cpx_basis(*args)
glp_cpx_basis = _swiglpk.glp_cpx_basis

def glp_simplex(*args):
  return _swiglpk.glp_simplex(*args)
glp_simplex = _swiglpk.glp_simplex

def glp_exact(*args):
  return _swiglpk.glp_exact(*args)
glp_exact = _swiglpk.glp_exact

def glp_init_smcp(*args):
  return _swiglpk.glp_init_smcp(*args)
glp_init_smcp = _swiglpk.glp_init_smcp

def glp_get_status(*args):
  return _swiglpk.glp_get_status(*args)
glp_get_status = _swiglpk.glp_get_status

def glp_get_prim_stat(*args):
  return _swiglpk.glp_get_prim_stat(*args)
glp_get_prim_stat = _swiglpk.glp_get_prim_stat

def glp_get_dual_stat(*args):
  return _swiglpk.glp_get_dual_stat(*args)
glp_get_dual_stat = _swiglpk.glp_get_dual_stat

def glp_get_obj_val(*args):
  return _swiglpk.glp_get_obj_val(*args)
glp_get_obj_val = _swiglpk.glp_get_obj_val

def glp_get_row_stat(*args):
  return _swiglpk.glp_get_row_stat(*args)
glp_get_row_stat = _swiglpk.glp_get_row_stat

def glp_get_row_prim(*args):
  return _swiglpk.glp_get_row_prim(*args)
glp_get_row_prim = _swiglpk.glp_get_row_prim

def glp_get_row_dual(*args):
  return _swiglpk.glp_get_row_dual(*args)
glp_get_row_dual = _swiglpk.glp_get_row_dual

def glp_get_col_stat(*args):
  return _swiglpk.glp_get_col_stat(*args)
glp_get_col_stat = _swiglpk.glp_get_col_stat

def glp_get_col_prim(*args):
  return _swiglpk.glp_get_col_prim(*args)
glp_get_col_prim = _swiglpk.glp_get_col_prim

def glp_get_col_dual(*args):
  return _swiglpk.glp_get_col_dual(*args)
glp_get_col_dual = _swiglpk.glp_get_col_dual

def glp_get_unbnd_ray(*args):
  return _swiglpk.glp_get_unbnd_ray(*args)
glp_get_unbnd_ray = _swiglpk.glp_get_unbnd_ray

def glp_interior(*args):
  return _swiglpk.glp_interior(*args)
glp_interior = _swiglpk.glp_interior

def glp_init_iptcp(*args):
  return _swiglpk.glp_init_iptcp(*args)
glp_init_iptcp = _swiglpk.glp_init_iptcp

def glp_ipt_status(*args):
  return _swiglpk.glp_ipt_status(*args)
glp_ipt_status = _swiglpk.glp_ipt_status

def glp_ipt_obj_val(*args):
  return _swiglpk.glp_ipt_obj_val(*args)
glp_ipt_obj_val = _swiglpk.glp_ipt_obj_val

def glp_ipt_row_prim(*args):
  return _swiglpk.glp_ipt_row_prim(*args)
glp_ipt_row_prim = _swiglpk.glp_ipt_row_prim

def glp_ipt_row_dual(*args):
  return _swiglpk.glp_ipt_row_dual(*args)
glp_ipt_row_dual = _swiglpk.glp_ipt_row_dual

def glp_ipt_col_prim(*args):
  return _swiglpk.glp_ipt_col_prim(*args)
glp_ipt_col_prim = _swiglpk.glp_ipt_col_prim

def glp_ipt_col_dual(*args):
  return _swiglpk.glp_ipt_col_dual(*args)
glp_ipt_col_dual = _swiglpk.glp_ipt_col_dual

def glp_set_col_kind(*args):
  return _swiglpk.glp_set_col_kind(*args)
glp_set_col_kind = _swiglpk.glp_set_col_kind

def glp_get_col_kind(*args):
  return _swiglpk.glp_get_col_kind(*args)
glp_get_col_kind = _swiglpk.glp_get_col_kind

def glp_get_num_int(*args):
  return _swiglpk.glp_get_num_int(*args)
glp_get_num_int = _swiglpk.glp_get_num_int

def glp_get_num_bin(*args):
  return _swiglpk.glp_get_num_bin(*args)
glp_get_num_bin = _swiglpk.glp_get_num_bin

def glp_intopt(*args):
  return _swiglpk.glp_intopt(*args)
glp_intopt = _swiglpk.glp_intopt

def glp_init_iocp(*args):
  return _swiglpk.glp_init_iocp(*args)
glp_init_iocp = _swiglpk.glp_init_iocp

def glp_mip_status(*args):
  return _swiglpk.glp_mip_status(*args)
glp_mip_status = _swiglpk.glp_mip_status

def glp_mip_obj_val(*args):
  return _swiglpk.glp_mip_obj_val(*args)
glp_mip_obj_val = _swiglpk.glp_mip_obj_val

def glp_mip_row_val(*args):
  return _swiglpk.glp_mip_row_val(*args)
glp_mip_row_val = _swiglpk.glp_mip_row_val

def glp_mip_col_val(*args):
  return _swiglpk.glp_mip_col_val(*args)
glp_mip_col_val = _swiglpk.glp_mip_col_val

def glp_print_sol(*args):
  return _swiglpk.glp_print_sol(*args)
glp_print_sol = _swiglpk.glp_print_sol

def glp_read_sol(*args):
  return _swiglpk.glp_read_sol(*args)
glp_read_sol = _swiglpk.glp_read_sol

def glp_write_sol(*args):
  return _swiglpk.glp_write_sol(*args)
glp_write_sol = _swiglpk.glp_write_sol

def glp_print_ranges(*args):
  return _swiglpk.glp_print_ranges(*args)
glp_print_ranges = _swiglpk.glp_print_ranges

def glp_print_ipt(*args):
  return _swiglpk.glp_print_ipt(*args)
glp_print_ipt = _swiglpk.glp_print_ipt

def glp_read_ipt(*args):
  return _swiglpk.glp_read_ipt(*args)
glp_read_ipt = _swiglpk.glp_read_ipt

def glp_write_ipt(*args):
  return _swiglpk.glp_write_ipt(*args)
glp_write_ipt = _swiglpk.glp_write_ipt

def glp_print_mip(*args):
  return _swiglpk.glp_print_mip(*args)
glp_print_mip = _swiglpk.glp_print_mip

def glp_read_mip(*args):
  return _swiglpk.glp_read_mip(*args)
glp_read_mip = _swiglpk.glp_read_mip

def glp_write_mip(*args):
  return _swiglpk.glp_write_mip(*args)
glp_write_mip = _swiglpk.glp_write_mip

def glp_bf_exists(*args):
  return _swiglpk.glp_bf_exists(*args)
glp_bf_exists = _swiglpk.glp_bf_exists

def glp_factorize(*args):
  return _swiglpk.glp_factorize(*args)
glp_factorize = _swiglpk.glp_factorize

def glp_bf_updated(*args):
  return _swiglpk.glp_bf_updated(*args)
glp_bf_updated = _swiglpk.glp_bf_updated

def glp_get_bfcp(*args):
  return _swiglpk.glp_get_bfcp(*args)
glp_get_bfcp = _swiglpk.glp_get_bfcp

def glp_set_bfcp(*args):
  return _swiglpk.glp_set_bfcp(*args)
glp_set_bfcp = _swiglpk.glp_set_bfcp

def glp_get_bhead(*args):
  return _swiglpk.glp_get_bhead(*args)
glp_get_bhead = _swiglpk.glp_get_bhead

def glp_get_row_bind(*args):
  return _swiglpk.glp_get_row_bind(*args)
glp_get_row_bind = _swiglpk.glp_get_row_bind

def glp_get_col_bind(*args):
  return _swiglpk.glp_get_col_bind(*args)
glp_get_col_bind = _swiglpk.glp_get_col_bind

def glp_ftran(*args):
  return _swiglpk.glp_ftran(*args)
glp_ftran = _swiglpk.glp_ftran

def glp_btran(*args):
  return _swiglpk.glp_btran(*args)
glp_btran = _swiglpk.glp_btran

def glp_warm_up(*args):
  return _swiglpk.glp_warm_up(*args)
glp_warm_up = _swiglpk.glp_warm_up

def glp_eval_tab_row(*args):
  return _swiglpk.glp_eval_tab_row(*args)
glp_eval_tab_row = _swiglpk.glp_eval_tab_row

def glp_eval_tab_col(*args):
  return _swiglpk.glp_eval_tab_col(*args)
glp_eval_tab_col = _swiglpk.glp_eval_tab_col

def glp_transform_row(*args):
  return _swiglpk.glp_transform_row(*args)
glp_transform_row = _swiglpk.glp_transform_row

def glp_transform_col(*args):
  return _swiglpk.glp_transform_col(*args)
glp_transform_col = _swiglpk.glp_transform_col

def glp_prim_rtest(*args):
  return _swiglpk.glp_prim_rtest(*args)
glp_prim_rtest = _swiglpk.glp_prim_rtest

def glp_dual_rtest(*args):
  return _swiglpk.glp_dual_rtest(*args)
glp_dual_rtest = _swiglpk.glp_dual_rtest

def glp_analyze_bound(*args):
  return _swiglpk.glp_analyze_bound(*args)
glp_analyze_bound = _swiglpk.glp_analyze_bound

def glp_analyze_coef(*args):
  return _swiglpk.glp_analyze_coef(*args)
glp_analyze_coef = _swiglpk.glp_analyze_coef

def glp_ios_reason(*args):
  return _swiglpk.glp_ios_reason(*args)
glp_ios_reason = _swiglpk.glp_ios_reason

def glp_ios_get_prob(*args):
  return _swiglpk.glp_ios_get_prob(*args)
glp_ios_get_prob = _swiglpk.glp_ios_get_prob

def glp_ios_tree_size(*args):
  return _swiglpk.glp_ios_tree_size(*args)
glp_ios_tree_size = _swiglpk.glp_ios_tree_size

def glp_ios_curr_node(*args):
  return _swiglpk.glp_ios_curr_node(*args)
glp_ios_curr_node = _swiglpk.glp_ios_curr_node

def glp_ios_next_node(*args):
  return _swiglpk.glp_ios_next_node(*args)
glp_ios_next_node = _swiglpk.glp_ios_next_node

def glp_ios_prev_node(*args):
  return _swiglpk.glp_ios_prev_node(*args)
glp_ios_prev_node = _swiglpk.glp_ios_prev_node

def glp_ios_up_node(*args):
  return _swiglpk.glp_ios_up_node(*args)
glp_ios_up_node = _swiglpk.glp_ios_up_node

def glp_ios_node_level(*args):
  return _swiglpk.glp_ios_node_level(*args)
glp_ios_node_level = _swiglpk.glp_ios_node_level

def glp_ios_node_bound(*args):
  return _swiglpk.glp_ios_node_bound(*args)
glp_ios_node_bound = _swiglpk.glp_ios_node_bound

def glp_ios_best_node(*args):
  return _swiglpk.glp_ios_best_node(*args)
glp_ios_best_node = _swiglpk.glp_ios_best_node

def glp_ios_mip_gap(*args):
  return _swiglpk.glp_ios_mip_gap(*args)
glp_ios_mip_gap = _swiglpk.glp_ios_mip_gap

def glp_ios_node_data(*args):
  return _swiglpk.glp_ios_node_data(*args)
glp_ios_node_data = _swiglpk.glp_ios_node_data

def glp_ios_row_attr(*args):
  return _swiglpk.glp_ios_row_attr(*args)
glp_ios_row_attr = _swiglpk.glp_ios_row_attr

def glp_ios_pool_size(*args):
  return _swiglpk.glp_ios_pool_size(*args)
glp_ios_pool_size = _swiglpk.glp_ios_pool_size

def glp_ios_add_row(*args):
  return _swiglpk.glp_ios_add_row(*args)
glp_ios_add_row = _swiglpk.glp_ios_add_row

def glp_ios_del_row(*args):
  return _swiglpk.glp_ios_del_row(*args)
glp_ios_del_row = _swiglpk.glp_ios_del_row

def glp_ios_clear_pool(*args):
  return _swiglpk.glp_ios_clear_pool(*args)
glp_ios_clear_pool = _swiglpk.glp_ios_clear_pool

def glp_ios_can_branch(*args):
  return _swiglpk.glp_ios_can_branch(*args)
glp_ios_can_branch = _swiglpk.glp_ios_can_branch

def glp_ios_branch_upon(*args):
  return _swiglpk.glp_ios_branch_upon(*args)
glp_ios_branch_upon = _swiglpk.glp_ios_branch_upon

def glp_ios_select_node(*args):
  return _swiglpk.glp_ios_select_node(*args)
glp_ios_select_node = _swiglpk.glp_ios_select_node

def glp_ios_heur_sol(*args):
  return _swiglpk.glp_ios_heur_sol(*args)
glp_ios_heur_sol = _swiglpk.glp_ios_heur_sol

def glp_ios_terminate(*args):
  return _swiglpk.glp_ios_terminate(*args)
glp_ios_terminate = _swiglpk.glp_ios_terminate

def glp_init_mpscp(*args):
  return _swiglpk.glp_init_mpscp(*args)
glp_init_mpscp = _swiglpk.glp_init_mpscp

def glp_read_mps(*args):
  return _swiglpk.glp_read_mps(*args)
glp_read_mps = _swiglpk.glp_read_mps

def glp_write_mps(*args):
  return _swiglpk.glp_write_mps(*args)
glp_write_mps = _swiglpk.glp_write_mps

def glp_init_cpxcp(*args):
  return _swiglpk.glp_init_cpxcp(*args)
glp_init_cpxcp = _swiglpk.glp_init_cpxcp

def glp_read_lp(*args):
  return _swiglpk.glp_read_lp(*args)
glp_read_lp = _swiglpk.glp_read_lp

def glp_write_lp(*args):
  return _swiglpk.glp_write_lp(*args)
glp_write_lp = _swiglpk.glp_write_lp

def glp_read_prob(*args):
  return _swiglpk.glp_read_prob(*args)
glp_read_prob = _swiglpk.glp_read_prob

def glp_write_prob(*args):
  return _swiglpk.glp_write_prob(*args)
glp_write_prob = _swiglpk.glp_write_prob

def glp_mpl_alloc_wksp():
  return _swiglpk.glp_mpl_alloc_wksp()
glp_mpl_alloc_wksp = _swiglpk.glp_mpl_alloc_wksp

def glp_mpl_read_model(*args):
  return _swiglpk.glp_mpl_read_model(*args)
glp_mpl_read_model = _swiglpk.glp_mpl_read_model

def glp_mpl_read_data(*args):
  return _swiglpk.glp_mpl_read_data(*args)
glp_mpl_read_data = _swiglpk.glp_mpl_read_data

def glp_mpl_generate(*args):
  return _swiglpk.glp_mpl_generate(*args)
glp_mpl_generate = _swiglpk.glp_mpl_generate

def glp_mpl_build_prob(*args):
  return _swiglpk.glp_mpl_build_prob(*args)
glp_mpl_build_prob = _swiglpk.glp_mpl_build_prob

def glp_mpl_postsolve(*args):
  return _swiglpk.glp_mpl_postsolve(*args)
glp_mpl_postsolve = _swiglpk.glp_mpl_postsolve

def glp_mpl_free_wksp(*args):
  return _swiglpk.glp_mpl_free_wksp(*args)
glp_mpl_free_wksp = _swiglpk.glp_mpl_free_wksp

def glp_main(*args):
  return _swiglpk.glp_main(*args)
glp_main = _swiglpk.glp_main
class glp_long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_long, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lo"] = _swiglpk.glp_long_lo_set
    __swig_getmethods__["lo"] = _swiglpk.glp_long_lo_get
    if _newclass:lo = _swig_property(_swiglpk.glp_long_lo_get, _swiglpk.glp_long_lo_set)
    __swig_setmethods__["hi"] = _swiglpk.glp_long_hi_set
    __swig_getmethods__["hi"] = _swiglpk.glp_long_hi_get
    if _newclass:hi = _swig_property(_swiglpk.glp_long_hi_get, _swiglpk.glp_long_hi_set)
    def __init__(self): 
        this = _swiglpk.new_glp_long()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_long
    __del__ = lambda self : None;
glp_long_swigregister = _swiglpk.glp_long_swigregister
glp_long_swigregister(glp_long)


def glp_init_env():
  return _swiglpk.glp_init_env()
glp_init_env = _swiglpk.glp_init_env

def glp_version():
  return _swiglpk.glp_version()
glp_version = _swiglpk.glp_version

def glp_free_env():
  return _swiglpk.glp_free_env()
glp_free_env = _swiglpk.glp_free_env

def glp_printf(*args):
  return _swiglpk.glp_printf(*args)
glp_printf = _swiglpk.glp_printf

def glp_term_out(*args):
  return _swiglpk.glp_term_out(*args)
glp_term_out = _swiglpk.glp_term_out

def glp_term_hook(*args):
  return _swiglpk.glp_term_hook(*args)
glp_term_hook = _swiglpk.glp_term_hook

def glp_open_tee(*args):
  return _swiglpk.glp_open_tee(*args)
glp_open_tee = _swiglpk.glp_open_tee

def glp_close_tee():
  return _swiglpk.glp_close_tee()
glp_close_tee = _swiglpk.glp_close_tee

def glp_error_(*args):
  return _swiglpk.glp_error_(*args)
glp_error_ = _swiglpk.glp_error_

def glp_assert_(*args):
  return _swiglpk.glp_assert_(*args)
glp_assert_ = _swiglpk.glp_assert_

def glp_error_hook(*args):
  return _swiglpk.glp_error_hook(*args)
glp_error_hook = _swiglpk.glp_error_hook

def glp_malloc(*args):
  return _swiglpk.glp_malloc(*args)
glp_malloc = _swiglpk.glp_malloc

def glp_calloc(*args):
  return _swiglpk.glp_calloc(*args)
glp_calloc = _swiglpk.glp_calloc

def glp_free(*args):
  return _swiglpk.glp_free(*args)
glp_free = _swiglpk.glp_free

def glp_mem_limit(*args):
  return _swiglpk.glp_mem_limit(*args)
glp_mem_limit = _swiglpk.glp_mem_limit

def glp_mem_usage(*args):
  return _swiglpk.glp_mem_usage(*args)
glp_mem_usage = _swiglpk.glp_mem_usage

def glp_time():
  return _swiglpk.glp_time()
glp_time = _swiglpk.glp_time

def glp_difftime(*args):
  return _swiglpk.glp_difftime(*args)
glp_difftime = _swiglpk.glp_difftime
class glp_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_opaque_data"] = _swiglpk.glp_data__opaque_data_set
    __swig_getmethods__["_opaque_data"] = _swiglpk.glp_data__opaque_data_get
    if _newclass:_opaque_data = _swig_property(_swiglpk.glp_data__opaque_data_get, _swiglpk.glp_data__opaque_data_set)
    def __init__(self): 
        this = _swiglpk.new_glp_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_glp_data
    __del__ = lambda self : None;
glp_data_swigregister = _swiglpk.glp_data_swigregister
glp_data_swigregister(glp_data)


def glp_sdf_open_file(*args):
  return _swiglpk.glp_sdf_open_file(*args)
glp_sdf_open_file = _swiglpk.glp_sdf_open_file

def glp_sdf_set_jump(*args):
  return _swiglpk.glp_sdf_set_jump(*args)
glp_sdf_set_jump = _swiglpk.glp_sdf_set_jump

def glp_sdf_error(*args):
  return _swiglpk.glp_sdf_error(*args)
glp_sdf_error = _swiglpk.glp_sdf_error

def glp_sdf_warning(*args):
  return _swiglpk.glp_sdf_warning(*args)
glp_sdf_warning = _swiglpk.glp_sdf_warning

def glp_sdf_read_int(*args):
  return _swiglpk.glp_sdf_read_int(*args)
glp_sdf_read_int = _swiglpk.glp_sdf_read_int

def glp_sdf_read_num(*args):
  return _swiglpk.glp_sdf_read_num(*args)
glp_sdf_read_num = _swiglpk.glp_sdf_read_num

def glp_sdf_read_item(*args):
  return _swiglpk.glp_sdf_read_item(*args)
glp_sdf_read_item = _swiglpk.glp_sdf_read_item

def glp_sdf_read_text(*args):
  return _swiglpk.glp_sdf_read_text(*args)
glp_sdf_read_text = _swiglpk.glp_sdf_read_text

def glp_sdf_line(*args):
  return _swiglpk.glp_sdf_line(*args)
glp_sdf_line = _swiglpk.glp_sdf_line

def glp_sdf_close_file(*args):
  return _swiglpk.glp_sdf_close_file(*args)
glp_sdf_close_file = _swiglpk.glp_sdf_close_file
class _glp_graph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _glp_graph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _glp_graph, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pool"] = _swiglpk._glp_graph_pool_set
    __swig_getmethods__["pool"] = _swiglpk._glp_graph_pool_get
    if _newclass:pool = _swig_property(_swiglpk._glp_graph_pool_get, _swiglpk._glp_graph_pool_set)
    __swig_setmethods__["name"] = _swiglpk._glp_graph_name_set
    __swig_getmethods__["name"] = _swiglpk._glp_graph_name_get
    if _newclass:name = _swig_property(_swiglpk._glp_graph_name_get, _swiglpk._glp_graph_name_set)
    __swig_setmethods__["nv_max"] = _swiglpk._glp_graph_nv_max_set
    __swig_getmethods__["nv_max"] = _swiglpk._glp_graph_nv_max_get
    if _newclass:nv_max = _swig_property(_swiglpk._glp_graph_nv_max_get, _swiglpk._glp_graph_nv_max_set)
    __swig_setmethods__["nv"] = _swiglpk._glp_graph_nv_set
    __swig_getmethods__["nv"] = _swiglpk._glp_graph_nv_get
    if _newclass:nv = _swig_property(_swiglpk._glp_graph_nv_get, _swiglpk._glp_graph_nv_set)
    __swig_setmethods__["na"] = _swiglpk._glp_graph_na_set
    __swig_getmethods__["na"] = _swiglpk._glp_graph_na_get
    if _newclass:na = _swig_property(_swiglpk._glp_graph_na_get, _swiglpk._glp_graph_na_set)
    __swig_setmethods__["v"] = _swiglpk._glp_graph_v_set
    __swig_getmethods__["v"] = _swiglpk._glp_graph_v_get
    if _newclass:v = _swig_property(_swiglpk._glp_graph_v_get, _swiglpk._glp_graph_v_set)
    __swig_setmethods__["index"] = _swiglpk._glp_graph_index_set
    __swig_getmethods__["index"] = _swiglpk._glp_graph_index_get
    if _newclass:index = _swig_property(_swiglpk._glp_graph_index_get, _swiglpk._glp_graph_index_set)
    __swig_setmethods__["v_size"] = _swiglpk._glp_graph_v_size_set
    __swig_getmethods__["v_size"] = _swiglpk._glp_graph_v_size_get
    if _newclass:v_size = _swig_property(_swiglpk._glp_graph_v_size_get, _swiglpk._glp_graph_v_size_set)
    __swig_setmethods__["a_size"] = _swiglpk._glp_graph_a_size_set
    __swig_getmethods__["a_size"] = _swiglpk._glp_graph_a_size_get
    if _newclass:a_size = _swig_property(_swiglpk._glp_graph_a_size_get, _swiglpk._glp_graph_a_size_set)
    def __init__(self): 
        this = _swiglpk.new__glp_graph()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete__glp_graph
    __del__ = lambda self : None;
_glp_graph_swigregister = _swiglpk._glp_graph_swigregister
_glp_graph_swigregister(_glp_graph)

class _glp_vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _glp_vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _glp_vertex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _swiglpk._glp_vertex_i_set
    __swig_getmethods__["i"] = _swiglpk._glp_vertex_i_get
    if _newclass:i = _swig_property(_swiglpk._glp_vertex_i_get, _swiglpk._glp_vertex_i_set)
    __swig_setmethods__["name"] = _swiglpk._glp_vertex_name_set
    __swig_getmethods__["name"] = _swiglpk._glp_vertex_name_get
    if _newclass:name = _swig_property(_swiglpk._glp_vertex_name_get, _swiglpk._glp_vertex_name_set)
    __swig_setmethods__["entry"] = _swiglpk._glp_vertex_entry_set
    __swig_getmethods__["entry"] = _swiglpk._glp_vertex_entry_get
    if _newclass:entry = _swig_property(_swiglpk._glp_vertex_entry_get, _swiglpk._glp_vertex_entry_set)
    __swig_setmethods__["data"] = _swiglpk._glp_vertex_data_set
    __swig_getmethods__["data"] = _swiglpk._glp_vertex_data_get
    if _newclass:data = _swig_property(_swiglpk._glp_vertex_data_get, _swiglpk._glp_vertex_data_set)
    __swig_setmethods__["temp"] = _swiglpk._glp_vertex_temp_set
    __swig_getmethods__["temp"] = _swiglpk._glp_vertex_temp_get
    if _newclass:temp = _swig_property(_swiglpk._glp_vertex_temp_get, _swiglpk._glp_vertex_temp_set)
    __swig_setmethods__["_in"] = _swiglpk._glp_vertex__in_set
    __swig_getmethods__["_in"] = _swiglpk._glp_vertex__in_get
    if _newclass:_in = _swig_property(_swiglpk._glp_vertex__in_get, _swiglpk._glp_vertex__in_set)
    __swig_setmethods__["out"] = _swiglpk._glp_vertex_out_set
    __swig_getmethods__["out"] = _swiglpk._glp_vertex_out_get
    if _newclass:out = _swig_property(_swiglpk._glp_vertex_out_get, _swiglpk._glp_vertex_out_set)
    def __init__(self): 
        this = _swiglpk.new__glp_vertex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete__glp_vertex
    __del__ = lambda self : None;
_glp_vertex_swigregister = _swiglpk._glp_vertex_swigregister
_glp_vertex_swigregister(_glp_vertex)

class _glp_arc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _glp_arc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _glp_arc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tail"] = _swiglpk._glp_arc_tail_set
    __swig_getmethods__["tail"] = _swiglpk._glp_arc_tail_get
    if _newclass:tail = _swig_property(_swiglpk._glp_arc_tail_get, _swiglpk._glp_arc_tail_set)
    __swig_setmethods__["head"] = _swiglpk._glp_arc_head_set
    __swig_getmethods__["head"] = _swiglpk._glp_arc_head_get
    if _newclass:head = _swig_property(_swiglpk._glp_arc_head_get, _swiglpk._glp_arc_head_set)
    __swig_setmethods__["data"] = _swiglpk._glp_arc_data_set
    __swig_getmethods__["data"] = _swiglpk._glp_arc_data_get
    if _newclass:data = _swig_property(_swiglpk._glp_arc_data_get, _swiglpk._glp_arc_data_set)
    __swig_setmethods__["temp"] = _swiglpk._glp_arc_temp_set
    __swig_getmethods__["temp"] = _swiglpk._glp_arc_temp_get
    if _newclass:temp = _swig_property(_swiglpk._glp_arc_temp_get, _swiglpk._glp_arc_temp_set)
    __swig_setmethods__["t_prev"] = _swiglpk._glp_arc_t_prev_set
    __swig_getmethods__["t_prev"] = _swiglpk._glp_arc_t_prev_get
    if _newclass:t_prev = _swig_property(_swiglpk._glp_arc_t_prev_get, _swiglpk._glp_arc_t_prev_set)
    __swig_setmethods__["t_next"] = _swiglpk._glp_arc_t_next_set
    __swig_getmethods__["t_next"] = _swiglpk._glp_arc_t_next_get
    if _newclass:t_next = _swig_property(_swiglpk._glp_arc_t_next_get, _swiglpk._glp_arc_t_next_set)
    __swig_setmethods__["h_prev"] = _swiglpk._glp_arc_h_prev_set
    __swig_getmethods__["h_prev"] = _swiglpk._glp_arc_h_prev_get
    if _newclass:h_prev = _swig_property(_swiglpk._glp_arc_h_prev_get, _swiglpk._glp_arc_h_prev_set)
    __swig_setmethods__["h_next"] = _swiglpk._glp_arc_h_next_set
    __swig_getmethods__["h_next"] = _swiglpk._glp_arc_h_next_get
    if _newclass:h_next = _swig_property(_swiglpk._glp_arc_h_next_get, _swiglpk._glp_arc_h_next_set)
    def __init__(self): 
        this = _swiglpk.new__glp_arc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete__glp_arc
    __del__ = lambda self : None;
_glp_arc_swigregister = _swiglpk._glp_arc_swigregister
_glp_arc_swigregister(_glp_arc)


def glp_create_graph(*args):
  return _swiglpk.glp_create_graph(*args)
glp_create_graph = _swiglpk.glp_create_graph

def glp_set_graph_name(*args):
  return _swiglpk.glp_set_graph_name(*args)
glp_set_graph_name = _swiglpk.glp_set_graph_name

def glp_add_vertices(*args):
  return _swiglpk.glp_add_vertices(*args)
glp_add_vertices = _swiglpk.glp_add_vertices

def glp_set_vertex_name(*args):
  return _swiglpk.glp_set_vertex_name(*args)
glp_set_vertex_name = _swiglpk.glp_set_vertex_name

def glp_add_arc(*args):
  return _swiglpk.glp_add_arc(*args)
glp_add_arc = _swiglpk.glp_add_arc

def glp_del_vertices(*args):
  return _swiglpk.glp_del_vertices(*args)
glp_del_vertices = _swiglpk.glp_del_vertices

def glp_del_arc(*args):
  return _swiglpk.glp_del_arc(*args)
glp_del_arc = _swiglpk.glp_del_arc

def glp_erase_graph(*args):
  return _swiglpk.glp_erase_graph(*args)
glp_erase_graph = _swiglpk.glp_erase_graph

def glp_delete_graph(*args):
  return _swiglpk.glp_delete_graph(*args)
glp_delete_graph = _swiglpk.glp_delete_graph

def glp_create_v_index(*args):
  return _swiglpk.glp_create_v_index(*args)
glp_create_v_index = _swiglpk.glp_create_v_index

def glp_find_vertex(*args):
  return _swiglpk.glp_find_vertex(*args)
glp_find_vertex = _swiglpk.glp_find_vertex

def glp_delete_v_index(*args):
  return _swiglpk.glp_delete_v_index(*args)
glp_delete_v_index = _swiglpk.glp_delete_v_index

def glp_read_graph(*args):
  return _swiglpk.glp_read_graph(*args)
glp_read_graph = _swiglpk.glp_read_graph

def glp_write_graph(*args):
  return _swiglpk.glp_write_graph(*args)
glp_write_graph = _swiglpk.glp_write_graph

def glp_mincost_lp(*args):
  return _swiglpk.glp_mincost_lp(*args)
glp_mincost_lp = _swiglpk.glp_mincost_lp

def glp_mincost_okalg(*args):
  return _swiglpk.glp_mincost_okalg(*args)
glp_mincost_okalg = _swiglpk.glp_mincost_okalg

def glp_maxflow_lp(*args):
  return _swiglpk.glp_maxflow_lp(*args)
glp_maxflow_lp = _swiglpk.glp_maxflow_lp

def glp_maxflow_ffalg(*args):
  return _swiglpk.glp_maxflow_ffalg(*args)
glp_maxflow_ffalg = _swiglpk.glp_maxflow_ffalg

def glp_check_asnprob(*args):
  return _swiglpk.glp_check_asnprob(*args)
glp_check_asnprob = _swiglpk.glp_check_asnprob
GLP_ASN_MIN = _swiglpk.GLP_ASN_MIN
GLP_ASN_MAX = _swiglpk.GLP_ASN_MAX
GLP_ASN_MMP = _swiglpk.GLP_ASN_MMP

def glp_asnprob_lp(*args):
  return _swiglpk.glp_asnprob_lp(*args)
glp_asnprob_lp = _swiglpk.glp_asnprob_lp

def glp_asnprob_okalg(*args):
  return _swiglpk.glp_asnprob_okalg(*args)
glp_asnprob_okalg = _swiglpk.glp_asnprob_okalg

def glp_asnprob_hall(*args):
  return _swiglpk.glp_asnprob_hall(*args)
glp_asnprob_hall = _swiglpk.glp_asnprob_hall

def glp_cpp(*args):
  return _swiglpk.glp_cpp(*args)
glp_cpp = _swiglpk.glp_cpp

def glp_read_mincost(*args):
  return _swiglpk.glp_read_mincost(*args)
glp_read_mincost = _swiglpk.glp_read_mincost

def glp_write_mincost(*args):
  return _swiglpk.glp_write_mincost(*args)
glp_write_mincost = _swiglpk.glp_write_mincost

def glp_read_maxflow(*args):
  return _swiglpk.glp_read_maxflow(*args)
glp_read_maxflow = _swiglpk.glp_read_maxflow

def glp_write_maxflow(*args):
  return _swiglpk.glp_write_maxflow(*args)
glp_write_maxflow = _swiglpk.glp_write_maxflow

def glp_read_asnprob(*args):
  return _swiglpk.glp_read_asnprob(*args)
glp_read_asnprob = _swiglpk.glp_read_asnprob

def glp_write_asnprob(*args):
  return _swiglpk.glp_write_asnprob(*args)
glp_write_asnprob = _swiglpk.glp_write_asnprob

def glp_read_ccdata(*args):
  return _swiglpk.glp_read_ccdata(*args)
glp_read_ccdata = _swiglpk.glp_read_ccdata

def glp_write_ccdata(*args):
  return _swiglpk.glp_write_ccdata(*args)
glp_write_ccdata = _swiglpk.glp_write_ccdata

def glp_netgen(*args):
  return _swiglpk.glp_netgen(*args)
glp_netgen = _swiglpk.glp_netgen

def glp_gridgen(*args):
  return _swiglpk.glp_gridgen(*args)
glp_gridgen = _swiglpk.glp_gridgen

def glp_rmfgen(*args):
  return _swiglpk.glp_rmfgen(*args)
glp_rmfgen = _swiglpk.glp_rmfgen

def glp_weak_comp(*args):
  return _swiglpk.glp_weak_comp(*args)
glp_weak_comp = _swiglpk.glp_weak_comp

def glp_strong_comp(*args):
  return _swiglpk.glp_strong_comp(*args)
glp_strong_comp = _swiglpk.glp_strong_comp

def glp_top_sort(*args):
  return _swiglpk.glp_top_sort(*args)
glp_top_sort = _swiglpk.glp_top_sort

def glp_wclique_exact(*args):
  return _swiglpk.glp_wclique_exact(*args)
glp_wclique_exact = _swiglpk.glp_wclique_exact
LPX_LP = _swiglpk.LPX_LP
LPX_MIP = _swiglpk.LPX_MIP
LPX_FR = _swiglpk.LPX_FR
LPX_LO = _swiglpk.LPX_LO
LPX_UP = _swiglpk.LPX_UP
LPX_DB = _swiglpk.LPX_DB
LPX_FX = _swiglpk.LPX_FX
LPX_MIN = _swiglpk.LPX_MIN
LPX_MAX = _swiglpk.LPX_MAX
LPX_P_UNDEF = _swiglpk.LPX_P_UNDEF
LPX_P_FEAS = _swiglpk.LPX_P_FEAS
LPX_P_INFEAS = _swiglpk.LPX_P_INFEAS
LPX_P_NOFEAS = _swiglpk.LPX_P_NOFEAS
LPX_D_UNDEF = _swiglpk.LPX_D_UNDEF
LPX_D_FEAS = _swiglpk.LPX_D_FEAS
LPX_D_INFEAS = _swiglpk.LPX_D_INFEAS
LPX_D_NOFEAS = _swiglpk.LPX_D_NOFEAS
LPX_BS = _swiglpk.LPX_BS
LPX_NL = _swiglpk.LPX_NL
LPX_NU = _swiglpk.LPX_NU
LPX_NF = _swiglpk.LPX_NF
LPX_NS = _swiglpk.LPX_NS
LPX_T_UNDEF = _swiglpk.LPX_T_UNDEF
LPX_T_OPT = _swiglpk.LPX_T_OPT
LPX_CV = _swiglpk.LPX_CV
LPX_IV = _swiglpk.LPX_IV
LPX_I_UNDEF = _swiglpk.LPX_I_UNDEF
LPX_I_OPT = _swiglpk.LPX_I_OPT
LPX_I_FEAS = _swiglpk.LPX_I_FEAS
LPX_I_NOFEAS = _swiglpk.LPX_I_NOFEAS
LPX_OPT = _swiglpk.LPX_OPT
LPX_FEAS = _swiglpk.LPX_FEAS
LPX_INFEAS = _swiglpk.LPX_INFEAS
LPX_NOFEAS = _swiglpk.LPX_NOFEAS
LPX_UNBND = _swiglpk.LPX_UNBND
LPX_UNDEF = _swiglpk.LPX_UNDEF
LPX_E_OK = _swiglpk.LPX_E_OK
LPX_E_EMPTY = _swiglpk.LPX_E_EMPTY
LPX_E_BADB = _swiglpk.LPX_E_BADB
LPX_E_INFEAS = _swiglpk.LPX_E_INFEAS
LPX_E_FAULT = _swiglpk.LPX_E_FAULT
LPX_E_OBJLL = _swiglpk.LPX_E_OBJLL
LPX_E_OBJUL = _swiglpk.LPX_E_OBJUL
LPX_E_ITLIM = _swiglpk.LPX_E_ITLIM
LPX_E_TMLIM = _swiglpk.LPX_E_TMLIM
LPX_E_NOFEAS = _swiglpk.LPX_E_NOFEAS
LPX_E_INSTAB = _swiglpk.LPX_E_INSTAB
LPX_E_SING = _swiglpk.LPX_E_SING
LPX_E_NOCONV = _swiglpk.LPX_E_NOCONV
LPX_E_NOPFS = _swiglpk.LPX_E_NOPFS
LPX_E_NODFS = _swiglpk.LPX_E_NODFS
LPX_E_MIPGAP = _swiglpk.LPX_E_MIPGAP
LPX_K_MSGLEV = _swiglpk.LPX_K_MSGLEV
LPX_K_SCALE = _swiglpk.LPX_K_SCALE
LPX_K_DUAL = _swiglpk.LPX_K_DUAL
LPX_K_PRICE = _swiglpk.LPX_K_PRICE
LPX_K_RELAX = _swiglpk.LPX_K_RELAX
LPX_K_TOLBND = _swiglpk.LPX_K_TOLBND
LPX_K_TOLDJ = _swiglpk.LPX_K_TOLDJ
LPX_K_TOLPIV = _swiglpk.LPX_K_TOLPIV
LPX_K_ROUND = _swiglpk.LPX_K_ROUND
LPX_K_OBJLL = _swiglpk.LPX_K_OBJLL
LPX_K_OBJUL = _swiglpk.LPX_K_OBJUL
LPX_K_ITLIM = _swiglpk.LPX_K_ITLIM
LPX_K_ITCNT = _swiglpk.LPX_K_ITCNT
LPX_K_TMLIM = _swiglpk.LPX_K_TMLIM
LPX_K_OUTFRQ = _swiglpk.LPX_K_OUTFRQ
LPX_K_OUTDLY = _swiglpk.LPX_K_OUTDLY
LPX_K_BRANCH = _swiglpk.LPX_K_BRANCH
LPX_K_BTRACK = _swiglpk.LPX_K_BTRACK
LPX_K_TOLINT = _swiglpk.LPX_K_TOLINT
LPX_K_TOLOBJ = _swiglpk.LPX_K_TOLOBJ
LPX_K_MPSINFO = _swiglpk.LPX_K_MPSINFO
LPX_K_MPSOBJ = _swiglpk.LPX_K_MPSOBJ
LPX_K_MPSORIG = _swiglpk.LPX_K_MPSORIG
LPX_K_MPSWIDE = _swiglpk.LPX_K_MPSWIDE
LPX_K_MPSFREE = _swiglpk.LPX_K_MPSFREE
LPX_K_MPSSKIP = _swiglpk.LPX_K_MPSSKIP
LPX_K_LPTORIG = _swiglpk.LPX_K_LPTORIG
LPX_K_PRESOL = _swiglpk.LPX_K_PRESOL
LPX_K_BINARIZE = _swiglpk.LPX_K_BINARIZE
LPX_K_USECUTS = _swiglpk.LPX_K_USECUTS
LPX_K_BFTYPE = _swiglpk.LPX_K_BFTYPE
LPX_K_MIPGAP = _swiglpk.LPX_K_MIPGAP
LPX_C_COVER = _swiglpk.LPX_C_COVER
LPX_C_CLIQUE = _swiglpk.LPX_C_CLIQUE
LPX_C_GOMORY = _swiglpk.LPX_C_GOMORY
LPX_C_MIR = _swiglpk.LPX_C_MIR
LPX_C_ALL = _swiglpk.LPX_C_ALL
class LPXKKT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LPXKKT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LPXKKT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pe_ae_max"] = _swiglpk.LPXKKT_pe_ae_max_set
    __swig_getmethods__["pe_ae_max"] = _swiglpk.LPXKKT_pe_ae_max_get
    if _newclass:pe_ae_max = _swig_property(_swiglpk.LPXKKT_pe_ae_max_get, _swiglpk.LPXKKT_pe_ae_max_set)
    __swig_setmethods__["pe_ae_row"] = _swiglpk.LPXKKT_pe_ae_row_set
    __swig_getmethods__["pe_ae_row"] = _swiglpk.LPXKKT_pe_ae_row_get
    if _newclass:pe_ae_row = _swig_property(_swiglpk.LPXKKT_pe_ae_row_get, _swiglpk.LPXKKT_pe_ae_row_set)
    __swig_setmethods__["pe_re_max"] = _swiglpk.LPXKKT_pe_re_max_set
    __swig_getmethods__["pe_re_max"] = _swiglpk.LPXKKT_pe_re_max_get
    if _newclass:pe_re_max = _swig_property(_swiglpk.LPXKKT_pe_re_max_get, _swiglpk.LPXKKT_pe_re_max_set)
    __swig_setmethods__["pe_re_row"] = _swiglpk.LPXKKT_pe_re_row_set
    __swig_getmethods__["pe_re_row"] = _swiglpk.LPXKKT_pe_re_row_get
    if _newclass:pe_re_row = _swig_property(_swiglpk.LPXKKT_pe_re_row_get, _swiglpk.LPXKKT_pe_re_row_set)
    __swig_setmethods__["pe_quality"] = _swiglpk.LPXKKT_pe_quality_set
    __swig_getmethods__["pe_quality"] = _swiglpk.LPXKKT_pe_quality_get
    if _newclass:pe_quality = _swig_property(_swiglpk.LPXKKT_pe_quality_get, _swiglpk.LPXKKT_pe_quality_set)
    __swig_setmethods__["pb_ae_max"] = _swiglpk.LPXKKT_pb_ae_max_set
    __swig_getmethods__["pb_ae_max"] = _swiglpk.LPXKKT_pb_ae_max_get
    if _newclass:pb_ae_max = _swig_property(_swiglpk.LPXKKT_pb_ae_max_get, _swiglpk.LPXKKT_pb_ae_max_set)
    __swig_setmethods__["pb_ae_ind"] = _swiglpk.LPXKKT_pb_ae_ind_set
    __swig_getmethods__["pb_ae_ind"] = _swiglpk.LPXKKT_pb_ae_ind_get
    if _newclass:pb_ae_ind = _swig_property(_swiglpk.LPXKKT_pb_ae_ind_get, _swiglpk.LPXKKT_pb_ae_ind_set)
    __swig_setmethods__["pb_re_max"] = _swiglpk.LPXKKT_pb_re_max_set
    __swig_getmethods__["pb_re_max"] = _swiglpk.LPXKKT_pb_re_max_get
    if _newclass:pb_re_max = _swig_property(_swiglpk.LPXKKT_pb_re_max_get, _swiglpk.LPXKKT_pb_re_max_set)
    __swig_setmethods__["pb_re_ind"] = _swiglpk.LPXKKT_pb_re_ind_set
    __swig_getmethods__["pb_re_ind"] = _swiglpk.LPXKKT_pb_re_ind_get
    if _newclass:pb_re_ind = _swig_property(_swiglpk.LPXKKT_pb_re_ind_get, _swiglpk.LPXKKT_pb_re_ind_set)
    __swig_setmethods__["pb_quality"] = _swiglpk.LPXKKT_pb_quality_set
    __swig_getmethods__["pb_quality"] = _swiglpk.LPXKKT_pb_quality_get
    if _newclass:pb_quality = _swig_property(_swiglpk.LPXKKT_pb_quality_get, _swiglpk.LPXKKT_pb_quality_set)
    __swig_setmethods__["de_ae_max"] = _swiglpk.LPXKKT_de_ae_max_set
    __swig_getmethods__["de_ae_max"] = _swiglpk.LPXKKT_de_ae_max_get
    if _newclass:de_ae_max = _swig_property(_swiglpk.LPXKKT_de_ae_max_get, _swiglpk.LPXKKT_de_ae_max_set)
    __swig_setmethods__["de_ae_col"] = _swiglpk.LPXKKT_de_ae_col_set
    __swig_getmethods__["de_ae_col"] = _swiglpk.LPXKKT_de_ae_col_get
    if _newclass:de_ae_col = _swig_property(_swiglpk.LPXKKT_de_ae_col_get, _swiglpk.LPXKKT_de_ae_col_set)
    __swig_setmethods__["de_re_max"] = _swiglpk.LPXKKT_de_re_max_set
    __swig_getmethods__["de_re_max"] = _swiglpk.LPXKKT_de_re_max_get
    if _newclass:de_re_max = _swig_property(_swiglpk.LPXKKT_de_re_max_get, _swiglpk.LPXKKT_de_re_max_set)
    __swig_setmethods__["de_re_col"] = _swiglpk.LPXKKT_de_re_col_set
    __swig_getmethods__["de_re_col"] = _swiglpk.LPXKKT_de_re_col_get
    if _newclass:de_re_col = _swig_property(_swiglpk.LPXKKT_de_re_col_get, _swiglpk.LPXKKT_de_re_col_set)
    __swig_setmethods__["de_quality"] = _swiglpk.LPXKKT_de_quality_set
    __swig_getmethods__["de_quality"] = _swiglpk.LPXKKT_de_quality_get
    if _newclass:de_quality = _swig_property(_swiglpk.LPXKKT_de_quality_get, _swiglpk.LPXKKT_de_quality_set)
    __swig_setmethods__["db_ae_max"] = _swiglpk.LPXKKT_db_ae_max_set
    __swig_getmethods__["db_ae_max"] = _swiglpk.LPXKKT_db_ae_max_get
    if _newclass:db_ae_max = _swig_property(_swiglpk.LPXKKT_db_ae_max_get, _swiglpk.LPXKKT_db_ae_max_set)
    __swig_setmethods__["db_ae_ind"] = _swiglpk.LPXKKT_db_ae_ind_set
    __swig_getmethods__["db_ae_ind"] = _swiglpk.LPXKKT_db_ae_ind_get
    if _newclass:db_ae_ind = _swig_property(_swiglpk.LPXKKT_db_ae_ind_get, _swiglpk.LPXKKT_db_ae_ind_set)
    __swig_setmethods__["db_re_max"] = _swiglpk.LPXKKT_db_re_max_set
    __swig_getmethods__["db_re_max"] = _swiglpk.LPXKKT_db_re_max_get
    if _newclass:db_re_max = _swig_property(_swiglpk.LPXKKT_db_re_max_get, _swiglpk.LPXKKT_db_re_max_set)
    __swig_setmethods__["db_re_ind"] = _swiglpk.LPXKKT_db_re_ind_set
    __swig_getmethods__["db_re_ind"] = _swiglpk.LPXKKT_db_re_ind_get
    if _newclass:db_re_ind = _swig_property(_swiglpk.LPXKKT_db_re_ind_get, _swiglpk.LPXKKT_db_re_ind_set)
    __swig_setmethods__["db_quality"] = _swiglpk.LPXKKT_db_quality_set
    __swig_getmethods__["db_quality"] = _swiglpk.LPXKKT_db_quality_get
    if _newclass:db_quality = _swig_property(_swiglpk.LPXKKT_db_quality_get, _swiglpk.LPXKKT_db_quality_set)
    __swig_setmethods__["cs_ae_max"] = _swiglpk.LPXKKT_cs_ae_max_set
    __swig_getmethods__["cs_ae_max"] = _swiglpk.LPXKKT_cs_ae_max_get
    if _newclass:cs_ae_max = _swig_property(_swiglpk.LPXKKT_cs_ae_max_get, _swiglpk.LPXKKT_cs_ae_max_set)
    __swig_setmethods__["cs_ae_ind"] = _swiglpk.LPXKKT_cs_ae_ind_set
    __swig_getmethods__["cs_ae_ind"] = _swiglpk.LPXKKT_cs_ae_ind_get
    if _newclass:cs_ae_ind = _swig_property(_swiglpk.LPXKKT_cs_ae_ind_get, _swiglpk.LPXKKT_cs_ae_ind_set)
    __swig_setmethods__["cs_re_max"] = _swiglpk.LPXKKT_cs_re_max_set
    __swig_getmethods__["cs_re_max"] = _swiglpk.LPXKKT_cs_re_max_get
    if _newclass:cs_re_max = _swig_property(_swiglpk.LPXKKT_cs_re_max_get, _swiglpk.LPXKKT_cs_re_max_set)
    __swig_setmethods__["cs_re_ind"] = _swiglpk.LPXKKT_cs_re_ind_set
    __swig_getmethods__["cs_re_ind"] = _swiglpk.LPXKKT_cs_re_ind_get
    if _newclass:cs_re_ind = _swig_property(_swiglpk.LPXKKT_cs_re_ind_get, _swiglpk.LPXKKT_cs_re_ind_set)
    __swig_setmethods__["cs_quality"] = _swiglpk.LPXKKT_cs_quality_set
    __swig_getmethods__["cs_quality"] = _swiglpk.LPXKKT_cs_quality_get
    if _newclass:cs_quality = _swig_property(_swiglpk.LPXKKT_cs_quality_get, _swiglpk.LPXKKT_cs_quality_set)
    def __init__(self): 
        this = _swiglpk.new_LPXKKT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _swiglpk.delete_LPXKKT
    __del__ = lambda self : None;
LPXKKT_swigregister = _swiglpk.LPXKKT_swigregister
LPXKKT_swigregister(LPXKKT)


def _glp_lpx_create_prob():
  return _swiglpk._glp_lpx_create_prob()
_glp_lpx_create_prob = _swiglpk._glp_lpx_create_prob

def _glp_lpx_set_prob_name(*args):
  return _swiglpk._glp_lpx_set_prob_name(*args)
_glp_lpx_set_prob_name = _swiglpk._glp_lpx_set_prob_name

def _glp_lpx_set_obj_name(*args):
  return _swiglpk._glp_lpx_set_obj_name(*args)
_glp_lpx_set_obj_name = _swiglpk._glp_lpx_set_obj_name

def _glp_lpx_set_obj_dir(*args):
  return _swiglpk._glp_lpx_set_obj_dir(*args)
_glp_lpx_set_obj_dir = _swiglpk._glp_lpx_set_obj_dir

def _glp_lpx_add_rows(*args):
  return _swiglpk._glp_lpx_add_rows(*args)
_glp_lpx_add_rows = _swiglpk._glp_lpx_add_rows

def _glp_lpx_add_cols(*args):
  return _swiglpk._glp_lpx_add_cols(*args)
_glp_lpx_add_cols = _swiglpk._glp_lpx_add_cols

def _glp_lpx_set_row_name(*args):
  return _swiglpk._glp_lpx_set_row_name(*args)
_glp_lpx_set_row_name = _swiglpk._glp_lpx_set_row_name

def _glp_lpx_set_col_name(*args):
  return _swiglpk._glp_lpx_set_col_name(*args)
_glp_lpx_set_col_name = _swiglpk._glp_lpx_set_col_name

def _glp_lpx_set_row_bnds(*args):
  return _swiglpk._glp_lpx_set_row_bnds(*args)
_glp_lpx_set_row_bnds = _swiglpk._glp_lpx_set_row_bnds

def _glp_lpx_set_col_bnds(*args):
  return _swiglpk._glp_lpx_set_col_bnds(*args)
_glp_lpx_set_col_bnds = _swiglpk._glp_lpx_set_col_bnds

def _glp_lpx_set_obj_coef(*args):
  return _swiglpk._glp_lpx_set_obj_coef(*args)
_glp_lpx_set_obj_coef = _swiglpk._glp_lpx_set_obj_coef

def _glp_lpx_set_mat_row(*args):
  return _swiglpk._glp_lpx_set_mat_row(*args)
_glp_lpx_set_mat_row = _swiglpk._glp_lpx_set_mat_row

def _glp_lpx_set_mat_col(*args):
  return _swiglpk._glp_lpx_set_mat_col(*args)
_glp_lpx_set_mat_col = _swiglpk._glp_lpx_set_mat_col

def _glp_lpx_load_matrix(*args):
  return _swiglpk._glp_lpx_load_matrix(*args)
_glp_lpx_load_matrix = _swiglpk._glp_lpx_load_matrix

def _glp_lpx_del_rows(*args):
  return _swiglpk._glp_lpx_del_rows(*args)
_glp_lpx_del_rows = _swiglpk._glp_lpx_del_rows

def _glp_lpx_del_cols(*args):
  return _swiglpk._glp_lpx_del_cols(*args)
_glp_lpx_del_cols = _swiglpk._glp_lpx_del_cols

def _glp_lpx_delete_prob(*args):
  return _swiglpk._glp_lpx_delete_prob(*args)
_glp_lpx_delete_prob = _swiglpk._glp_lpx_delete_prob

def _glp_lpx_get_prob_name(*args):
  return _swiglpk._glp_lpx_get_prob_name(*args)
_glp_lpx_get_prob_name = _swiglpk._glp_lpx_get_prob_name

def _glp_lpx_get_obj_name(*args):
  return _swiglpk._glp_lpx_get_obj_name(*args)
_glp_lpx_get_obj_name = _swiglpk._glp_lpx_get_obj_name

def _glp_lpx_get_obj_dir(*args):
  return _swiglpk._glp_lpx_get_obj_dir(*args)
_glp_lpx_get_obj_dir = _swiglpk._glp_lpx_get_obj_dir

def _glp_lpx_get_num_rows(*args):
  return _swiglpk._glp_lpx_get_num_rows(*args)
_glp_lpx_get_num_rows = _swiglpk._glp_lpx_get_num_rows

def _glp_lpx_get_num_cols(*args):
  return _swiglpk._glp_lpx_get_num_cols(*args)
_glp_lpx_get_num_cols = _swiglpk._glp_lpx_get_num_cols

def _glp_lpx_get_row_name(*args):
  return _swiglpk._glp_lpx_get_row_name(*args)
_glp_lpx_get_row_name = _swiglpk._glp_lpx_get_row_name

def _glp_lpx_get_col_name(*args):
  return _swiglpk._glp_lpx_get_col_name(*args)
_glp_lpx_get_col_name = _swiglpk._glp_lpx_get_col_name

def _glp_lpx_get_row_type(*args):
  return _swiglpk._glp_lpx_get_row_type(*args)
_glp_lpx_get_row_type = _swiglpk._glp_lpx_get_row_type

def _glp_lpx_get_row_lb(*args):
  return _swiglpk._glp_lpx_get_row_lb(*args)
_glp_lpx_get_row_lb = _swiglpk._glp_lpx_get_row_lb

def _glp_lpx_get_row_ub(*args):
  return _swiglpk._glp_lpx_get_row_ub(*args)
_glp_lpx_get_row_ub = _swiglpk._glp_lpx_get_row_ub

def _glp_lpx_get_row_bnds(*args):
  return _swiglpk._glp_lpx_get_row_bnds(*args)
_glp_lpx_get_row_bnds = _swiglpk._glp_lpx_get_row_bnds

def _glp_lpx_get_col_type(*args):
  return _swiglpk._glp_lpx_get_col_type(*args)
_glp_lpx_get_col_type = _swiglpk._glp_lpx_get_col_type

def _glp_lpx_get_col_lb(*args):
  return _swiglpk._glp_lpx_get_col_lb(*args)
_glp_lpx_get_col_lb = _swiglpk._glp_lpx_get_col_lb

def _glp_lpx_get_col_ub(*args):
  return _swiglpk._glp_lpx_get_col_ub(*args)
_glp_lpx_get_col_ub = _swiglpk._glp_lpx_get_col_ub

def _glp_lpx_get_col_bnds(*args):
  return _swiglpk._glp_lpx_get_col_bnds(*args)
_glp_lpx_get_col_bnds = _swiglpk._glp_lpx_get_col_bnds

def _glp_lpx_get_obj_coef(*args):
  return _swiglpk._glp_lpx_get_obj_coef(*args)
_glp_lpx_get_obj_coef = _swiglpk._glp_lpx_get_obj_coef

def _glp_lpx_get_num_nz(*args):
  return _swiglpk._glp_lpx_get_num_nz(*args)
_glp_lpx_get_num_nz = _swiglpk._glp_lpx_get_num_nz

def _glp_lpx_get_mat_row(*args):
  return _swiglpk._glp_lpx_get_mat_row(*args)
_glp_lpx_get_mat_row = _swiglpk._glp_lpx_get_mat_row

def _glp_lpx_get_mat_col(*args):
  return _swiglpk._glp_lpx_get_mat_col(*args)
_glp_lpx_get_mat_col = _swiglpk._glp_lpx_get_mat_col

def _glp_lpx_create_index(*args):
  return _swiglpk._glp_lpx_create_index(*args)
_glp_lpx_create_index = _swiglpk._glp_lpx_create_index

def _glp_lpx_find_row(*args):
  return _swiglpk._glp_lpx_find_row(*args)
_glp_lpx_find_row = _swiglpk._glp_lpx_find_row

def _glp_lpx_find_col(*args):
  return _swiglpk._glp_lpx_find_col(*args)
_glp_lpx_find_col = _swiglpk._glp_lpx_find_col

def _glp_lpx_delete_index(*args):
  return _swiglpk._glp_lpx_delete_index(*args)
_glp_lpx_delete_index = _swiglpk._glp_lpx_delete_index

def _glp_lpx_scale_prob(*args):
  return _swiglpk._glp_lpx_scale_prob(*args)
_glp_lpx_scale_prob = _swiglpk._glp_lpx_scale_prob

def _glp_lpx_unscale_prob(*args):
  return _swiglpk._glp_lpx_unscale_prob(*args)
_glp_lpx_unscale_prob = _swiglpk._glp_lpx_unscale_prob

def _glp_lpx_set_row_stat(*args):
  return _swiglpk._glp_lpx_set_row_stat(*args)
_glp_lpx_set_row_stat = _swiglpk._glp_lpx_set_row_stat

def _glp_lpx_set_col_stat(*args):
  return _swiglpk._glp_lpx_set_col_stat(*args)
_glp_lpx_set_col_stat = _swiglpk._glp_lpx_set_col_stat

def _glp_lpx_std_basis(*args):
  return _swiglpk._glp_lpx_std_basis(*args)
_glp_lpx_std_basis = _swiglpk._glp_lpx_std_basis

def _glp_lpx_adv_basis(*args):
  return _swiglpk._glp_lpx_adv_basis(*args)
_glp_lpx_adv_basis = _swiglpk._glp_lpx_adv_basis

def _glp_lpx_cpx_basis(*args):
  return _swiglpk._glp_lpx_cpx_basis(*args)
_glp_lpx_cpx_basis = _swiglpk._glp_lpx_cpx_basis

def _glp_lpx_simplex(*args):
  return _swiglpk._glp_lpx_simplex(*args)
_glp_lpx_simplex = _swiglpk._glp_lpx_simplex

def _glp_lpx_exact(*args):
  return _swiglpk._glp_lpx_exact(*args)
_glp_lpx_exact = _swiglpk._glp_lpx_exact

def _glp_lpx_get_status(*args):
  return _swiglpk._glp_lpx_get_status(*args)
_glp_lpx_get_status = _swiglpk._glp_lpx_get_status

def _glp_lpx_get_prim_stat(*args):
  return _swiglpk._glp_lpx_get_prim_stat(*args)
_glp_lpx_get_prim_stat = _swiglpk._glp_lpx_get_prim_stat

def _glp_lpx_get_dual_stat(*args):
  return _swiglpk._glp_lpx_get_dual_stat(*args)
_glp_lpx_get_dual_stat = _swiglpk._glp_lpx_get_dual_stat

def _glp_lpx_get_obj_val(*args):
  return _swiglpk._glp_lpx_get_obj_val(*args)
_glp_lpx_get_obj_val = _swiglpk._glp_lpx_get_obj_val

def _glp_lpx_get_row_stat(*args):
  return _swiglpk._glp_lpx_get_row_stat(*args)
_glp_lpx_get_row_stat = _swiglpk._glp_lpx_get_row_stat

def _glp_lpx_get_row_prim(*args):
  return _swiglpk._glp_lpx_get_row_prim(*args)
_glp_lpx_get_row_prim = _swiglpk._glp_lpx_get_row_prim

def _glp_lpx_get_row_dual(*args):
  return _swiglpk._glp_lpx_get_row_dual(*args)
_glp_lpx_get_row_dual = _swiglpk._glp_lpx_get_row_dual

def _glp_lpx_get_row_info(*args):
  return _swiglpk._glp_lpx_get_row_info(*args)
_glp_lpx_get_row_info = _swiglpk._glp_lpx_get_row_info

def _glp_lpx_get_col_stat(*args):
  return _swiglpk._glp_lpx_get_col_stat(*args)
_glp_lpx_get_col_stat = _swiglpk._glp_lpx_get_col_stat

def _glp_lpx_get_col_prim(*args):
  return _swiglpk._glp_lpx_get_col_prim(*args)
_glp_lpx_get_col_prim = _swiglpk._glp_lpx_get_col_prim

def _glp_lpx_get_col_dual(*args):
  return _swiglpk._glp_lpx_get_col_dual(*args)
_glp_lpx_get_col_dual = _swiglpk._glp_lpx_get_col_dual

def _glp_lpx_get_col_info(*args):
  return _swiglpk._glp_lpx_get_col_info(*args)
_glp_lpx_get_col_info = _swiglpk._glp_lpx_get_col_info

def _glp_lpx_get_ray_info(*args):
  return _swiglpk._glp_lpx_get_ray_info(*args)
_glp_lpx_get_ray_info = _swiglpk._glp_lpx_get_ray_info

def _glp_lpx_check_kkt(*args):
  return _swiglpk._glp_lpx_check_kkt(*args)
_glp_lpx_check_kkt = _swiglpk._glp_lpx_check_kkt

def _glp_lpx_warm_up(*args):
  return _swiglpk._glp_lpx_warm_up(*args)
_glp_lpx_warm_up = _swiglpk._glp_lpx_warm_up

def _glp_lpx_eval_tab_row(*args):
  return _swiglpk._glp_lpx_eval_tab_row(*args)
_glp_lpx_eval_tab_row = _swiglpk._glp_lpx_eval_tab_row

def _glp_lpx_eval_tab_col(*args):
  return _swiglpk._glp_lpx_eval_tab_col(*args)
_glp_lpx_eval_tab_col = _swiglpk._glp_lpx_eval_tab_col

def _glp_lpx_transform_row(*args):
  return _swiglpk._glp_lpx_transform_row(*args)
_glp_lpx_transform_row = _swiglpk._glp_lpx_transform_row

def _glp_lpx_transform_col(*args):
  return _swiglpk._glp_lpx_transform_col(*args)
_glp_lpx_transform_col = _swiglpk._glp_lpx_transform_col

def _glp_lpx_prim_ratio_test(*args):
  return _swiglpk._glp_lpx_prim_ratio_test(*args)
_glp_lpx_prim_ratio_test = _swiglpk._glp_lpx_prim_ratio_test

def _glp_lpx_dual_ratio_test(*args):
  return _swiglpk._glp_lpx_dual_ratio_test(*args)
_glp_lpx_dual_ratio_test = _swiglpk._glp_lpx_dual_ratio_test

def _glp_lpx_interior(*args):
  return _swiglpk._glp_lpx_interior(*args)
_glp_lpx_interior = _swiglpk._glp_lpx_interior

def _glp_lpx_ipt_status(*args):
  return _swiglpk._glp_lpx_ipt_status(*args)
_glp_lpx_ipt_status = _swiglpk._glp_lpx_ipt_status

def _glp_lpx_ipt_obj_val(*args):
  return _swiglpk._glp_lpx_ipt_obj_val(*args)
_glp_lpx_ipt_obj_val = _swiglpk._glp_lpx_ipt_obj_val

def _glp_lpx_ipt_row_prim(*args):
  return _swiglpk._glp_lpx_ipt_row_prim(*args)
_glp_lpx_ipt_row_prim = _swiglpk._glp_lpx_ipt_row_prim

def _glp_lpx_ipt_row_dual(*args):
  return _swiglpk._glp_lpx_ipt_row_dual(*args)
_glp_lpx_ipt_row_dual = _swiglpk._glp_lpx_ipt_row_dual

def _glp_lpx_ipt_col_prim(*args):
  return _swiglpk._glp_lpx_ipt_col_prim(*args)
_glp_lpx_ipt_col_prim = _swiglpk._glp_lpx_ipt_col_prim

def _glp_lpx_ipt_col_dual(*args):
  return _swiglpk._glp_lpx_ipt_col_dual(*args)
_glp_lpx_ipt_col_dual = _swiglpk._glp_lpx_ipt_col_dual

def _glp_lpx_set_class(*args):
  return _swiglpk._glp_lpx_set_class(*args)
_glp_lpx_set_class = _swiglpk._glp_lpx_set_class

def _glp_lpx_get_class(*args):
  return _swiglpk._glp_lpx_get_class(*args)
_glp_lpx_get_class = _swiglpk._glp_lpx_get_class

def _glp_lpx_set_col_kind(*args):
  return _swiglpk._glp_lpx_set_col_kind(*args)
_glp_lpx_set_col_kind = _swiglpk._glp_lpx_set_col_kind

def _glp_lpx_get_col_kind(*args):
  return _swiglpk._glp_lpx_get_col_kind(*args)
_glp_lpx_get_col_kind = _swiglpk._glp_lpx_get_col_kind

def _glp_lpx_get_num_int(*args):
  return _swiglpk._glp_lpx_get_num_int(*args)
_glp_lpx_get_num_int = _swiglpk._glp_lpx_get_num_int

def _glp_lpx_get_num_bin(*args):
  return _swiglpk._glp_lpx_get_num_bin(*args)
_glp_lpx_get_num_bin = _swiglpk._glp_lpx_get_num_bin

def _glp_lpx_integer(*args):
  return _swiglpk._glp_lpx_integer(*args)
_glp_lpx_integer = _swiglpk._glp_lpx_integer

def _glp_lpx_intopt(*args):
  return _swiglpk._glp_lpx_intopt(*args)
_glp_lpx_intopt = _swiglpk._glp_lpx_intopt

def _glp_lpx_mip_status(*args):
  return _swiglpk._glp_lpx_mip_status(*args)
_glp_lpx_mip_status = _swiglpk._glp_lpx_mip_status

def _glp_lpx_mip_obj_val(*args):
  return _swiglpk._glp_lpx_mip_obj_val(*args)
_glp_lpx_mip_obj_val = _swiglpk._glp_lpx_mip_obj_val

def _glp_lpx_mip_row_val(*args):
  return _swiglpk._glp_lpx_mip_row_val(*args)
_glp_lpx_mip_row_val = _swiglpk._glp_lpx_mip_row_val

def _glp_lpx_mip_col_val(*args):
  return _swiglpk._glp_lpx_mip_col_val(*args)
_glp_lpx_mip_col_val = _swiglpk._glp_lpx_mip_col_val

def _glp_lpx_check_int(*args):
  return _swiglpk._glp_lpx_check_int(*args)
_glp_lpx_check_int = _swiglpk._glp_lpx_check_int

def _glp_lpx_reset_parms(*args):
  return _swiglpk._glp_lpx_reset_parms(*args)
_glp_lpx_reset_parms = _swiglpk._glp_lpx_reset_parms

def _glp_lpx_set_int_parm(*args):
  return _swiglpk._glp_lpx_set_int_parm(*args)
_glp_lpx_set_int_parm = _swiglpk._glp_lpx_set_int_parm

def _glp_lpx_get_int_parm(*args):
  return _swiglpk._glp_lpx_get_int_parm(*args)
_glp_lpx_get_int_parm = _swiglpk._glp_lpx_get_int_parm

def _glp_lpx_set_real_parm(*args):
  return _swiglpk._glp_lpx_set_real_parm(*args)
_glp_lpx_set_real_parm = _swiglpk._glp_lpx_set_real_parm

def _glp_lpx_get_real_parm(*args):
  return _swiglpk._glp_lpx_get_real_parm(*args)
_glp_lpx_get_real_parm = _swiglpk._glp_lpx_get_real_parm

def _glp_lpx_read_mps(*args):
  return _swiglpk._glp_lpx_read_mps(*args)
_glp_lpx_read_mps = _swiglpk._glp_lpx_read_mps

def _glp_lpx_write_mps(*args):
  return _swiglpk._glp_lpx_write_mps(*args)
_glp_lpx_write_mps = _swiglpk._glp_lpx_write_mps

def _glp_lpx_read_bas(*args):
  return _swiglpk._glp_lpx_read_bas(*args)
_glp_lpx_read_bas = _swiglpk._glp_lpx_read_bas

def _glp_lpx_write_bas(*args):
  return _swiglpk._glp_lpx_write_bas(*args)
_glp_lpx_write_bas = _swiglpk._glp_lpx_write_bas

def _glp_lpx_read_freemps(*args):
  return _swiglpk._glp_lpx_read_freemps(*args)
_glp_lpx_read_freemps = _swiglpk._glp_lpx_read_freemps

def _glp_lpx_write_freemps(*args):
  return _swiglpk._glp_lpx_write_freemps(*args)
_glp_lpx_write_freemps = _swiglpk._glp_lpx_write_freemps

def _glp_lpx_read_cpxlp(*args):
  return _swiglpk._glp_lpx_read_cpxlp(*args)
_glp_lpx_read_cpxlp = _swiglpk._glp_lpx_read_cpxlp

def _glp_lpx_write_cpxlp(*args):
  return _swiglpk._glp_lpx_write_cpxlp(*args)
_glp_lpx_write_cpxlp = _swiglpk._glp_lpx_write_cpxlp

def _glp_lpx_read_model(*args):
  return _swiglpk._glp_lpx_read_model(*args)
_glp_lpx_read_model = _swiglpk._glp_lpx_read_model

def _glp_lpx_print_prob(*args):
  return _swiglpk._glp_lpx_print_prob(*args)
_glp_lpx_print_prob = _swiglpk._glp_lpx_print_prob

def _glp_lpx_print_sol(*args):
  return _swiglpk._glp_lpx_print_sol(*args)
_glp_lpx_print_sol = _swiglpk._glp_lpx_print_sol

def _glp_lpx_print_sens_bnds(*args):
  return _swiglpk._glp_lpx_print_sens_bnds(*args)
_glp_lpx_print_sens_bnds = _swiglpk._glp_lpx_print_sens_bnds

def _glp_lpx_print_ips(*args):
  return _swiglpk._glp_lpx_print_ips(*args)
_glp_lpx_print_ips = _swiglpk._glp_lpx_print_ips

def _glp_lpx_print_mip(*args):
  return _swiglpk._glp_lpx_print_mip(*args)
_glp_lpx_print_mip = _swiglpk._glp_lpx_print_mip

def _glp_lpx_is_b_avail(*args):
  return _swiglpk._glp_lpx_is_b_avail(*args)
_glp_lpx_is_b_avail = _swiglpk._glp_lpx_is_b_avail

def _glp_lpx_write_pb(*args):
  return _swiglpk._glp_lpx_write_pb(*args)
_glp_lpx_write_pb = _swiglpk._glp_lpx_write_pb

def _glp_lpx_main(*args):
  return _swiglpk._glp_lpx_main(*args)
_glp_lpx_main = _swiglpk._glp_lpx_main
# This file is compatible with both classic and new-style classes.


