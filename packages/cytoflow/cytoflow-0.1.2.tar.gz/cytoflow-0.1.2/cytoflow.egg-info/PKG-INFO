Metadata-Version: 1.1
Name: cytoflow
Version: 0.1.2
Summary: Python tools for quantitative, reproducible flow cytometry analysis
Home-page: https://github.com/bpteague/cytoflow
Author: Brian Teague
Author-email: teague@mit.edu
License: GPLv3
Description: CytoFlow
        ========
        
        Python tools for quantitative, reproducible flow cytometry analysis
        -------------------------------------------------------------------
        
        Welcome to a different style of flow cytometry analysis. For a quick
        demo, check out `an example IPython
        notebook <http://nbviewer.ipython.org/github/bpteague/cytoflow/blob/master/docs/examples/Basic%20Cytometry.ipynb>`__
        
        What's wrong with other packages?
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        Packages such as FACSDiva and FlowJo are focused on primarily on
        identifying and counting subpopulations of cells in a multi-channel flow
        cytometry experiment. While this is important for many different
        applications, it reflects flow cytometry's origins in separating
        mixtures of cells based on differential staining of their cell surface
        markers.
        
        Cytometers can also be used to measure internal cell state, frequently
        as reported by fluorescent proteins such as GFP. In this context, they
        function in a manner similar to a high-powered plate-reader: instead of
        reporting the sum fluorescence of a population of cells, the cytometer
        shows you the *distribution* of the cells' fluorescence. Thinking in
        terms of distributions, and how those distributions change as you vary
        an experimental variable, is something existing packages don't handle
        gracefully.
        
        What's different about CytoFlow?
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        A few things.
        
        -  An emphasis on **metadata**. CytoFlow assumes that you are measuring
           fluorescence on several samples that were treated differently: either
           they were collected at different times, treated with varying levels
           of inducers, etc. You specify the conditions for each sample up
           front, then use those conditions to facet the analysis.
        
        -  Cytometry analysis conceptualized as a **workflow**. Raw cytometry
           data is usually not terribly useful: you may gate out cellular debris
           and aggregates (using FSC and SSC channels), then compensate for
           channel bleed-through, and finally select only transfected cells
           before actually looking at the parameters you're interested in
           experimentally. CytoFlow implements a workflow paradigm, where
           operations are applied sequentially; a workflow can be saved and
           re-used, or shared with your coworkers.
        
        -  **Easy to use.** Sane defaults; good documentation; focused on doing
           one thing and doing it well.
        
        -  **Good visualization.** I don't know about you, but I'm getting
           really tired of FACSDiva plots.
        
        -  **Versatile.** Built on Python, with a well-defined library of
           operations and visualizations that are well separated from the user
           interface. Need an analysis that CytoFlow doesn't have? Export your
           workflow to an IPython notebook and use any Python module you want to
           complete your analysis. Data is stored in a pandas.DataFrame, which
           is rapidly becoming the standard for Python data management (and will
           make R users feel right at home.)
        
        -  **Extensible.** Adding a new analysis module is simple; the interface
           to implement is only four functions.
        
        -  **Statistically sound.** Ready access to useful data-driven tools for
           analysis, such as fitting 2-dimensional Gaussians for automated
           gating and mixture modeling.
        
        Required packages
        ~~~~~~~~~~~~~~~~~
        
        This will soon go into a ``setuptools`` spec. (TODO!)
        
        For the core ``cytotools`` library, you need the following Python
        packages:
        
        ::
        
            python >= 2.7
            pandas >= 0.15.0
            numexpr >= 2.1
            seaborn >= 0.5.0
            traits >= 4.0
            FlowCytometryTools  >= 0.4.0
        
        For the GUI, you additionally need:
        
        ::
        
            pyface >= 4.0
            pyqt >= 4.10
        
        Note that many of these packages have additional dependencies, including
        but not limited to ``matplotlib``, ``numpy``, ``traitsui``,
        ``decorator``, etc. I'm pretty sure that they're all well-behaved PyPI
        packages; you should be able to install all the above with
        ``pip install`` or the Canopy package manager.
        
        **Please note:** I am a Linux user, and installing these packages is
        quite easy for me. It may be harder for Mac and Windows users; please
        write an install guide to help those that come after!
        
Keywords: flow cytometry scipy
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Environment :: Console
Classifier: Environment :: MacOS X
Classifier: Environment :: Win32 (MS Windows)
Classifier: Environment :: X11 Applications :: Qt
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
