# encoding: utf-8
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class HttpStatusCode(object):
  """
  HTTP状态码列表，用于传输层，签名错误等
  """
  BAD_REQUEST = 400
  INVALID_AUTH = 401
  CLOCK_TOO_SKEWED = 412
  REQUEST_TOO_LARGE = 413
  INTERNAL_ERROR = 500

  _VALUES_TO_NAMES = {
    400: "BAD_REQUEST",
    401: "INVALID_AUTH",
    412: "CLOCK_TOO_SKEWED",
    413: "REQUEST_TOO_LARGE",
    500: "INTERNAL_ERROR",
  }

  _NAMES_TO_VALUES = {
    "BAD_REQUEST": 400,
    "INVALID_AUTH": 401,
    "CLOCK_TOO_SKEWED": 412,
    "REQUEST_TOO_LARGE": 413,
    "INTERNAL_ERROR": 500,
  }

class ErrorCode(object):
  """
  错误码列表，用于逻辑层错误
  """
  INTERNAL_ERROR = 1
  SERVICE_UNAVAILABLE = 2
  UNKNOWN = 3
  END_OF_INTERNAL_ERROR = 20
  ACCESS_DENIED = 21
  VALIDATION_FAILED = 22
  SIZE_EXCEED = 23
  QUOTA_EXCEED = 24
  THROUGHPUT_EXCEED = 25
  RESOURCE_NOT_FOUND = 26
  RESOURCE_ALREADY_EXISTS = 27
  RESOURCE_UNAVAILABLE = 28
  UNSUPPORTED_VERSION = 29
  UNSUPPORTED_OPERATION = 30
  INVALID_AUTH = 31
  CLOCK_TOO_SKEWED = 32
  REQUEST_TOO_LARGE = 33
  BAD_REQUEST = 34
  TTRANSPORT_ERROR = 35
  UNSUPPORTED_TPROTOCOL = 36
  REQUEST_TIMEOUT = 37

  _VALUES_TO_NAMES = {
    1: "INTERNAL_ERROR",
    2: "SERVICE_UNAVAILABLE",
    3: "UNKNOWN",
    20: "END_OF_INTERNAL_ERROR",
    21: "ACCESS_DENIED",
    22: "VALIDATION_FAILED",
    23: "SIZE_EXCEED",
    24: "QUOTA_EXCEED",
    25: "THROUGHPUT_EXCEED",
    26: "RESOURCE_NOT_FOUND",
    27: "RESOURCE_ALREADY_EXISTS",
    28: "RESOURCE_UNAVAILABLE",
    29: "UNSUPPORTED_VERSION",
    30: "UNSUPPORTED_OPERATION",
    31: "INVALID_AUTH",
    32: "CLOCK_TOO_SKEWED",
    33: "REQUEST_TOO_LARGE",
    34: "BAD_REQUEST",
    35: "TTRANSPORT_ERROR",
    36: "UNSUPPORTED_TPROTOCOL",
    37: "REQUEST_TIMEOUT",
  }

  _NAMES_TO_VALUES = {
    "INTERNAL_ERROR": 1,
    "SERVICE_UNAVAILABLE": 2,
    "UNKNOWN": 3,
    "END_OF_INTERNAL_ERROR": 20,
    "ACCESS_DENIED": 21,
    "VALIDATION_FAILED": 22,
    "SIZE_EXCEED": 23,
    "QUOTA_EXCEED": 24,
    "THROUGHPUT_EXCEED": 25,
    "RESOURCE_NOT_FOUND": 26,
    "RESOURCE_ALREADY_EXISTS": 27,
    "RESOURCE_UNAVAILABLE": 28,
    "UNSUPPORTED_VERSION": 29,
    "UNSUPPORTED_OPERATION": 30,
    "INVALID_AUTH": 31,
    "CLOCK_TOO_SKEWED": 32,
    "REQUEST_TOO_LARGE": 33,
    "BAD_REQUEST": 34,
    "TTRANSPORT_ERROR": 35,
    "UNSUPPORTED_TPROTOCOL": 36,
    "REQUEST_TIMEOUT": 37,
  }

class RetryType(object):
  SAFE = 0
  UNSAFE = 1

  _VALUES_TO_NAMES = {
    0: "SAFE",
    1: "UNSAFE",
  }

  _NAMES_TO_VALUES = {
    "SAFE": 0,
    "UNSAFE": 1,
  }


class ServiceException(TException):
  """
  RPC调用错误

  Attributes:
   - errorCode: 错误码
   - errorMessage: 错误信息
   - details: 错误信息细节
   - callId: RPC调用标识
   - requestId: 请求标识
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errorCode', None, None, ), # 1
    (2, TType.STRING, 'errorMessage', None, None, ), # 2
    (3, TType.STRING, 'details', None, None, ), # 3
    (4, TType.STRING, 'callId', None, None, ), # 4
    (5, TType.STRING, 'requestId', None, None, ), # 5
  )

  def __init__(self, errorCode=None, errorMessage=None, details=None, callId=None, requestId=None,):
    self.errorCode = errorCode
    self.errorMessage = errorMessage
    self.details = details
    self.callId = callId
    self.requestId = requestId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errorMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.callId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.requestId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceException')
    if self.errorCode is not None:
      oprot.writeFieldBegin('errorCode', TType.I32, 1)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    if self.errorMessage is not None:
      oprot.writeFieldBegin('errorMessage', TType.STRING, 2)
      oprot.writeString(self.errorMessage)
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 3)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    if self.callId is not None:
      oprot.writeFieldBegin('callId', TType.STRING, 4)
      oprot.writeString(self.callId)
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 5)
      oprot.writeString(self.requestId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
