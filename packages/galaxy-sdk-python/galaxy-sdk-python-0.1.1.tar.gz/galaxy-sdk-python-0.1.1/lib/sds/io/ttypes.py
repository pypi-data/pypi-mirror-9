#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import sds.table.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SLFileType(object):
  """
  SLFile格式存储类型
  """
  DATUM_MAP = 1
  RC_BASIC = 2

  _VALUES_TO_NAMES = {
    1: "DATUM_MAP",
    2: "RC_BASIC",
  }

  _NAMES_TO_VALUES = {
    "DATUM_MAP": 1,
    "RC_BASIC": 2,
  }


class DatumMapMeta(object):
  """
  DATUM_MAP文件格式元信息

  Attributes:
   - keyIdMap: 属性id -> 属性名映射
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'keyIdMap', (TType.I16,None,TType.STRING,None), None, ), # 1
  )

  def __init__(self, keyIdMap=None,):
    self.keyIdMap = keyIdMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.keyIdMap = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI16();
            _val6 = iprot.readString();
            self.keyIdMap[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DatumMapMeta')
    if self.keyIdMap is not None:
      oprot.writeFieldBegin('keyIdMap', TType.MAP, 1)
      oprot.writeMapBegin(TType.I16, TType.STRING, len(self.keyIdMap))
      for kiter7,viter8 in self.keyIdMap.items():
        oprot.writeI16(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RCBasicMeta(object):
  """
  RC_BASIC文件格式元信息

  Attributes:
   - keys: 属性列表
   - types: 属性类型
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'keys', (TType.STRING,None), None, ), # 1
    (2, TType.MAP, 'types', (TType.STRING,None,TType.I32,None), None, ), # 2
  )

  def __init__(self, keys=None, types=None,):
    self.keys = keys
    self.types = types

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.keys = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = iprot.readString();
            self.keys.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.types = {}
          (_ktype16, _vtype17, _size15 ) = iprot.readMapBegin()
          for _i19 in xrange(_size15):
            _key20 = iprot.readString();
            _val21 = iprot.readI32();
            self.types[_key20] = _val21
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RCBasicMeta')
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.keys))
      for iter22 in self.keys:
        oprot.writeString(iter22)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.types is not None:
      oprot.writeFieldBegin('types', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.types))
      for kiter23,viter24 in self.types.items():
        oprot.writeString(kiter23)
        oprot.writeI32(viter24)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RCBasicRowGroupHeader(object):
  """
  RC_BASIC Row Group头信息

  Attributes:
   - count: 行组的记录总数，必须为正整数
   - offset: 属性列组的相对偏移(相对与头信息结尾，即第一个列组offset总是为0)，
  属性的顺序与元信息的属性列表对应
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'count', None, None, ), # 1
    (2, TType.LIST, 'offset', (TType.I32,None), None, ), # 2
  )

  def __init__(self, count=None, offset=None,):
    self.count = count
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.offset = []
          (_etype28, _size25) = iprot.readListBegin()
          for _i29 in xrange(_size25):
            _elem30 = iprot.readI32();
            self.offset.append(_elem30)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RCBasicRowGroupHeader')
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 1)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.offset))
      for iter31 in self.offset:
        oprot.writeI32(iter31)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SLFileMeta(object):
  """
  SLFile格式存储元信息

  Attributes:
   - type
   - datumMapMeta
   - rcBasicMeta
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRUCT, 'datumMapMeta', (DatumMapMeta, DatumMapMeta.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'rcBasicMeta', (RCBasicMeta, RCBasicMeta.thrift_spec), None, ), # 3
  )

  def __init__(self, type=None, datumMapMeta=None, rcBasicMeta=None,):
    self.type = type
    self.datumMapMeta = datumMapMeta
    self.rcBasicMeta = rcBasicMeta

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.datumMapMeta = DatumMapMeta()
          self.datumMapMeta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.rcBasicMeta = RCBasicMeta()
          self.rcBasicMeta.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SLFileMeta')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.datumMapMeta is not None:
      oprot.writeFieldBegin('datumMapMeta', TType.STRUCT, 2)
      self.datumMapMeta.write(oprot)
      oprot.writeFieldEnd()
    if self.rcBasicMeta is not None:
      oprot.writeFieldBegin('rcBasicMeta', TType.STRUCT, 3)
      self.rcBasicMeta.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DatumMapRecord(object):
  """
  DATUM_MAP的Datum Map记录定义

  Attributes:
   - data: 数据部分
   - keyIdMap: 属性id -> 属性名映射，
  只记录当前未知的属性，即如果文件头或者前面记录已经包含某属性，则此处不再包含，
  此特性仅用于支持在创建文件时表schema未知的情况
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'data', (TType.I16,None,TType.STRUCT,(sds.table.ttypes.Datum, sds.table.ttypes.Datum.thrift_spec)), None, ), # 1
    (2, TType.MAP, 'keyIdMap', (TType.I16,None,TType.STRING,None), None, ), # 2
  )

  def __init__(self, data=None, keyIdMap=None,):
    self.data = data
    self.keyIdMap = keyIdMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.data = {}
          (_ktype33, _vtype34, _size32 ) = iprot.readMapBegin()
          for _i36 in xrange(_size32):
            _key37 = iprot.readI16();
            _val38 = sds.table.ttypes.Datum()
            _val38.read(iprot)
            self.data[_key37] = _val38
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.keyIdMap = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin()
          for _i43 in xrange(_size39):
            _key44 = iprot.readI16();
            _val45 = iprot.readString();
            self.keyIdMap[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DatumMapRecord')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.MAP, 1)
      oprot.writeMapBegin(TType.I16, TType.STRUCT, len(self.data))
      for kiter46,viter47 in self.data.items():
        oprot.writeI16(kiter46)
        viter47.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.keyIdMap is not None:
      oprot.writeFieldBegin('keyIdMap', TType.MAP, 2)
      oprot.writeMapBegin(TType.I16, TType.STRING, len(self.keyIdMap))
      for kiter48,viter49 in self.keyIdMap.items():
        oprot.writeI16(kiter48)
        oprot.writeString(viter49)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ValueList(object):
  """
  RC_BASIC的列组定义

  Attributes:
   - values: 列组数据，仅当所有行对应的列无数据时才为空，而只有部分行对应的列无数据时，其对应值为NullValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'values', (TType.STRUCT,(sds.table.ttypes.Value, sds.table.ttypes.Value.thrift_spec)), None, ), # 1
  )

  def __init__(self, values=None,):
    self.values = values

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.values = []
          (_etype53, _size50) = iprot.readListBegin()
          for _i54 in xrange(_size50):
            _elem55 = sds.table.ttypes.Value()
            _elem55.read(iprot)
            self.values.append(_elem55)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ValueList')
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.values))
      for iter56 in self.values:
        iter56.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DatumMap(object):
  """
  Datum Map记录定义，用于序列化原生的SDS表记录(例如，MapReduce中的序列化)

  Attributes:
   - data: SDS记录行
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'data', (TType.STRING,None,TType.STRUCT,(sds.table.ttypes.Datum, sds.table.ttypes.Datum.thrift_spec)), None, ), # 1
  )

  def __init__(self, data=None,):
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.data = {}
          (_ktype58, _vtype59, _size57 ) = iprot.readMapBegin()
          for _i61 in xrange(_size57):
            _key62 = iprot.readString();
            _val63 = sds.table.ttypes.Datum()
            _val63.read(iprot)
            self.data[_key62] = _val63
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DatumMap')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.data))
      for kiter64,viter65 in self.data.items():
        oprot.writeString(kiter64)
        viter65.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
