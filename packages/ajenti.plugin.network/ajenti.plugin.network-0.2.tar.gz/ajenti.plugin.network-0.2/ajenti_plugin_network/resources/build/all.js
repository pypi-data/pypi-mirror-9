// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('ajenti.network', ['core']);

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('core').config(function($routeProvider) {
    return $routeProvider.when('/view/network', {
      templateUrl: '/network:resources/partial/index.html',
      controller: 'NetworkIndexController'
    });
  });

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('ajenti.network').controller('NetworkIndexController', function($scope, $routeParams, $timeout, messagebox, notify, pageTitle, urlPrefix, network) {
    pageTitle.set('Network');
    $scope.knownFamilies = {
      inet: ['static', 'dhcp', 'manual', 'loopback'],
      inet6: ['static', 'dhcp', 'manual', 'loopback', 'auto']
    };
    $scope.knownAddressingNames = {
      "static": 'Static',
      auto: 'Auto',
      dhcp: 'DHCP',
      manual: 'Manual',
      loopback: 'Loopback'
    };
    $scope.reloadState = function() {
      var iface, _i, _len, _ref, _results;
      $scope.state = {};
      _ref = $scope.config;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        iface = _ref[_i];
        _results.push((function(iface) {
          return network.getState(iface.name).then(function(state) {
            return $scope.state[iface.name] = state;
          });
        })(iface));
      }
      return _results;
    };
    $scope.reload = function() {
      $scope.config = null;
      network.getConfig().then(function(data) {
        $scope.config = data;
        return $scope.reloadState();
      });
      return network.getHostname().then(function(hostname) {
        return $scope.hostname = hostname;
      });
    };
    $scope.save = function() {
      return network.setConfig($scope.config).then(function() {
        return $scope.reload();
      });
    };
    $scope.reload();
    $scope.upInterface = function(iface) {
      return network.up(iface.name).then(function() {
        notify.success('Interface activated');
        return $scope.reloadState();
      });
    };
    $scope.downInterface = function(iface) {
      return messagebox.show({
        title: 'Warning',
        text: 'Deactivating a network interface can lock you out of the remote session',
        positive: 'Deactivate',
        negative: 'Cancel'
      }).then(function() {
        return network.down(iface.name).then(function() {
          notify.success('Interface deactivated');
          return $scope.reloadState();
        });
      });
    };
    $scope.restartInterface = function(iface) {
      return messagebox.show({
        title: 'Warning',
        text: 'Restarting a network interface can lock you out of the remote session',
        positive: 'Restart',
        negative: 'Cancel'
      }).then(function() {
        return network.downup(iface.name).then(function() {
          return $timeout(function() {
            notify.success('Interface reactivated');
            return $scope.reloadState();
          }, 2000);
        });
      });
    };
    return $scope.setHostname = function(hostname) {
      return network.setHostname(hostname).then(function() {
        return notify.success('Hostname changed');
      })["catch"](function(e) {
        return notify.error('Failed', e.message);
      });
    };
  });

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('ajenti.network').controller('NetworkDNSController', function($scope, notify, augeas) {
    augeas.get('resolv').then(function(config) {
      return $scope.config = config;
    });
    $scope.addNameserver = function() {
      $scope.config.insert('nameserver', $scope.newNameserver);
      return $scope.newNameserver = '';
    };
    return $scope.save = function() {
      return augeas.set('resolv', $scope.config).then(function() {
        return notify.success('Saved');
      })["catch"](function(e) {
        return notify.error('Could not save', e.message);
      });
    };
  });

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('ajenti.network').controller('NetworkHostsController', function($scope, notify, augeas) {
    augeas.get('hosts').then(function(config) {
      return $scope.config = config;
    });
    $scope._ = {};
    $scope.addHost = function() {
      var path;
      path = $scope.config.insert('99', null);
      $scope.config.insert(path + '/ipaddr', '127.0.0.1');
      $scope.config.insert(path + '/canonical', $scope.newHost);
      return $scope.newHost = '';
    };
    $scope.addAlias = function(path) {
      path = $scope.config.insert(path + '/alias', $scope._.newAlias);
      return $scope._.newAlias = '';
    };
    return $scope.save = function() {
      return augeas.set('hosts', $scope.config).then(function() {
        return notify.success('Saved');
      })["catch"](function(e) {
        return notify.error('Could not save', e.message);
      });
    };
  });

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('ajenti.network').service('network', function($http, $q, tasks) {
    this.getConfig = function() {
      var q;
      q = $q.defer();
      $http.get("/api/network/config/get").success(function(data) {
        return q.resolve(data);
      }).error(function(err) {
        return q.reject(err);
      });
      return q.promise;
    };
    this.setConfig = function(config) {
      var q;
      q = $q.defer();
      $http.post("/api/network/config/set", config).success(function(data) {
        return q.resolve(data);
      }).error(function(err) {
        return q.reject(err);
      });
      return q.promise;
    };
    this.getState = function(iface) {
      var q;
      q = $q.defer();
      $http.get("/api/network/state/" + iface).success(function(data) {
        return q.resolve(data);
      }).error(function(err) {
        return q.reject(err);
      });
      return q.promise;
    };
    this.up = function(iface) {
      var q;
      q = $q.defer();
      $http.get("/api/network/up/" + iface).success(function(data) {
        return q.resolve(data);
      }).error(function(err) {
        return q.reject(err);
      });
      return q.promise;
    };
    this.down = function(iface) {
      var q;
      q = $q.defer();
      $http.get("/api/network/down/" + iface).success(function(data) {
        return q.resolve(data);
      }).error(function(err) {
        return q.reject(err);
      });
      return q.promise;
    };
    this.downup = function(iface) {
      var q;
      q = $q.defer();
      $http.get("/api/network/downup/" + iface).success(function(data) {
        return q.resolve(data);
      }).error(function(err) {
        return q.reject(err);
      });
      return q.promise;
    };
    this.getHostname = function() {
      var q;
      q = $q.defer();
      $http.get("/api/network/hostname/get").success(function(data) {
        return q.resolve(data);
      }).error(function(err) {
        return q.reject(err);
      });
      return q.promise;
    };
    this.setHostname = function(hostname) {
      var q;
      q = $q.defer();
      $http.post("/api/network/hostname/set", hostname).success(function(data) {
        return q.resolve(data);
      }).error(function(err) {
        return q.reject(err);
      });
      return q.promise;
    };
    return this;
  });

}).call(this);

