# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tracking_window_macos.ui'
#
# Created: Wed May 14 15:26:23 2014
#      by: PyQt4 UI code generator 4.10.4
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_TrackingWindow(object):
    def setupUi(self, TrackingWindow):
        TrackingWindow.setObjectName(_fromUtf8("TrackingWindow"))
        TrackingWindow.resize(846, 701)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        TrackingWindow.setWindowIcon(icon)
        self.centralwidget = QtGui.QWidget(TrackingWindow)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.horizontalLayout = QtGui.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.vboxlayout = QtGui.QVBoxLayout()
        self.vboxlayout.setObjectName(_fromUtf8("vboxlayout"))
        self.hboxlayout = QtGui.QHBoxLayout()
        self.hboxlayout.setObjectName(_fromUtf8("hboxlayout"))
        self.label = QtGui.QLabel(self.centralwidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName(_fromUtf8("label"))
        self.hboxlayout.addWidget(self.label)
        self.previousState = QtGui.QComboBox(self.centralwidget)
        self.previousState.setObjectName(_fromUtf8("previousState"))
        self.hboxlayout.addWidget(self.previousState)
        self.vboxlayout.addLayout(self.hboxlayout)
        self.previousData = TrackingView(self.centralwidget)
        self.previousData.setObjectName(_fromUtf8("previousData"))
        self.vboxlayout.addWidget(self.previousData)
        self.horizontalLayout.addLayout(self.vboxlayout)
        self.verticalLayout_2 = QtGui.QVBoxLayout()
        self.verticalLayout_2.setObjectName(_fromUtf8("verticalLayout_2"))
        spacerItem = QtGui.QSpacerItem(20, 208, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.verticalLayout = QtGui.QVBoxLayout()
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.copyToCurrent = QtGui.QPushButton(self.centralwidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.copyToCurrent.sizePolicy().hasHeightForWidth())
        self.copyToCurrent.setSizePolicy(sizePolicy)
        self.copyToCurrent.setIconSize(QtCore.QSize(24, 16))
        self.copyToCurrent.setObjectName(_fromUtf8("copyToCurrent"))
        self.verticalLayout.addWidget(self.copyToCurrent)
        self.linkViews = QtGui.QPushButton(self.centralwidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.linkViews.sizePolicy().hasHeightForWidth())
        self.linkViews.setSizePolicy(sizePolicy)
        self.linkViews.setText(_fromUtf8(""))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/link_broken_macos.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon1.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/link_macos.png")), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.linkViews.setIcon(icon1)
        self.linkViews.setIconSize(QtCore.QSize(20, 16))
        self.linkViews.setCheckable(True)
        self.linkViews.setObjectName(_fromUtf8("linkViews"))
        self.verticalLayout.addWidget(self.linkViews)
        self.copyToPrevious = QtGui.QPushButton(self.centralwidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.copyToPrevious.sizePolicy().hasHeightForWidth())
        self.copyToPrevious.setSizePolicy(sizePolicy)
        self.copyToPrevious.setIconSize(QtCore.QSize(24, 16))
        self.copyToPrevious.setObjectName(_fromUtf8("copyToPrevious"))
        self.verticalLayout.addWidget(self.copyToPrevious)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        spacerItem1 = QtGui.QSpacerItem(20, 208, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.vboxlayout1 = QtGui.QVBoxLayout()
        self.vboxlayout1.setObjectName(_fromUtf8("vboxlayout1"))
        self.hboxlayout1 = QtGui.QHBoxLayout()
        self.hboxlayout1.setObjectName(_fromUtf8("hboxlayout1"))
        self.label_2 = QtGui.QLabel(self.centralwidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Maximum, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setObjectName(_fromUtf8("label_2"))
        self.hboxlayout1.addWidget(self.label_2)
        self.currentState = QtGui.QComboBox(self.centralwidget)
        self.currentState.setObjectName(_fromUtf8("currentState"))
        self.hboxlayout1.addWidget(self.currentState)
        self.vboxlayout1.addLayout(self.hboxlayout1)
        self.currentData = TrackingView(self.centralwidget)
        self.currentData.setObjectName(_fromUtf8("currentData"))
        self.vboxlayout1.addWidget(self.currentData)
        self.horizontalLayout.addLayout(self.vboxlayout1)
        TrackingWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(TrackingWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 846, 30))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.menu_File = QtGui.QMenu(self.menubar)
        self.menu_File.setObjectName(_fromUtf8("menu_File"))
        self.menuView = QtGui.QMenu(self.menubar)
        self.menuView.setTearOffEnabled(True)
        self.menuView.setObjectName(_fromUtf8("menuView"))
        self.menu_Actions = QtGui.QMenu(self.menubar)
        self.menu_Actions.setObjectName(_fromUtf8("menu_Actions"))
        self.menu_View = QtGui.QMenu(self.menubar)
        self.menu_View.setObjectName(_fromUtf8("menu_View"))
        self.menu_Selection = QtGui.QMenu(self.menubar)
        self.menu_Selection.setObjectName(_fromUtf8("menu_Selection"))
        self.menuPrevious_state = QtGui.QMenu(self.menu_Selection)
        self.menuPrevious_state.setTearOffEnabled(True)
        self.menuPrevious_state.setObjectName(_fromUtf8("menuPrevious_state"))
        self.menuCurrent_state = QtGui.QMenu(self.menu_Selection)
        self.menuCurrent_state.setTearOffEnabled(True)
        self.menuCurrent_state.setObjectName(_fromUtf8("menuCurrent_state"))
        self.menuHelp = QtGui.QMenu(self.menubar)
        self.menuHelp.setObjectName(_fromUtf8("menuHelp"))
        self.menuA_nalysis = QtGui.QMenu(self.menubar)
        self.menuA_nalysis.setObjectName(_fromUtf8("menuA_nalysis"))
        TrackingWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(TrackingWindow)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        TrackingWindow.setStatusBar(self.statusbar)
        self.globalToolbar = QtGui.QToolBar(TrackingWindow)
        self.globalToolbar.setObjectName(_fromUtf8("globalToolbar"))
        TrackingWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.globalToolbar)
        self.editToolbar = QtGui.QToolBar(TrackingWindow)
        self.editToolbar.setObjectName(_fromUtf8("editToolbar"))
        TrackingWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.editToolbar)
        self.toolsToolbar = QtGui.QToolBar(TrackingWindow)
        self.toolsToolbar.setObjectName(_fromUtf8("toolsToolbar"))
        TrackingWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolsToolbar)
        self.action_Open_project = QtGui.QAction(TrackingWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/open.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Open_project.setIcon(icon2)
        self.action_Open_project.setObjectName(_fromUtf8("action_Open_project"))
        self.action_Save = QtGui.QAction(TrackingWindow)
        self.action_Save.setEnabled(False)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/save.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Save.setIcon(icon3)
        self.action_Save.setObjectName(_fromUtf8("action_Save"))
        self.actionSave_as = QtGui.QAction(TrackingWindow)
        self.actionSave_as.setObjectName(_fromUtf8("actionSave_as"))
        self.action_Quit = QtGui.QAction(TrackingWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/quit.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Quit.setIcon(icon4)
        self.action_Quit.setObjectName(_fromUtf8("action_Quit"))
        self.action_Change_data_file = QtGui.QAction(TrackingWindow)
        self.action_Change_data_file.setObjectName(_fromUtf8("action_Change_data_file"))
        self.action_Show_vector = QtGui.QAction(TrackingWindow)
        self.action_Show_vector.setCheckable(True)
        self.action_Show_vector.setChecked(True)
        self.action_Show_vector.setObjectName(_fromUtf8("action_Show_vector"))
        self.action_Show_template = QtGui.QAction(TrackingWindow)
        self.action_Show_template.setCheckable(True)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/view_template.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Show_template.setIcon(icon5)
        self.action_Show_template.setObjectName(_fromUtf8("action_Show_template"))
        self.actionShow_id = QtGui.QAction(TrackingWindow)
        self.actionShow_id.setCheckable(True)
        self.actionShow_id.setObjectName(_fromUtf8("actionShow_id"))
        self.action_Next_image = QtGui.QAction(TrackingWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/right.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Next_image.setIcon(icon6)
        self.action_Next_image.setObjectName(_fromUtf8("action_Next_image"))
        self.action_Previous_image = QtGui.QAction(TrackingWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/left.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Previous_image.setIcon(icon7)
        self.action_Previous_image.setObjectName(_fromUtf8("action_Previous_image"))
        self.action_Estimate_position = QtGui.QAction(TrackingWindow)
        self.action_Estimate_position.setCheckable(True)
        self.action_Estimate_position.setChecked(True)
        self.action_Estimate_position.setObjectName(_fromUtf8("action_Estimate_position"))
        self.action_Undo = QtGui.QAction(TrackingWindow)
        self.action_Undo.setEnabled(False)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/undo.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Undo.setIcon(icon8)
        self.action_Undo.setObjectName(_fromUtf8("action_Undo"))
        self.action_Redo = QtGui.QAction(TrackingWindow)
        self.action_Redo.setEnabled(False)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/redo.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Redo.setIcon(icon9)
        self.action_Redo.setObjectName(_fromUtf8("action_Redo"))
        self.action_Parameters = QtGui.QAction(TrackingWindow)
        self.action_Parameters.setCheckable(True)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/options.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Parameters.setIcon(icon10)
        self.action_Parameters.setObjectName(_fromUtf8("action_Parameters"))
        self.actionZoom_in = QtGui.QAction(TrackingWindow)
        self.actionZoom_in.setCheckable(True)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/gtk-zoom-in.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionZoom_in.setIcon(icon11)
        self.actionZoom_in.setObjectName(_fromUtf8("actionZoom_in"))
        self.actionZoom_out = QtGui.QAction(TrackingWindow)
        self.actionZoom_out.setCheckable(True)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/gtk-zoom-out.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionZoom_out.setIcon(icon12)
        self.actionZoom_out.setObjectName(_fromUtf8("actionZoom_out"))
        self.action_Fit = QtGui.QAction(TrackingWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/gtk-zoom-fit.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Fit.setIcon(icon13)
        self.action_Fit.setObjectName(_fromUtf8("action_Fit"))
        self.actionZoom_100 = QtGui.QAction(TrackingWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/gtk-zoom-100.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionZoom_100.setIcon(icon14)
        self.actionZoom_100.setObjectName(_fromUtf8("actionZoom_100"))
        self.actionAdd_point = QtGui.QAction(TrackingWindow)
        self.actionAdd_point.setCheckable(True)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/add.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdd_point.setIcon(icon15)
        self.actionAdd_point.setObjectName(_fromUtf8("actionAdd_point"))
        self.action_Move_point = QtGui.QAction(TrackingWindow)
        self.action_Move_point.setCheckable(True)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/move_pts.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Move_point.setIcon(icon16)
        self.action_Move_point.setObjectName(_fromUtf8("action_Move_point"))
        self.action_Pan = QtGui.QAction(TrackingWindow)
        self.action_Pan.setCheckable(True)
        self.action_Pan.setChecked(True)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/tool_pan.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Pan.setIcon(icon17)
        self.action_Pan.setObjectName(_fromUtf8("action_Pan"))
        self.actionRecent_projects = QtGui.QAction(TrackingWindow)
        self.actionRecent_projects.setObjectName(_fromUtf8("actionRecent_projects"))
        self.actionSize_of_points = QtGui.QAction(TrackingWindow)
        self.actionSize_of_points.setObjectName(_fromUtf8("actionSize_of_points"))
        self.actionCopy_from_previous = QtGui.QAction(TrackingWindow)
        self.actionCopy_from_previous.setObjectName(_fromUtf8("actionCopy_from_previous"))
        self.actionCopy_from_current = QtGui.QAction(TrackingWindow)
        self.actionCopy_from_current.setObjectName(_fromUtf8("actionCopy_from_current"))
        self.actionSelectPreviousAll = QtGui.QAction(TrackingWindow)
        self.actionSelectPreviousAll.setObjectName(_fromUtf8("actionSelectPreviousAll"))
        self.actionSelectPreviousNone = QtGui.QAction(TrackingWindow)
        self.actionSelectPreviousNone.setObjectName(_fromUtf8("actionSelectPreviousNone"))
        self.actionSelectPreviousNon_associated = QtGui.QAction(TrackingWindow)
        self.actionSelectPreviousNon_associated.setObjectName(_fromUtf8("actionSelectPreviousNon_associated"))
        self.actionSelectPreviousAssociated = QtGui.QAction(TrackingWindow)
        self.actionSelectPreviousAssociated.setObjectName(_fromUtf8("actionSelectPreviousAssociated"))
        self.actionSelectPreviousInvert = QtGui.QAction(TrackingWindow)
        self.actionSelectPreviousInvert.setObjectName(_fromUtf8("actionSelectPreviousInvert"))
        self.actionSelectCurrentAll = QtGui.QAction(TrackingWindow)
        self.actionSelectCurrentAll.setObjectName(_fromUtf8("actionSelectCurrentAll"))
        self.actionSelectCurrentNone = QtGui.QAction(TrackingWindow)
        self.actionSelectCurrentNone.setObjectName(_fromUtf8("actionSelectCurrentNone"))
        self.actionSelectCurrentNon_associated = QtGui.QAction(TrackingWindow)
        self.actionSelectCurrentNon_associated.setObjectName(_fromUtf8("actionSelectCurrentNon_associated"))
        self.actionSelectCurrentAssociated = QtGui.QAction(TrackingWindow)
        self.actionSelectCurrentAssociated.setObjectName(_fromUtf8("actionSelectCurrentAssociated"))
        self.actionSelectCurrentInvert = QtGui.QAction(TrackingWindow)
        self.actionSelectCurrentInvert.setObjectName(_fromUtf8("actionSelectCurrentInvert"))
        self.actionDelete_Current = QtGui.QAction(TrackingWindow)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/delete.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDelete_Current.setIcon(icon18)
        self.actionDelete_Current.setObjectName(_fromUtf8("actionDelete_Current"))
        self.actionMerge_points = QtGui.QAction(TrackingWindow)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/insert-link.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionMerge_points.setIcon(icon19)
        self.actionMerge_points.setObjectName(_fromUtf8("actionMerge_points"))
        self.actionCopy_selection_from_Current = QtGui.QAction(TrackingWindow)
        self.actionCopy_selection_from_Current.setObjectName(_fromUtf8("actionCopy_selection_from_Current"))
        self.actionCopy_selection_from_Previous = QtGui.QAction(TrackingWindow)
        self.actionCopy_selection_from_Previous.setObjectName(_fromUtf8("actionCopy_selection_from_Previous"))
        self.actionDelete_Previous = QtGui.QAction(TrackingWindow)
        self.actionDelete_Previous.setIcon(icon18)
        self.actionDelete_Previous.setObjectName(_fromUtf8("actionDelete_Previous"))
        self.actionNew_data_file = QtGui.QAction(TrackingWindow)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/new.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNew_data_file.setIcon(icon20)
        self.actionNew_data_file.setObjectName(_fromUtf8("actionNew_data_file"))
        self.actionAlign_images = QtGui.QAction(TrackingWindow)
        self.actionAlign_images.setObjectName(_fromUtf8("actionAlign_images"))
        self.actionAbout = QtGui.QAction(TrackingWindow)
        self.actionAbout.setIcon(icon)
        self.actionAbout.setObjectName(_fromUtf8("actionAbout"))
        self.actionAbout_Qt = QtGui.QAction(TrackingWindow)
        self.actionAbout_Qt.setObjectName(_fromUtf8("actionAbout_Qt"))
        self.actionAdd_cell = QtGui.QAction(TrackingWindow)
        self.actionAdd_cell.setCheckable(True)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/add_cell.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdd_cell.setIcon(icon21)
        self.actionAdd_cell.setObjectName(_fromUtf8("actionAdd_cell"))
        self.actionRemove_cell = QtGui.QAction(TrackingWindow)
        self.actionRemove_cell.setCheckable(True)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap(_fromUtf8(":/icons/remove_cell.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRemove_cell.setIcon(icon22)
        self.actionRemove_cell.setObjectName(_fromUtf8("actionRemove_cell"))
        self.actionEdit_timing = QtGui.QAction(TrackingWindow)
        self.actionEdit_timing.setObjectName(_fromUtf8("actionEdit_timing"))
        self.actionCompute_growth = QtGui.QAction(TrackingWindow)
        self.actionCompute_growth.setObjectName(_fromUtf8("actionCompute_growth"))
        self.actionPlot_growth = QtGui.QAction(TrackingWindow)
        self.actionPlot_growth.setObjectName(_fromUtf8("actionPlot_growth"))
        self.actionPlot_graph = QtGui.QAction(TrackingWindow)
        self.actionPlot_graph.setObjectName(_fromUtf8("actionPlot_graph"))
        self.actionClean_cells = QtGui.QAction(TrackingWindow)
        self.actionClean_cells.setObjectName(_fromUtf8("actionClean_cells"))
        self.actionGotoCell = QtGui.QAction(TrackingWindow)
        self.actionGotoCell.setObjectName(_fromUtf8("actionGotoCell"))
        self.actionGotoPoint = QtGui.QAction(TrackingWindow)
        self.actionGotoPoint.setObjectName(_fromUtf8("actionGotoPoint"))
        self.actionSelectPreviousNew = QtGui.QAction(TrackingWindow)
        self.actionSelectPreviousNew.setObjectName(_fromUtf8("actionSelectPreviousNew"))
        self.actionSelectCurrentNew = QtGui.QAction(TrackingWindow)
        self.actionSelectCurrentNew.setObjectName(_fromUtf8("actionSelectCurrentNew"))
        self.actionReset_alignment = QtGui.QAction(TrackingWindow)
        self.actionReset_alignment.setObjectName(_fromUtf8("actionReset_alignment"))
        self.actionEdit_scales = QtGui.QAction(TrackingWindow)
        self.actionEdit_scales.setObjectName(_fromUtf8("actionEdit_scales"))
        self.menu_File.addAction(self.action_Open_project)
        self.menu_File.addAction(self.actionRecent_projects)
        self.menu_File.addAction(self.actionNew_data_file)
        self.menu_File.addAction(self.action_Change_data_file)
        self.menu_File.addAction(self.action_Save)
        self.menu_File.addAction(self.actionSave_as)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.action_Quit)
        self.menuView.addAction(self.action_Show_vector)
        self.menuView.addAction(self.action_Show_template)
        self.menuView.addAction(self.actionShow_id)
        self.menuView.addSeparator()
        self.menuView.addAction(self.action_Estimate_position)
        self.menuView.addAction(self.action_Parameters)
        self.menu_Actions.addAction(self.action_Undo)
        self.menu_Actions.addAction(self.action_Redo)
        self.menu_Actions.addSeparator()
        self.menu_Actions.addAction(self.action_Pan)
        self.menu_Actions.addAction(self.actionAdd_point)
        self.menu_Actions.addAction(self.action_Move_point)
        self.menu_Actions.addAction(self.actionAdd_cell)
        self.menu_Actions.addAction(self.actionRemove_cell)
        self.menu_Actions.addSeparator()
        self.menu_Actions.addAction(self.action_Next_image)
        self.menu_Actions.addAction(self.action_Previous_image)
        self.menu_Actions.addAction(self.actionCopy_from_previous)
        self.menu_Actions.addAction(self.actionCopy_from_current)
        self.menu_Actions.addAction(self.actionMerge_points)
        self.menu_Actions.addSeparator()
        self.menu_Actions.addAction(self.actionReset_alignment)
        self.menu_Actions.addAction(self.actionAlign_images)
        self.menu_Actions.addAction(self.actionClean_cells)
        self.menu_View.addAction(self.actionZoom_in)
        self.menu_View.addAction(self.actionZoom_out)
        self.menu_View.addAction(self.action_Fit)
        self.menu_View.addAction(self.actionZoom_100)
        self.menu_View.addSeparator()
        self.menu_View.addAction(self.actionGotoCell)
        self.menu_View.addAction(self.actionGotoPoint)
        self.menuPrevious_state.addAction(self.actionSelectPreviousAll)
        self.menuPrevious_state.addAction(self.actionSelectPreviousNew)
        self.menuPrevious_state.addAction(self.actionSelectPreviousNone)
        self.menuPrevious_state.addAction(self.actionSelectPreviousInvert)
        self.menuPrevious_state.addSeparator()
        self.menuPrevious_state.addAction(self.actionSelectPreviousNon_associated)
        self.menuPrevious_state.addAction(self.actionSelectPreviousAssociated)
        self.menuPrevious_state.addSeparator()
        self.menuPrevious_state.addAction(self.actionCopy_selection_from_Current)
        self.menuPrevious_state.addAction(self.actionDelete_Previous)
        self.menuCurrent_state.addAction(self.actionSelectCurrentAll)
        self.menuCurrent_state.addAction(self.actionSelectCurrentNew)
        self.menuCurrent_state.addAction(self.actionSelectCurrentNone)
        self.menuCurrent_state.addAction(self.actionSelectCurrentInvert)
        self.menuCurrent_state.addSeparator()
        self.menuCurrent_state.addAction(self.actionSelectCurrentNon_associated)
        self.menuCurrent_state.addAction(self.actionSelectCurrentAssociated)
        self.menuCurrent_state.addSeparator()
        self.menuCurrent_state.addAction(self.actionCopy_selection_from_Previous)
        self.menuCurrent_state.addAction(self.actionDelete_Current)
        self.menu_Selection.addAction(self.menuPrevious_state.menuAction())
        self.menu_Selection.addAction(self.menuCurrent_state.menuAction())
        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addAction(self.actionAbout_Qt)
        self.menuA_nalysis.addAction(self.actionEdit_scales)
        self.menuA_nalysis.addAction(self.actionEdit_timing)
        self.menuA_nalysis.addAction(self.actionCompute_growth)
        self.menuA_nalysis.addAction(self.actionPlot_growth)
        self.menuA_nalysis.addAction(self.actionPlot_graph)
        self.menubar.addAction(self.menu_File.menuAction())
        self.menubar.addAction(self.menu_Actions.menuAction())
        self.menubar.addAction(self.menu_Selection.menuAction())
        self.menubar.addAction(self.menu_View.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuA_nalysis.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.globalToolbar.addAction(self.action_Open_project)
        self.globalToolbar.addAction(self.action_Save)
        self.globalToolbar.addAction(self.action_Quit)
        self.globalToolbar.addSeparator()
        self.globalToolbar.addAction(self.action_Undo)
        self.globalToolbar.addAction(self.action_Redo)
        self.globalToolbar.addSeparator()
        self.globalToolbar.addAction(self.action_Parameters)
        self.globalToolbar.addAction(self.action_Show_template)
        self.editToolbar.addAction(self.action_Previous_image)
        self.editToolbar.addAction(self.action_Next_image)
        self.editToolbar.addAction(self.actionMerge_points)
        self.toolsToolbar.addAction(self.action_Pan)
        self.toolsToolbar.addAction(self.actionAdd_point)
        self.toolsToolbar.addAction(self.action_Move_point)
        self.toolsToolbar.addAction(self.actionAdd_cell)
        self.toolsToolbar.addAction(self.actionRemove_cell)
        self.toolsToolbar.addSeparator()
        self.toolsToolbar.addAction(self.actionZoom_in)
        self.toolsToolbar.addAction(self.actionZoom_out)
        self.toolsToolbar.addAction(self.action_Fit)
        self.toolsToolbar.addAction(self.actionZoom_100)

        self.retranslateUi(TrackingWindow)
        QtCore.QObject.connect(self.action_Quit, QtCore.SIGNAL(_fromUtf8("triggered()")), TrackingWindow.close)
        QtCore.QMetaObject.connectSlotsByName(TrackingWindow)
        TrackingWindow.setTabOrder(self.previousState, self.currentState)
        TrackingWindow.setTabOrder(self.currentState, self.previousData)
        TrackingWindow.setTabOrder(self.previousData, self.currentData)
        TrackingWindow.setTabOrder(self.currentData, self.copyToCurrent)
        TrackingWindow.setTabOrder(self.copyToCurrent, self.copyToPrevious)

    def retranslateUi(self, TrackingWindow):
        TrackingWindow.setWindowTitle(_translate("TrackingWindow", "Point Tracker", None))
        self.label.setText(_translate("TrackingWindow", "Previous state", None))
        self.copyToCurrent.setToolTip(_translate("TrackingWindow", "Copy new points to current state", None))
        self.copyToCurrent.setStatusTip(_translate("TrackingWindow", "Copy new points to previous state", None))
        self.copyToCurrent.setText(_translate("TrackingWindow", ">>", None))
        self.linkViews.setToolTip(_translate("TrackingWindow", "Link the views", None))
        self.linkViews.setStatusTip(_translate("TrackingWindow", "Link the views together so that they both show the same area of the images.", None))
        self.copyToPrevious.setToolTip(_translate("TrackingWindow", "Copy new points to previous state", None))
        self.copyToPrevious.setStatusTip(_translate("TrackingWindow", "Copy new points to previous state", None))
        self.copyToPrevious.setText(_translate("TrackingWindow", "<<", None))
        self.label_2.setText(_translate("TrackingWindow", "Current state", None))
        self.menu_File.setTitle(_translate("TrackingWindow", "&File", None))
        self.menuView.setTitle(_translate("TrackingWindow", "&Options", None))
        self.menu_Actions.setTitle(_translate("TrackingWindow", "Ac&tions", None))
        self.menu_View.setTitle(_translate("TrackingWindow", "&View", None))
        self.menu_Selection.setTitle(_translate("TrackingWindow", "&Selection", None))
        self.menuPrevious_state.setTitle(_translate("TrackingWindow", "Previous state", None))
        self.menuCurrent_state.setTitle(_translate("TrackingWindow", "Current state", None))
        self.menuHelp.setTitle(_translate("TrackingWindow", "Help", None))
        self.menuA_nalysis.setTitle(_translate("TrackingWindow", "A&nalysis", None))
        self.globalToolbar.setWindowTitle(_translate("TrackingWindow", "toolBar", None))
        self.editToolbar.setWindowTitle(_translate("TrackingWindow", "toolBar_2", None))
        self.toolsToolbar.setWindowTitle(_translate("TrackingWindow", "toolBar", None))
        self.action_Open_project.setText(_translate("TrackingWindow", "&Open project", None))
        self.action_Open_project.setStatusTip(_translate("TrackingWindow", "Open a new or existing project", None))
        self.action_Open_project.setShortcut(_translate("TrackingWindow", "Ctrl+O", None))
        self.action_Save.setText(_translate("TrackingWindow", "&Save", None))
        self.action_Save.setStatusTip(_translate("TrackingWindow", "Save  current project", None))
        self.action_Save.setShortcut(_translate("TrackingWindow", "Ctrl+S", None))
        self.actionSave_as.setText(_translate("TrackingWindow", "Save &as", None))
        self.actionSave_as.setStatusTip(_translate("TrackingWindow", "Save current project under a different name", None))
        self.action_Quit.setText(_translate("TrackingWindow", "&Quit", None))
        self.action_Quit.setStatusTip(_translate("TrackingWindow", "Quit the application", None))
        self.action_Quit.setShortcut(_translate("TrackingWindow", "Ctrl+Q", None))
        self.action_Change_data_file.setText(_translate("TrackingWindow", "&Change data file", None))
        self.action_Change_data_file.setStatusTip(_translate("TrackingWindow", "Change the directory containing the data (i.e. the points)", None))
        self.action_Change_data_file.setShortcut(_translate("TrackingWindow", "Ctrl+D", None))
        self.action_Show_vector.setText(_translate("TrackingWindow", "Show &vector", None))
        self.action_Show_template.setText(_translate("TrackingWindow", "Show &template", None))
        self.action_Show_template.setStatusTip(_translate("TrackingWindow", "Show an editable template", None))
        self.actionShow_id.setText(_translate("TrackingWindow", "Show &id", None))
        self.action_Next_image.setText(_translate("TrackingWindow", "&Next image", None))
        self.action_Next_image.setStatusTip(_translate("TrackingWindow", "Select the next pair of images", None))
        self.action_Next_image.setShortcut(_translate("TrackingWindow", "Ctrl+Right", None))
        self.action_Previous_image.setText(_translate("TrackingWindow", "&Previous image", None))
        self.action_Previous_image.setStatusTip(_translate("TrackingWindow", "Select the previous pair of images", None))
        self.action_Previous_image.setShortcut(_translate("TrackingWindow", "Ctrl+Left", None))
        self.action_Estimate_position.setText(_translate("TrackingWindow", "&Estimate position on copy", None))
        self.action_Undo.setText(_translate("TrackingWindow", "&Undo", None))
        self.action_Undo.setStatusTip(_translate("TrackingWindow", "Undo last action", None))
        self.action_Undo.setShortcut(_translate("TrackingWindow", "Ctrl+Z", None))
        self.action_Redo.setText(_translate("TrackingWindow", "&Redo", None))
        self.action_Redo.setStatusTip(_translate("TrackingWindow", "Redo last action", None))
        self.action_Redo.setShortcut(_translate("TrackingWindow", "Ctrl+Y", None))
        self.action_Parameters.setText(_translate("TrackingWindow", "&Parameters", None))
        self.actionZoom_in.setText(_translate("TrackingWindow", "Zoom &in", None))
        self.actionZoom_in.setStatusTip(_translate("TrackingWindow", "Zoom in", None))
        self.actionZoom_in.setShortcut(_translate("TrackingWindow", "Ctrl++", None))
        self.actionZoom_out.setText(_translate("TrackingWindow", "Zoom &out", None))
        self.actionZoom_out.setStatusTip(_translate("TrackingWindow", "Zoom out", None))
        self.actionZoom_out.setShortcut(_translate("TrackingWindow", "Ctrl+-", None))
        self.action_Fit.setText(_translate("TrackingWindow", "&Fit", None))
        self.action_Fit.setStatusTip(_translate("TrackingWindow", "Fit the whole image in the view", None))
        self.action_Fit.setShortcut(_translate("TrackingWindow", "Ctrl+X", None))
        self.actionZoom_100.setText(_translate("TrackingWindow", "Zoom 100%", None))
        self.actionZoom_100.setStatusTip(_translate("TrackingWindow", "Set the zoom to 100%", None))
        self.actionZoom_100.setShortcut(_translate("TrackingWindow", "Ctrl+=", None))
        self.actionAdd_point.setText(_translate("TrackingWindow", "Add &points", None))
        self.actionAdd_point.setStatusTip(_translate("TrackingWindow", "Add new points", None))
        self.actionAdd_point.setShortcut(_translate("TrackingWindow", "Alt+A", None))
        self.action_Move_point.setText(_translate("TrackingWindow", "&Move points", None))
        self.action_Move_point.setStatusTip(_translate("TrackingWindow", "Select points to move or delete them", None))
        self.action_Move_point.setShortcut(_translate("TrackingWindow", "Alt+M", None))
        self.action_Pan.setText(_translate("TrackingWindow", "&Pan", None))
        self.action_Pan.setStatusTip(_translate("TrackingWindow", "Pan the view", None))
        self.action_Pan.setShortcut(_translate("TrackingWindow", "Alt+P", None))
        self.actionRecent_projects.setText(_translate("TrackingWindow", "&Recent projects", None))
        self.actionSize_of_points.setText(_translate("TrackingWindow", "Size of points ...", None))
        self.actionCopy_from_previous.setText(_translate("TrackingWindow", "Copy from previous", None))
        self.actionCopy_from_current.setText(_translate("TrackingWindow", "Copy from current", None))
        self.actionSelectPreviousAll.setText(_translate("TrackingWindow", "All", None))
        self.actionSelectPreviousNone.setText(_translate("TrackingWindow", "None", None))
        self.actionSelectPreviousNon_associated.setText(_translate("TrackingWindow", "Non associated", None))
        self.actionSelectPreviousAssociated.setText(_translate("TrackingWindow", "Associated", None))
        self.actionSelectPreviousInvert.setText(_translate("TrackingWindow", "Invert", None))
        self.actionSelectCurrentAll.setText(_translate("TrackingWindow", "All", None))
        self.actionSelectCurrentNone.setText(_translate("TrackingWindow", "None", None))
        self.actionSelectCurrentNon_associated.setText(_translate("TrackingWindow", "Non associated", None))
        self.actionSelectCurrentAssociated.setText(_translate("TrackingWindow", "Associated", None))
        self.actionSelectCurrentInvert.setText(_translate("TrackingWindow", "Invert", None))
        self.actionDelete_Current.setText(_translate("TrackingWindow", "Delete ...", None))
        self.actionMerge_points.setText(_translate("TrackingWindow", "Merge points", None))
        self.actionMerge_points.setShortcut(_translate("TrackingWindow", "Ctrl+M", None))
        self.actionCopy_selection_from_Current.setText(_translate("TrackingWindow", "Copy from Current", None))
        self.actionCopy_selection_from_Previous.setText(_translate("TrackingWindow", "Copy from Previous", None))
        self.actionDelete_Previous.setText(_translate("TrackingWindow", "Delete ...", None))
        self.actionNew_data_file.setText(_translate("TrackingWindow", "New data file", None))
        self.actionAlign_images.setText(_translate("TrackingWindow", "Align images", None))
        self.actionAlign_images.setShortcut(_translate("TrackingWindow", "Ctrl+Shift+A", None))
        self.actionAbout.setText(_translate("TrackingWindow", "&About", None))
        self.actionAbout_Qt.setText(_translate("TrackingWindow", "About &Qt", None))
        self.actionAdd_cell.setText(_translate("TrackingWindow", "Add cell", None))
        self.actionAdd_cell.setShortcut(_translate("TrackingWindow", "Alt+C", None))
        self.actionRemove_cell.setText(_translate("TrackingWindow", "Remove cell", None))
        self.actionRemove_cell.setShortcut(_translate("TrackingWindow", "Alt+D", None))
        self.actionEdit_timing.setText(_translate("TrackingWindow", "Edit timing", None))
        self.actionCompute_growth.setText(_translate("TrackingWindow", "Compute growth", None))
        self.actionPlot_growth.setText(_translate("TrackingWindow", "Plot on image", None))
        self.actionPlot_graph.setText(_translate("TrackingWindow", "Plot graph", None))
        self.actionClean_cells.setText(_translate("TrackingWindow", "Clean cells", None))
        self.actionGotoCell.setText(_translate("TrackingWindow", "Goto cell ...", None))
        self.actionGotoCell.setShortcut(_translate("TrackingWindow", "Ctrl+G", None))
        self.actionGotoPoint.setText(_translate("TrackingWindow", "Goto point ...", None))
        self.actionGotoPoint.setShortcut(_translate("TrackingWindow", "Ctrl+P", None))
        self.actionSelectPreviousNew.setText(_translate("TrackingWindow", "New", None))
        self.actionSelectCurrentNew.setText(_translate("TrackingWindow", "New", None))
        self.actionReset_alignment.setText(_translate("TrackingWindow", "Reset alignment", None))
        self.actionEdit_scales.setText(_translate("TrackingWindow", "Edit scales", None))

from trackingview import TrackingView
from . import icons_rc
