diff --git a/CMakeLists.txt b/CMakeLists.txt
index 41ef18c..833e0bb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,3 +1,7 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 # ======================================================================
 #  artdaq-core main build file
 #
@@ -71,3 +75,5 @@ add_subdirectory(ups)
 
 # packaging utility
 include(UseCPack)
+
+ENDIF()
diff --git a/altCMakeLists.cmake b/altCMakeLists.cmake
new file mode 100644
index 0000000..62a7892
--- /dev/null
+++ b/altCMakeLists.cmake
@@ -0,0 +1,61 @@
+cmake_minimum_required (VERSION 2.8.12)
+
+project(artdaq-core)
+set(artdaq-core_VERSION 1.04.07)
+include(CMakePackageConfigHelpers)
+include(GNUInstallDirs)
+include(CheckCXXCompilerFlag)
+set(BASE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/BuildProducts")
+set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${BASE_OUTPUT_DIRECTORY}/${CMAKE_INSTALL_BINDIR}")
+set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${BASE_OUTPUT_DIRECTORY}/${CMAKE_INSTALL_LIBDIR}")
+set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${BASE_OUTPUT_DIRECTORY}/${CMAKE_INSTALL_LIBDIR}")
+
+list(INSERT CMAKE_MODULE_PATH 0 ${CMAKE_CURRENT_LIST_DIR})
+
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y -O3 -g -DNDEBUG -fno-omit-frame-pointer")
+
+
+find_package(FNALCore 0.1.0 REQUIRED)
+find_package(art 1.11.3 REQUIRED)
+include(artTools)
+find_package(Boost 1.55.0 REQUIRED)
+find_package(CLHEP 2.2.0.3 REQUIRED)
+find_package(ROOT 5.34.20 REQUIRED)
+set(ROOTCINT ${ROOT_rootcint_CMD})
+
+
+include_directories ( ${CMAKE_SOURCE_DIR} )
+include_directories(${FNALCore_INCLUDE_DIRS})
+include_directories(${art_INCLUDE_DIRS})
+include_directories(${Boost_INCLUDE_DIRS})
+
+add_subdirectory(artdaq-core)
+
+configure_package_config_file(
+  artdaq-coreConfig.cmake.in
+  ${CMAKE_CURRENT_BINARY_DIR}/artdaq-coreConfig.cmake
+  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/artdaq-core-${artdaq-core_VERSION}
+    PATH_VARS
+    CMAKE_INSTALL_INCLUDEDIR
+    CMAKE_INSTALL_LIBDIR
+  )
+
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/artdaq-coreConfigVersion.cmake
+  VERSION ${artdaq-core_VERSION}
+  COMPATIBILITY AnyNewerVersion
+  )
+
+install(FILES
+  ${CMAKE_CURRENT_BINARY_DIR}/artdaq-coreConfig.cmake
+  ${CMAKE_CURRENT_BINARY_DIR}/artdaq-coreConfigVersion.cmake
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/artdaq-core-${artdaq-core_VERSION}
+  COMPONENT Development
+  )
+
+install(EXPORT artdaq-coreLibraries
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/artdaq-core-${artdaq-core_VERSION}
+  NAMESPACE artdaq-core::
+  COMPONENT Development
+  )
+
diff --git a/artdaq-core/ArtModules/CMakeLists.txt b/artdaq-core/ArtModules/CMakeLists.txt
index 66202c0..ec4adcb 100644
--- a/artdaq-core/ArtModules/CMakeLists.txt
+++ b/artdaq-core/ArtModules/CMakeLists.txt
@@ -1,3 +1,7 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 
 simple_plugin(ArtdaqCoreBuildInfo "module"
   artdaq-core_BuildInfo
@@ -14,3 +18,5 @@ simple_plugin(PrintBuildInfo "module"
 
 install_headers()
 install_source()
+
+ENDIF()
diff --git a/artdaq-core/ArtModules/altCMakeLists.cmake b/artdaq-core/ArtModules/altCMakeLists.cmake
new file mode 100644
index 0000000..dd73455
--- /dev/null
+++ b/artdaq-core/ArtModules/altCMakeLists.cmake
@@ -0,0 +1,18 @@
+art_add_module( artdaq-core_ArtModules_ArtdaqCoreBuildInfo_module ArtdaqCoreBuildInfo_module.cc )
+
+art_add_module( artdaq-core_ArtModules_PrintBuildInfo_module PrintBuildInfo_module.cc )
+
+install(TARGETS
+     artdaq-core_ArtModules_ArtdaqCoreBuildInfo_module
+     artdaq-core_ArtModules_PrintBuildInfo_module
+     EXPORT artdaq-coreLibraries
+     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     COMPONENT Runtime 
+     )
+
+install(FILES BuildInfo_module.hh DESTINATION
+     ${CMAKE_INSTALL_INCLUDEDIR}/artdaq-core/ArtModules COMPONENT Development)
+
+
diff --git a/artdaq-core/BuildInfo/CMakeLists.txt b/artdaq-core/BuildInfo/CMakeLists.txt
index 9d88a20..72bdfc2 100644
--- a/artdaq-core/BuildInfo/CMakeLists.txt
+++ b/artdaq-core/BuildInfo/CMakeLists.txt
@@ -1,3 +1,7 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 # project name
 project(artdaq-core_BuildInfo)
 
@@ -16,3 +20,5 @@ art_make_library( LIBRARY_NAME artdaq-core_BuildInfo
 
 install_headers()
 install_source()
+
+ENDIF()
diff --git a/artdaq-core/BuildInfo/altCMakeLists.cmake b/artdaq-core/BuildInfo/altCMakeLists.cmake
new file mode 100644
index 0000000..f4299bb
--- /dev/null
+++ b/artdaq-core/BuildInfo/altCMakeLists.cmake
@@ -0,0 +1,29 @@
+# project name
+project(artdaq-core_BuildInfo)
+
+# the utcDateTime variable is used by the GetPackageBuildInfo code
+# to report the build datetime
+execute_process( COMMAND "date" "-u" "+%d-%b-%Y %H:%M:%S %Z" OUTPUT_VARIABLE rawUTCDate )
+string( STRIP ${rawUTCDate} utcDateTime )
+
+configure_file ( ${CMAKE_CURRENT_SOURCE_DIR}/GetPackageBuildInfo.cc.in
+  ${CMAKE_CURRENT_BINARY_DIR}/GetPackageBuildInfo.cc @ONLY )
+
+
+add_library(artdaq-core_BuildInfo SHARED
+     ${CMAKE_CURRENT_BINARY_DIR}/GetPackageBuildInfo.cc
+     )
+
+install(TARGETS
+     artdaq-core_BuildInfo
+     EXPORT artdaq-coreLibraries
+     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     COMPONENT Runtime 
+     )
+
+install(FILES GetPackageBuildInfo.hh DESTINATION
+     ${CMAKE_INSTALL_INCLUDEDIR}/artdaq-core/BuildInfo COMPONENT Development)
+
+
diff --git a/artdaq-core/CMakeLists.txt b/artdaq-core/CMakeLists.txt
index 9d7663a..f3f2675 100644
--- a/artdaq-core/CMakeLists.txt
+++ b/artdaq-core/CMakeLists.txt
@@ -1,6 +1,12 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 add_subdirectory(Utilities)
 add_subdirectory(Data)
 add_subdirectory(Core)
 add_subdirectory(Generators)
 add_subdirectory(BuildInfo)
 add_subdirectory(ArtModules)
+
+ENDIF()
diff --git a/artdaq-core/Core/CMakeLists.txt b/artdaq-core/Core/CMakeLists.txt
index 8cfe175..b0b9da8 100644
--- a/artdaq-core/Core/CMakeLists.txt
+++ b/artdaq-core/Core/CMakeLists.txt
@@ -1,3 +1,7 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 # ======================================================================
 #
 # Build/install script
@@ -17,3 +21,5 @@ art_make(
 
 install_headers()
 install_source()
+
+ENDIF()
diff --git a/artdaq-core/Core/altCMakeLists.cmake b/artdaq-core/Core/altCMakeLists.cmake
new file mode 100644
index 0000000..1b7b8c4
--- /dev/null
+++ b/artdaq-core/Core/altCMakeLists.cmake
@@ -0,0 +1,37 @@
+
+set(Core_HEADERS
+     ConcurrentQueue.hh
+     GlobalQueue.hh
+     MonitoredQuantity.hh
+     SimpleQueueReader.hh
+     StatisticsCollection.hh
+     )
+
+set(Core_SOURCES
+     GlobalQueue.cc
+     MonitoredQuantity.cc
+     SimpleQueueReader.cc
+     StatisticsCollection.cc
+     )
+
+add_library(artdaq-core_Core SHARED
+     ${Core_HEADERS}
+     ${Core_SOURCES}
+     )
+
+target_link_libraries(artdaq-core_Core
+     FNALCore::FNALCore
+     )
+
+install(TARGETS
+     artdaq-core_Core
+     EXPORT artdaq-coreLibraries
+     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     COMPONENT Runtime 
+     )
+
+install(FILES ${Core_HEADERS} DESTINATION
+     ${CMAKE_INSTALL_INCLUDEDIR}/artdaq-core/Core COMPONENT Development)
+
diff --git a/artdaq-core/Data/CMakeLists.txt b/artdaq-core/Data/CMakeLists.txt
index 582d562..7842b02 100644
--- a/artdaq-core/Data/CMakeLists.txt
+++ b/artdaq-core/Data/CMakeLists.txt
@@ -1,3 +1,7 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 art_make(
   LIB_LIBRARIES
   ${ART_PERSISTENCY_COMMON}
@@ -7,3 +11,5 @@ art_make(
 
 install_headers(SUBDIRS detail)
 install_source(SUBDIRS detail)
+
+ENDIF()
diff --git a/artdaq-core/Data/altCMakeLists.cmake b/artdaq-core/Data/altCMakeLists.cmake
new file mode 100644
index 0000000..6c60221
--- /dev/null
+++ b/artdaq-core/Data/altCMakeLists.cmake
@@ -0,0 +1,50 @@
+set( Data_HEADERS
+     Fragment.hh
+     Fragments.hh
+     PackageBuildInfo.hh
+     QuickVec.hh
+     RawEvent.hh
+     dictionarycontrol.hh
+     )
+
+set( Data_detail_HEADERS
+     detail/RawFragmentHeader.hh
+     )
+
+set( Data_SOURCES
+     Fragment.cc
+     RawEvent.cc
+     )
+
+add_library(artdaq-core_Data SHARED
+     ${Data_HEADERS}
+     ${Data_detail_HEADERS}
+     ${Data_SOURCES}
+     )
+
+target_link_libraries( artdaq-core_Data 
+     FNALCore::FNALCore
+     art::art_Persistency_Provenance
+     art::art_Utilities
+     )
+
+art_add_dictionary()
+
+install(TARGETS
+     artdaq-core_Data
+     artdaq-core_Data_map
+     artdaq-core_Data_dict
+     EXPORT artdaq-coreLibraries
+     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     COMPONENT Runtime 
+     )
+
+install(FILES ${Data_HEADERS} DESTINATION
+     ${CMAKE_INSTALL_INCLUDEDIR}/artdaq-core/Data COMPONENT Development)
+
+install(FILES ${Data_detail_HEADERS} DESTINATION
+     ${CMAKE_INSTALL_INCLUDEDIR}/artdaq-core/Data/detail COMPONENT Development)
+
+
diff --git a/artdaq-core/Generators/CMakeLists.txt b/artdaq-core/Generators/CMakeLists.txt
index f156f1f..8402378 100644
--- a/artdaq-core/Generators/CMakeLists.txt
+++ b/artdaq-core/Generators/CMakeLists.txt
@@ -1,3 +1,7 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 art_make(
   LIB_LIBRARIES
   artdaq-core_Data
@@ -11,3 +15,5 @@ art_make(
 
 install_headers()
 install_source()
+
+ENDIF()
diff --git a/artdaq-core/Generators/altCMakeLists.cmake b/artdaq-core/Generators/altCMakeLists.cmake
new file mode 100644
index 0000000..63dc1c6
--- /dev/null
+++ b/artdaq-core/Generators/altCMakeLists.cmake
@@ -0,0 +1,35 @@
+set(Generators_HEADERS
+     FragmentGenerator.hh
+     GeneratorMacros.hh
+     makeFragmentGenerator.hh
+     )
+
+set(Generators_SOURCES
+     makeFragmentGenerator.cc
+     )
+
+add_library(artdaq-core_Generators SHARED
+     ${Generators_HEADERS}
+     ${Generators_SOURCES}
+     )
+
+target_link_libraries(artdaq-core_Generators
+     artdaq-core_Data
+     FNALCore::FNALCore
+     art::art_Persistency_Provenance
+     art::art_Utilities
+     )
+
+install(TARGETS
+     artdaq-core_Generators
+     EXPORT artdaq-coreLibraries
+     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     COMPONENT Runtime 
+     )
+
+install(FILES ${Generators_HEADERS} DESTINATION
+     ${CMAKE_INSTALL_INCLUDEDIR}/artdaq-core/Generators COMPONENT Development)
+
+
diff --git a/artdaq-core/Utilities/CMakeLists.txt b/artdaq-core/Utilities/CMakeLists.txt
index db65331..4c0dbb0 100644
--- a/artdaq-core/Utilities/CMakeLists.txt
+++ b/artdaq-core/Utilities/CMakeLists.txt
@@ -1,3 +1,7 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 art_make(
   LIB_LIBRARIES
   ${FHICLCPP}
@@ -7,3 +11,5 @@ art_make(
 
 install_headers()
 install_source()
+
+ENDIF()
diff --git a/artdaq-core/Utilities/altCMakeLists.cmake b/artdaq-core/Utilities/altCMakeLists.cmake
new file mode 100644
index 0000000..0521397
--- /dev/null
+++ b/artdaq-core/Utilities/altCMakeLists.cmake
@@ -0,0 +1,36 @@
+
+set( Utilities_HEADERS
+     SimpleLookupPolicy.h
+     TimeUtils.h
+     )
+
+set( Utilities_SOURCES
+     SimpleLookupPolicy.cc
+     TimeUtils.cc
+     )
+
+add_library(artdaq-core_Utilities SHARED
+     ${Utilities_HEADERS}
+     ${Utilities_SOURCES}
+     )
+
+target_link_libraries(artdaq-core_Utilities
+     FNALCore::FNALCore
+     art::art_Persistency_Provenance
+     art::art_Utilities
+     )
+
+install(TARGETS
+     artdaq-core_Utilities
+     EXPORT artdaq-coreLibraries
+     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+     COMPONENT Runtime 
+     )
+
+install(FILES ${Utilities_HEADERS} DESTINATION
+     ${CMAKE_INSTALL_INCLUDEDIR}/artdaq-core/Utilities COMPONENT Development)
+
+
+
diff --git a/artdaq-core/altCMakeLists.cmake b/artdaq-core/altCMakeLists.cmake
new file mode 100644
index 0000000..9d7663a
--- /dev/null
+++ b/artdaq-core/altCMakeLists.cmake
@@ -0,0 +1,6 @@
+add_subdirectory(Utilities)
+add_subdirectory(Data)
+add_subdirectory(Core)
+add_subdirectory(Generators)
+add_subdirectory(BuildInfo)
+add_subdirectory(ArtModules)
diff --git a/artdaq-coreConfig.cmake.in b/artdaq-coreConfig.cmake.in
new file mode 100644
index 0000000..6435ba1
--- /dev/null
+++ b/artdaq-coreConfig.cmake.in
@@ -0,0 +1,15 @@
+# - artdaq-core CMake package configuration file
+# Minimal for now
+# - API/ABI details
+set(artdaq-core_VERSION @artdaq-core_VERSION@)
+@PACKAGE_INIT@
+set_and_check(artdaq-core_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
+set_and_check(artdaq-core_LIBDIR "@PACKAGE_CMAKE_INSTALL_LIBDIR@")
+# - Third-party details/refinds
+# - Import targets
+set(artdaq-core_IMPORT_NAMESPACE "artdaq-core::")
+
+include("${CMAKE_CURRENT_LIST_DIR}/artdaq-coreLibraries.cmake")
+
+list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_LIST_DIR}")
+
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 95554ae..a89af71 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -1,3 +1,7 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 cet_enable_asserts()
 
 # Make sure tests have correct environment settings.
@@ -8,3 +12,5 @@ cet_test_env("FHICL_FILE_PATH=.")
 
 add_subdirectory(Data)
 add_subdirectory(Generators)
+
+ENDIF()
diff --git a/test/Data/CMakeLists.txt b/test/Data/CMakeLists.txt
index eee8c87..77e2779 100644
--- a/test/Data/CMakeLists.txt
+++ b/test/Data/CMakeLists.txt
@@ -1,3 +1,7 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 
 cet_test(Fragment_t USE_BOOST_UNIT
   LIBRARIES artdaq-core_Data
@@ -6,3 +10,5 @@ cet_test(Fragment_t USE_BOOST_UNIT
 cet_test(RawEvent_t USE_BOOST_UNIT
   LIBRARIES artdaq-core_Data
   )
+
+ENDIF()
diff --git a/test/Data/altCMakeLists.cmake b/test/Data/altCMakeLists.cmake
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/test/Data/altCMakeLists.cmake
@@ -0,0 +1 @@
+
diff --git a/test/Generators/CMakeLists.txt b/test/Generators/CMakeLists.txt
index 059e1af..6a09e3c 100644
--- a/test/Generators/CMakeLists.txt
+++ b/test/Generators/CMakeLists.txt
@@ -1,4 +1,10 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 
 cet_test(FragmentGenerator_t USE_BOOST_UNIT
   LIBRARIES artdaq-core_Generators artdaq-core_Data
   )
+
+ENDIF()
diff --git a/test/Generators/altCMakeLists.cmake b/test/Generators/altCMakeLists.cmake
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/test/Generators/altCMakeLists.cmake
@@ -0,0 +1 @@
+
diff --git a/test/altCMakeLists.cmake b/test/altCMakeLists.cmake
new file mode 100644
index 0000000..13c0939
--- /dev/null
+++ b/test/altCMakeLists.cmake
@@ -0,0 +1,2 @@
+add_subdirectory(Data)
+add_subdirectory(Generators)
diff --git a/ups/CMakeLists.txt b/ups/CMakeLists.txt
index fe33cc7..6951519 100644
--- a/ups/CMakeLists.txt
+++ b/ups/CMakeLists.txt
@@ -1,6 +1,12 @@
+IF (ALT_CMAKE)
+INCLUDE(altCMakeLists.cmake)
+ELSE()
+
 
 # create package configuration and version files
 
 process_ups_files()
 
 cet_cmake_config()
+
+ENDIF()
diff --git a/ups/altCMakeLists.cmake b/ups/altCMakeLists.cmake
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/ups/altCMakeLists.cmake
@@ -0,0 +1 @@
+
