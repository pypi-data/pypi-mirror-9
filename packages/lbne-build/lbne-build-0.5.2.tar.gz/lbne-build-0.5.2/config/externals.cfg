[group g4data]
packages = g4ndl,g4emlow,g4photon,g4radiative,g4neutronxs,g4pii,g4surface,g4said
features = download, unpack
download_target = {native_name}.{version}.tar.gz
download_url = http://geant4.cern.ch/support/source/{download_target}
unpack_archive = {download_target}
unpack_area = {install_dir}
unpack_target = {native_name}{version}/README


[package g4ndl]
version = {g4ndl_version}
native_name = G4NDL

[package g4emlow]
version = {g4emlow_version}
native_name = G4EMLOW

[package g4photon]
version = {g4photon_version}
native_name = G4PhotonEvaporation
unpack_target = PhotonEvaporation{version}/History

[package g4radiative]
version = {g4radiative_version}
native_name = G4RadioactiveDecay
unpack_target = RadioactiveDecay{version}/README_RDM

[package g4neutronxs]
version = {g4neutronxs_version}
native_name = G4NEUTRONXS
unpack_target = {native_name}{version}/History

[package g4pii]
version = {g4pii_version}
native_name = G4PII
unpack_target = {native_name}{version}/documentation.pdf

[package g4surface]
version = {g4surface_version}
native_name = RealSurface
unpack_target = {native_name}{version}/PolishedTyvek.dat

[package g4said]
version = {g4said_version}
native_name = G4SAIDDATA
unpack_target = {native_name}{version}/History



[group externals] 
packages = clhep, doxygen, gccxml, python, pythia, ipython, xercesc, log4cpp, boost, cppunit, fftw, getopt, gsl, mysql, postgresql, libxml2, sqlite, xrootd, root, geant, cry, tbb, genie, lhapdf, pandora
environment = group:buildtools, group:compiler
# todo

# where the hell is this released?  pandora, 
#geniephyopt,geniexsec,geniexsec,ifdhart, ifdhc,pdfsets,


[package boost]
version = {boost_version}
features = tarball, prepare, makemake, modulesfile, upsprod
source_unpacked = {package}_{version_underscore}
source_archive_file = {source_unpacked}.tar.gz
source_url = http://downloads.sourceforge.net/project/boost/boost/{version}/{source_archive_file}
unpacked_target = bootstrap.sh
prepare_cmd = cp -a ../../{source_dir}/{source_unpacked}/* .
prepare_target = bootstrap.sh
build_cmd = ./bootstrap.sh
build_cmd_options = --prefix={install_dir} --without-icu --without-libraries=python,mpi
build_target = b2
install_cmd = ./b2 
install_cmd_options = install cxxflags="-std=c++11 -Wno-deprecated-declarations -fvisibility-inlines-hidden" variant=release
install_target = include/boost/any.hpp
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
ups_qualifiers = {ups_compiler_taint}

[package clhep]
version = {clhep_version}
features = tarball, cmake, makemake, modulesfile, upsprod
prepare_cmd_options = {cmake_cmd_options} -DCMAKE_C_COMPILER={gcc_install_dir}/bin/gcc -DCMAKE_CXX_COMPILER:STRING={gcc_install_dir}/bin/g++ -DCMAKE_F_COMPILER={gcc_install_dir}/bin/gfortran
source_unpacked = {version}/CLHEP
source_archive_file = {package}-{version}.tgz
source_url = http://proj-clhep.web.cern.ch/proj-clhep/DISTRIBUTION/tarFiles/{source_archive_file}
unpacked_target = CMakeLists.txt
build_target = lib/libCLHEP-{version}.a
install_target = lib/libCLHEP-{version}.a
export_PATH = prepend:{install_dir}/bin
ups_qualifiers = {ups_compiler_taint}

[package cppunit]
version = {cppunit_version}
features = tarball, prepare, makemake, modulesfile, upsprod
source_url = http://cgit.freedesktop.org/libreoffice/{package}/snapshot/{source_archive_file}
unpacked_target = configure.in
prepare_cmd = cd ../../{source_dir}/{source_unpacked} && ./autogen.sh && cd {out}/{build_dir} && LDFLAGS="-Wl,-rpath,/usr/lib -ldl" && ../../{source_dir}/{source_unpacked}/configure --prefix={install_dir} && echo
prepare_target = config.status
build_target = src/cppunit/libcppunit.la 
install_target = lib/libcppunit.a
ups_qualifiers = {ups_compiler_taint}

[package cry]
version = {cry_version}
features = tarball, patch, prepare, makemake, modulesfile, upsprod
source_unpacked = {package}_v{version}
source_archive_file = {source_unpacked}.{source_archive_ext}
source_url = http://nuclear.llnl.gov/simulation/{source_archive_file}
patch_url = lbne/{package}-{version}.patch
patch_cmd_options = -p0
unpacked_target = Makefile
prepare_cmd = rsync -auv  ../../{source_dir}/{source_unpacked}/* . --exclude=.git  && echo CXXFLAGS += -O3 -g -DNDEBUG -fno-omit-frame-pointer -fPIC >> Makefile.local
prepare_target = Makefile
build_cmd = make lib
build_target = lib/libCRY.so
install_cmd = rsync -auv ./ {install_dir}/ --exclude=.git
install_cmd_options = 
install_target = lib/libCRY.so
export_CRY_HOME = {install_dir}
ups_qualifiers = {ups_compiler_taint}

[package doxygen]
version = 1.8.8
features = tarball, prepare, makemake, upsprod
source_unpacked = {package}-{version}
source_archive_file = {source_unpacked}.src.tar.gz
source_url = http://ftp.stack.nl/pub/users/dimitri/{source_archive_file}
unpacked_target = configure
# doxygen needs to be built in-source
prepare_cmd = cp -a ../../{source_dir}/{source_unpacked}/* . && ./configure 
prepare_cmd_std_opts = --prefix={install_dir}
prepare_target = Makefile
build_target = bin/doxygen
install_target = bin/doxygen
export_PATH = prepend:{install_dir}/bin

[package fftw]
version = {fftw_version}
source_url = http://www.fftw.org/{source_archive_file}
# fixme: has an --enable-debug
prepare_cmd_options = --enable-shared
unpacked_target = configure
build_target = libfftw3.la
install_target = lib/libfftw3.a


[package geant]
version = {geant_version}
features = tarball, cmake, makemake, modulesfile, upsprod
depends = prepare:xercesc_install, prepare:clhep_install
source_archive_file = {source_unpacked}.tar.gz
source_url = http://geant4.cern.ch/support/source/{source_archive_file}
source_unpacked = {package}{version}
unpacked_target = CMakeLists.txt
# fixme: hardcode compiler name
depends = prepare:xercesc_install
prepare_cmd_options = {cmake_cmd_options} -DG4_ENABLE_CXX11=ON -DBUILD_STATIC_LIBS=ON -DGEANT4_USE_OPENGL_X11=ON -DGEANT4_USE_GDML=ON -DXERCESC_ROOT_DIR:STRING={xercesc_install_dir}  -DGEANT4_BUILD_CXXSTD="c++0x" -DCMAKE_C_COMPILER={gcc_install_dir}/bin/gcc -DCMAKE_CXX_COMPILER={gcc_install_dir}/bin/g++ -DCMAKE_F_COMPILER={gcc_install_dir}/bin/gfortran -DCHLEP_ROOT_DIR:STRING={clhep_install_dir} -DGEANT4_USE_SYSTEM_CHLEP=ON 
build_target = outputs/library/{kernelname}-g++/libG4track.{soext}
install_target = include/Geant4/G4Track.hh
build_cmd = make 
export_G4LIB = {install_dir}/lib
export_GEANT4_FQ_DIR = {install_dir}
export_LD_LIBRARY_PATH = prepend:{install_dir}/{libbits}
export_PATH = prepend:{install_dir}/bin
ups_qualifiers = {ups_compiler_taint}

[package genie]
version = {genie_version}
features = vcs, prepare, makemake, modulesfile, upsprod
vcs_flavor = svn
source_url = http://genie.hepforge.org/svn/branches/R-{version_underscore}
source_unpacked = {package}-{version}
unpacked_target = configure
depends = prepare:lhapdf_install, prepare:root_install
prepare_cmd = cp -r ../../{source_dir}/{source_unpacked}/* . && ./configure
prepare_cmd_options = --prefix={install_dir} --enable-lhapdf --enable-atmo --enable-numi --enable-event-server --enable-nucleon-decay --enable-vle-extension --enable-rwght --with-pythia6-lib={pythia_install_dir}/lib --with-lhapdf-inc={lhapdf_install_dir}/include --with-lhapdf-lib={lhapdf_install_dir}/lib --with-log4cpp-inc={log4cpp_install_dir}/include --with-log4cpp-lib={log4cpp_install_dir}/lib --with-libxml2-inc={libxml2_install_dir}/include/libxml2 --with-libxml2-lib={libxml2_install_dir}/lib
prepare_target = Makefile
build_cmd = make && make utils
build_target = bin/genie
install_target = bin/genie
# why must we set this!?
buildenv_GENIE = set:{out}/{build_dir}
export_GENIE_LIB = {install_dir}/lib
export_GENIE_INC = {install_dir}/include
ups_qualifiers = {ups_compiler_taint}

[package getopt]
version = {getopt_version}
features = tarball, prepare, makemake, modulesfile, upsprod
#, makemake, modulesfile
source_url = http://frodo.looijaard.name/system/files/software/{package}/{source_archive_file}
#http://software.frodo.looijaard.name/{package}/files/{source_archive_file}
unpacked_target = Makefile
# 
prepare_cmd = cp -a ../../{source_dir}/{source_unpacked}/* .
prepare_target = Makefile
build_target = getopt
install_cmd_options = prefix={install_dir}
install_target = bin/getopt

[package gccxml]
version = {gccxml_version}
features = vcs, cmake, patch, makemake, modulesfile, upsprod
patch_url = lbne/{package}-{version}.patch
patch_cmd_options = -d {package}-{version} -p1
depends = unpack:cmake_install
source_url = git://github.com/gccxml/gccxml.git
# sync with gccxml_version !
vcs_tag = b040a46352e4d5c11a0304e4fcb6f7842008942a
vcs_flavor = git
unpacked_target = README.rst
build_target = bin/gccxml
install_target = bin/gccxml
export_PATH = prepend:{install_dir}/bin


[package gsl]
version = {gsl_version}
source_url = http://ftp.gnu.org/gnu/{package}/{source_archive_file}
unpacked_target = configure
build_target = .libs/libgsl.a
install_target = lib/libgsl.a


[package ipython]
version = {ipython_version}
features = tarball, pypackage, modulesfile, upsprod
install_dir = {python_install_dir}
environment = package:python
depends = unpack:python_install
source_url = http://archive.ipython.org/release/{version}/{source_archive_file}
unpacked_target = setup.py
build_target = build/lib/IPython/__init__.py
install_target = bin/ipython


[package log4cpp]
version = {log4cpp_version}
source_unpacked = {package}
source_archive_file = {package}-{version}.{source_archive_ext}
source_url = http://sourceforge.net/projects/log4cpp/files/log4cpp-1.1.x%%20%%28new%%29/log4cpp-1.1/{source_archive_file}
unpacked_target = README
build_target = src/.libs/liblog4cpp.a
install_target = lib/liblog4cpp.{soext}
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
export_LOG4CPP_INC={install_dir}/include
export_LOG4CPP_FQ_DIR={install_dir}
ups_qualifiers = {ups_compiler_taint}

[package lhapdf]
version = {lhapdf_version}
source_url = http://www.hepforge.org/archive/lhapdf/{source_archive_file}
features = tarball, autoconf, makemake, modulesfile, upsprod
unpacked_target = README
prepare_cmd_options = --prefix={install_dir} --enable-low-memory --disable-pyext
build_target = lib/.libs/libLHAPDF.a
install_target = lib/libLHAPDF.a
export_LHAPDF_FQ_DIR = {install_dir}
ups_qualifiers = {ups_compiler_taint}

[package libxml2]
version = {libxml2_version}
source_url = ftp://xmlsoft.org/{package}/{source_archive_file}
depends = prepare:python_install
prepare_cmd_options = --without-python
unpacked_target = configure
build_target = libxml2.la
install_target = lib/libxml2.a
export_LIBXML2_FQ_DIR={install_dir}


[package mysql]
version = {mysql_version}
features = tarball, cmake, makemake, modulesfile, upsprod
# warning: this url is likely dead by the time you use it. freakin' oracle man.
source_url = http://dev.mysql.com/get/Downloads/MySQL-5.6/{source_archive_file}
source_archive_checksum = {mysql_source_archive_checksum}
unpacked_target = CMakeLists.txt
build_target = libmysql/libmysqlclient.a
install_target = lib/libmysqlclient.{soext}
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
export_PATH = prepend:{install_dir}/bin
ups_qualifiers = {ups_compiler_taint}


[package postgresql]
version = {postgresql_version}
environment = group:buildtools, group:compiler, package:python
depends = prepare:python_install
source_archive_ext = tar.bz2
source_url = http://ftp.postgresql.org/pub/source/v{version}/{source_archive_file}
prepare_cmd_options = --with-krb5 --with-gssapi --with-python
unpacked_target = configure
build_target = src/backend/postgres
install_target = bin/postgres
export_PostgreSQL_LIBRARIES = {install_dir}/lib
export_PostgreSQL_INCLUDE_DIRS = {install_dir}/include

[package pythia]
version = {pythia_version}
features = tarball, pythiainst, modulesfile, upsprod
tools = worch.extras.pythia6
source_unpacked = {package}{version}
source_archive_file = {source_unpacked}.tar.gz
source_url = ftp://root.cern.ch/root/{source_archive_file}
build_target = libPythia6.{soext}
install_target = lib/libPythia6.{soext}
export_PYLIB = {install_dir}/lib

[package python]
version = {python_version}
source_unpacked = Python-{version}
source_archive_file = {source_unpacked}.tgz
source_url = http://www.python.org/ftp/{package}/{version}/{source_archive_file}
unpacked_target = README
prepare_cmd_options = --prefix={install_dir} --enable-shared
build_target = python
install_target = bin/python
export_PATH = prepend:{install_dir}/bin
export_PYTHONHOME = set:{install_dir}
# without this, a system-installed package of ROOT will be picked up by PyROOT
# it also has the bad side effect of ignoring any user installed packages in ~/.local/
export_PYTHONNOUSERSITE = set:yes
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib


[package root]
version = {root_version}
environment = group:buildtools, group:compiler, package:xrootd, package:python, package:mysql, package:postgresql, package:gccxml
features = tarball, patch, cmake, makemake, modulesfile, upsprod
depends = prepare:xrootd_install, prepare:python_install, prepare:fftw_install, prepare:libxml2_install, prepare:pythia_install, prepare:mysql_install, prepare:postgresql_install, prepare:gccxml_install
source_url = http://root.cern.ch/download/{source_archive_file}
source_archive_file = {package}_v{version}.source.tar.gz
# fixme: ROOT does not unpack into a version-specific directory.  this
# WILL cause problems if the same build area is shared by multiple
# build types.
source_unpacked = {package}
unpacked_target = CMakeLists.txt
patch_url = lbne/{package}-{version}.patch
patch_cmd_options = -d root -p1
# fixme: hardcodes python2.7.
# need to explicitly set python locations else ROOT picks up other system pythons
prepare_cmd_options = -Dfftw3=ON -Dminuit2=ON -Dc++11=ON -Dxrootd=ON -Dpython=ON -Dgdml=ON -Dxml=ON -Dxft=OFF -DPYTHON_LIBRARY={python_install_dir}/lib/libpython2.7.{soext} -DPYTHON_INCLUDE_DIR={python_install_dir}/include/python2.7 -DPYTHIA6_LIBRARY={pythia_install_dir}/lib/libPythia6.{soext} -DPOSTGRESQL_INCLUDE_DIR={postgresql_install_dir}/include -DPOSTGRESQL_LIBRARIES={postgresql_install_dir}/lib/libpq.{soext} -DMYSQL_CONFIG_EXECUTABLE={mysql_install_dir}/bin/mysql_config -DFFTW_INCLUDE_DIR={fftw_install_dir}/include -DFFTW_LIBRARY={fftw_install_dir}/lib/libfftw3.{soext} -DGCCXML_EXECUTABLE={gccxml_install_dir}/bin/ -DCMAKE_C_COMPILER={gcc_install_dir}/bin/gcc -DCMAKE_CXX_COMPILER:STRING={gcc_install_dir}/bin/g++ -DCMAKE_INSTALL_LIBDIR=lib
build_cmd = make VERBOSE=1
build_target = bin/root.exe
install_target = bin/root.exe
buildenv_VERBOSE = set:1
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
export_PATH = prepend:{install_dir}/bin
export_ROOTSYS = set:{install_dir}
export_PYTHONPATH = prepend:{install_dir}/lib
export_CMAKE_MODULE_PATH = prepend:{install_dir}/etc/cmake
export_CMAKE_PREFIX_PATH = prepend:{install_dir}/cmake
ups_qualifiers = {ups_compiler_taint}


[package tbb]
# this package sucks
version = {tbb_version}
tools = worch.lbne.tbbinst
features = tarball, tbbinst, modulesfile, upsprod
# inconsistently named tarball
source_unpacked = tbb41_20130314oss
srcpkg_ext = tgz
# gratuitious wart _src
source_archive_file = {source_unpacked}_src.{srcpkg_ext}
# TBB web site makes it impossible to directly download, screw 'em and cache ourselves
#source_url = http://threadingbuildingblocks.org/sites/default/files/software_releases/source/{source_archive_file}
#source_url = http://www.phy.bnl.gov/~bviren/lbne/{source_archive_file}
source_url = https://lbne.bnl.gov/packages/source/{source_archive_file}
# gotta do in-source build, trick tarball into unpacking in the build area
source_dir = builds
unpacked_target = Makefile
# Non standard location to build - must match source unpacked
build_dir = builds/{source_unpacked}
# the rest is handled by tbbinst feature
install_target = lib/libtbb.{soext} 
export_TBB_ROOT = {install_dir}
ups_qualifiers = {ups_compiler_taint}


[package sqlite]
version = {sqlite_version}
source_url = http://www.sqlite.org/2014/{package}-autoconf-{sqlite_version_zeros}.tar.gz
source_unpacked = {package}-autoconf-{sqlite_version_zeros}
unpacked_target = configure
build_target = sqlite3
install_target = bin/sqlite3
export_PATH = prepend:{install_dir}/bin


[package xercesc]
environment = group:buildtools, group:compiler
version = {xercesc_version}
native_name = xerces-c
source_unpacked = {native_name}-{version}
source_url = http://www.apache.org/dist/xerces/c/3/sources/{source_archive_file}
unpacked_target = README
build_target = src/libxerces-c.la
install_target = lib/libxerces-c.la
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
export_XERCESCROOT = {install_dir}
export_XERCESC_INC = {install_dir}/include
ups_qualifiers = {ups_compiler_taint}

[package xrootd]
version = {xrootd_version}
features = tarball, cmake, makemake, modulesfile, upsprod
depends = prepare:cmake_install
source_url = http://xrootd.org/download/v{version}/{source_archive_file}
source_url_checksum = md5:8c2a2d66a684a8f4395c02ae249f5706
source_archive_file = {source_unpacked}.tar.gz
buildenv_CXXFLAGS=-O3 -g -DNDEBUG -fno-omit-frame-pointer -std=c++11 -Wno-deprecated-declarations
prepare_cmd_options = -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_C_COMPILER={gcc_install_dir}/bin/gcc -DCMAKE_CXX_COMPILER:STRING={gcc_install_dir}/bin/g++ -DENABLE_PERL=FALSE -DENABLE_LIBEVENT=FALSE
unpacked_target = README
build_target = src/xrdcp
install_target = bin/xrdcp
export_XRDSYS = {install_dir}
ups_qualifiers = {ups_compiler_taint}



[package pandora]
version = {pandora_version}
environment = group:buildtools, group:compiler, package:root
tools = worch.lbne.pandorasrc
features = pandorasrc, patch, prepare, makemake, modulesfile, upsprod
source_url = https://svnsrv.desy.de/public/PandoraPFANew/
vcs_tag = v{version_dashed}
source_unpacked = {package}-{version}
unpacked_target = Makefile
patch_url = lbne/{package}-{version}.patch
patch_cmd_options = -d {package}-{version} -p0
depends = build:root_install
buildenv_PANDORA_DIR = set:{out}/{build_dir}
prepare_cmd = rsync -auv  ../../{source_dir}/{source_unpacked}/* . --exclude=.git --exclude=.svn
prepare_target = Makefile
build_cmd = make -e MONITORING=1
build_target = lib/libPandoraSDK.so
install_cmd = rsync -auv ./ {install_dir}/
install_target = lib/libPandoraSDK.so
export_PANDORA_LIB = {install_dir}/lib
export_PANDORA_FQ_DIR = {install_dir}
ups_qualifiers = {ups_compiler_taint}


[package autoconf]
version = 2.69
source_url = http://ftpmirror.gnu.org/{package}/{package}-{version}.tar.gz
unpacked_target = configure
build_target = bin/autoconf
install_target = bin/autoconf
export_PATH = prepend:{install_dir}/bin

[package automake]
version = 1.14
source_url = http://ftpmirror.gnu.org/{package}/{package}-{version}.tar.gz
depends = prepare:autoconf_install
unpacked_target = configure
build_target = bin/aclocal
install_target = bin/aclocal
export_PATH = prepend:{install_dir}/bin

[package libtool]
version = 2.4.2
source_url = http://ftpmirror.gnu.org/{package}/{package}-{version}.tar.gz
unpacked_target = configure
build_target = libtoolize
install_target = bin/libtoolize
export_PATH = prepend:{install_dir}/bin

