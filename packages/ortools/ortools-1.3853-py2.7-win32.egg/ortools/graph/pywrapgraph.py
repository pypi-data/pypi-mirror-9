# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.3
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywrapgraph', [dirname(__file__)])
        except ImportError:
            import _pywrapgraph
            return _pywrapgraph
        if fp is not None:
            try:
                _mod = imp.load_module('_pywrapgraph', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pywrapgraph = swig_import_helper()
    del swig_import_helper
else:
    import _pywrapgraph
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapgraph.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pywrapgraph.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pywrapgraph.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pywrapgraph.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pywrapgraph.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pywrapgraph.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pywrapgraph.SwigPyIterator_copy(self)

    def next(self):
        return _pywrapgraph.SwigPyIterator_next(self)

    def __next__(self):
        return _pywrapgraph.SwigPyIterator___next__(self)

    def previous(self):
        return _pywrapgraph.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pywrapgraph.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pywrapgraph.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pywrapgraph.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pywrapgraph.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pywrapgraph.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pywrapgraph.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pywrapgraph.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pywrapgraph.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SimpleMaxFlow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleMaxFlow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleMaxFlow, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pywrapgraph.new_SimpleMaxFlow()
        try:
            self.this.append(this)
        except:
            self.this = this

    def AddArcWithCapacity(self, tail, head, capacity):
        return _pywrapgraph.SimpleMaxFlow_AddArcWithCapacity(self, tail, head, capacity)

    def NumNodes(self):
        return _pywrapgraph.SimpleMaxFlow_NumNodes(self)

    def NumArcs(self):
        return _pywrapgraph.SimpleMaxFlow_NumArcs(self)

    def Tail(self, arc):
        return _pywrapgraph.SimpleMaxFlow_Tail(self, arc)

    def Head(self, arc):
        return _pywrapgraph.SimpleMaxFlow_Head(self, arc)

    def Capacity(self, arc):
        return _pywrapgraph.SimpleMaxFlow_Capacity(self, arc)
    OPTIMAL = _pywrapgraph.SimpleMaxFlow_OPTIMAL
    POSSIBLE_OVERFLOW = _pywrapgraph.SimpleMaxFlow_POSSIBLE_OVERFLOW
    BAD_INPUT = _pywrapgraph.SimpleMaxFlow_BAD_INPUT
    BAD_RESULT = _pywrapgraph.SimpleMaxFlow_BAD_RESULT

    def Solve(self, source, sink):
        return _pywrapgraph.SimpleMaxFlow_Solve(self, source, sink)

    def OptimalFlow(self):
        return _pywrapgraph.SimpleMaxFlow_OptimalFlow(self)

    def Flow(self, arc):
        return _pywrapgraph.SimpleMaxFlow_Flow(self, arc)

    def GetSourceSideMinCut(self):
        return _pywrapgraph.SimpleMaxFlow_GetSourceSideMinCut(self)

    def GetSinkSideMinCut(self):
        return _pywrapgraph.SimpleMaxFlow_GetSinkSideMinCut(self)
    __swig_destroy__ = _pywrapgraph.delete_SimpleMaxFlow
    __del__ = lambda self: None
SimpleMaxFlow_swigregister = _pywrapgraph.SimpleMaxFlow_swigregister
SimpleMaxFlow_swigregister(SimpleMaxFlow)

class MinCostFlowBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinCostFlowBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinCostFlowBase, name)
    __repr__ = _swig_repr
    NOT_SOLVED = _pywrapgraph.MinCostFlowBase_NOT_SOLVED
    OPTIMAL = _pywrapgraph.MinCostFlowBase_OPTIMAL
    FEASIBLE = _pywrapgraph.MinCostFlowBase_FEASIBLE
    INFEASIBLE = _pywrapgraph.MinCostFlowBase_INFEASIBLE
    UNBALANCED = _pywrapgraph.MinCostFlowBase_UNBALANCED
    BAD_RESULT = _pywrapgraph.MinCostFlowBase_BAD_RESULT
    BAD_COST_RANGE = _pywrapgraph.MinCostFlowBase_BAD_COST_RANGE

    def __init__(self):
        this = _pywrapgraph.new_MinCostFlowBase()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pywrapgraph.delete_MinCostFlowBase
    __del__ = lambda self: None
MinCostFlowBase_swigregister = _pywrapgraph.MinCostFlowBase_swigregister
MinCostFlowBase_swigregister(MinCostFlowBase)

class SimpleMinCostFlow(MinCostFlowBase):
    __swig_setmethods__ = {}
    for _s in [MinCostFlowBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleMinCostFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [MinCostFlowBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleMinCostFlow, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pywrapgraph.new_SimpleMinCostFlow()
        try:
            self.this.append(this)
        except:
            self.this = this

    def AddArcWithCapacityAndUnitCost(self, tail, head, capacity, unit_cost):
        return _pywrapgraph.SimpleMinCostFlow_AddArcWithCapacityAndUnitCost(self, tail, head, capacity, unit_cost)

    def SetNodeSupply(self, node, supply):
        return _pywrapgraph.SimpleMinCostFlow_SetNodeSupply(self, node, supply)

    def Solve(self):
        return _pywrapgraph.SimpleMinCostFlow_Solve(self)

    def SolveMaxFlowWithMinCost(self):
        return _pywrapgraph.SimpleMinCostFlow_SolveMaxFlowWithMinCost(self)

    def OptimalCost(self):
        return _pywrapgraph.SimpleMinCostFlow_OptimalCost(self)

    def MaximumFlow(self):
        return _pywrapgraph.SimpleMinCostFlow_MaximumFlow(self)

    def Flow(self, arc):
        return _pywrapgraph.SimpleMinCostFlow_Flow(self, arc)

    def NumNodes(self):
        return _pywrapgraph.SimpleMinCostFlow_NumNodes(self)

    def NumArcs(self):
        return _pywrapgraph.SimpleMinCostFlow_NumArcs(self)

    def Tail(self, arc):
        return _pywrapgraph.SimpleMinCostFlow_Tail(self, arc)

    def Head(self, arc):
        return _pywrapgraph.SimpleMinCostFlow_Head(self, arc)

    def Capacity(self, arc):
        return _pywrapgraph.SimpleMinCostFlow_Capacity(self, arc)

    def Supply(self, node):
        return _pywrapgraph.SimpleMinCostFlow_Supply(self, node)

    def UnitCost(self, arc):
        return _pywrapgraph.SimpleMinCostFlow_UnitCost(self, arc)
    __swig_destroy__ = _pywrapgraph.delete_SimpleMinCostFlow
    __del__ = lambda self: None
SimpleMinCostFlow_swigregister = _pywrapgraph.SimpleMinCostFlow_swigregister
SimpleMinCostFlow_swigregister(SimpleMinCostFlow)

class LinearSumAssignment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearSumAssignment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinearSumAssignment, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pywrapgraph.new_LinearSumAssignment()
        try:
            self.this.append(this)
        except:
            self.this = this

    def AddArcWithCost(self, left_node, right_node, cost):
        return _pywrapgraph.LinearSumAssignment_AddArcWithCost(self, left_node, right_node, cost)

    def NumNodes(self):
        return _pywrapgraph.LinearSumAssignment_NumNodes(self)

    def NumArcs(self):
        return _pywrapgraph.LinearSumAssignment_NumArcs(self)

    def LeftNode(self, arc):
        return _pywrapgraph.LinearSumAssignment_LeftNode(self, arc)

    def RightNode(self, arc):
        return _pywrapgraph.LinearSumAssignment_RightNode(self, arc)

    def Cost(self, arc):
        return _pywrapgraph.LinearSumAssignment_Cost(self, arc)
    OPTIMAL = _pywrapgraph.LinearSumAssignment_OPTIMAL
    INFEASIBLE = _pywrapgraph.LinearSumAssignment_INFEASIBLE
    POSSIBLE_OVERFLOW = _pywrapgraph.LinearSumAssignment_POSSIBLE_OVERFLOW

    def Solve(self):
        return _pywrapgraph.LinearSumAssignment_Solve(self)

    def OptimalCost(self):
        return _pywrapgraph.LinearSumAssignment_OptimalCost(self)

    def RightMate(self, left_node):
        return _pywrapgraph.LinearSumAssignment_RightMate(self, left_node)

    def AssignmentCost(self, left_node):
        return _pywrapgraph.LinearSumAssignment_AssignmentCost(self, left_node)
    __swig_destroy__ = _pywrapgraph.delete_LinearSumAssignment
    __del__ = lambda self: None
LinearSumAssignment_swigregister = _pywrapgraph.LinearSumAssignment_swigregister
LinearSumAssignment_swigregister(LinearSumAssignment)

# This file is compatible with both classic and new-style classes.


