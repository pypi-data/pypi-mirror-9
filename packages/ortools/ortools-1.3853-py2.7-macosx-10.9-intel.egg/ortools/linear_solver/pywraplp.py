# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.3
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywraplp', [dirname(__file__)])
        except ImportError:
            import _pywraplp
            return _pywraplp
        if fp is not None:
            try:
                _mod = imp.load_module('_pywraplp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pywraplp = swig_import_helper()
    del swig_import_helper
else:
    import _pywraplp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraplp.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pywraplp.SwigPyIterator_value(self)
    def incr(self, n=1): return _pywraplp.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pywraplp.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pywraplp.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pywraplp.SwigPyIterator_equal(self, *args)
    def copy(self): return _pywraplp.SwigPyIterator_copy(self)
    def next(self): return _pywraplp.SwigPyIterator_next(self)
    def __next__(self): return _pywraplp.SwigPyIterator___next__(self)
    def previous(self): return _pywraplp.SwigPyIterator_previous(self)
    def advance(self, *args): return _pywraplp.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pywraplp.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pywraplp.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pywraplp.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pywraplp.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pywraplp.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pywraplp.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pywraplp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

from ortools.linear_solver.linear_solver_natural_api import LinearExpr
from ortools.linear_solver.linear_solver_natural_api import ProductCst
from ortools.linear_solver.linear_solver_natural_api import Sum
from ortools.linear_solver.linear_solver_natural_api import SumArray
from ortools.linear_solver.linear_solver_natural_api import SumCst
from ortools.linear_solver.linear_solver_natural_api import LinearConstraint

class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    __repr__ = _swig_repr
    CLP_LINEAR_PROGRAMMING = _pywraplp.Solver_CLP_LINEAR_PROGRAMMING
    GLOP_LINEAR_PROGRAMMING = _pywraplp.Solver_GLOP_LINEAR_PROGRAMMING
    CBC_MIXED_INTEGER_PROGRAMMING = _pywraplp.Solver_CBC_MIXED_INTEGER_PROGRAMMING
    def __init__(self, *args): 
        this = _pywraplp.new_Solver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraplp.delete_Solver
    __del__ = lambda self : None;
    __swig_getmethods__["SupportsProblemType"] = lambda x: _pywraplp.Solver_SupportsProblemType
    if _newclass:SupportsProblemType = staticmethod(_pywraplp.Solver_SupportsProblemType)
    def Clear(self): return _pywraplp.Solver_Clear(self)
    def NumVariables(self): return _pywraplp.Solver_NumVariables(self)
    def LookupVariable(self, *args): return _pywraplp.Solver_LookupVariable(self, *args)
    def NumVar(self, *args): return _pywraplp.Solver_NumVar(self, *args)
    def IntVar(self, *args): return _pywraplp.Solver_IntVar(self, *args)
    def BoolVar(self, *args): return _pywraplp.Solver_BoolVar(self, *args)
    def NumConstraints(self): return _pywraplp.Solver_NumConstraints(self)
    def LookupConstraint(self, *args): return _pywraplp.Solver_LookupConstraint(self, *args)
    def Constraint(self, *args): return _pywraplp.Solver_Constraint(self, *args)
    def Objective(self): return _pywraplp.Solver_Objective(self)
    OPTIMAL = _pywraplp.Solver_OPTIMAL
    FEASIBLE = _pywraplp.Solver_FEASIBLE
    INFEASIBLE = _pywraplp.Solver_INFEASIBLE
    UNBOUNDED = _pywraplp.Solver_UNBOUNDED
    ABNORMAL = _pywraplp.Solver_ABNORMAL
    NOT_SOLVED = _pywraplp.Solver_NOT_SOLVED
    def Solve(self, *args): return _pywraplp.Solver_Solve(self, *args)
    def VerifySolution(self, *args): return _pywraplp.Solver_VerifySolution(self, *args)
    FREE = _pywraplp.Solver_FREE
    AT_LOWER_BOUND = _pywraplp.Solver_AT_LOWER_BOUND
    AT_UPPER_BOUND = _pywraplp.Solver_AT_UPPER_BOUND
    FIXED_VALUE = _pywraplp.Solver_FIXED_VALUE
    BASIC = _pywraplp.Solver_BASIC
    __swig_getmethods__["infinity"] = lambda x: _pywraplp.Solver_infinity
    if _newclass:infinity = staticmethod(_pywraplp.Solver_infinity)
    def SuppressOutput(self): return _pywraplp.Solver_SuppressOutput(self)
    def EnableOutput(self): return _pywraplp.Solver_EnableOutput(self)
    def set_time_limit(self, *args): return _pywraplp.Solver_set_time_limit(self, *args)
    def wall_time(self): return _pywraplp.Solver_wall_time(self)
    def iterations(self): return _pywraplp.Solver_iterations(self)
    def nodes(self): return _pywraplp.Solver_nodes(self)
    def ComputeExactConditionNumber(self): return _pywraplp.Solver_ComputeExactConditionNumber(self)
    def ExportModelAsLpFormat(self, *args): return _pywraplp.Solver_ExportModelAsLpFormat(self, *args)
    def ExportModelAsMpsFormat(self, *args): return _pywraplp.Solver_ExportModelAsMpsFormat(self, *args)
    def Add(self, constraint, name=''):
      if isinstance(constraint, bool):
        if constraint:
          return self.RowConstraint(0, 0, name)
        else:
          return self.RowConstraint(1, 1, name)
      else:
        return constraint.Extract(self, name)

    def Sum(self, expr_array):
      result = SumArray(expr_array)
      return result

    def RowConstraint(self, *args):
      return self.Constraint(*args)

    def Minimize(self, expr):
      objective = self.Objective()
      objective.Clear()
      objective.SetMinimization()
      coeffs = {}
      offset = expr.Visit(coeffs)
      objective.AddOffset(offset)
      for v, c, in coeffs.iteritems():
        objective.SetCoefficient(v, float(c))

    def Maximize(self, expr):
      objective = self.Objective()
      objective.Clear()
      objective.SetMaximization()
      coeffs = {}
      offset = expr.Visit(coeffs)
      objective.AddOffset(offset)
      for v, c, in coeffs.iteritems():
        objective.SetCoefficient(v, float(c))

    __swig_getmethods__["Infinity"] = lambda x: _pywraplp.Solver_Infinity
    if _newclass:Infinity = staticmethod(_pywraplp.Solver_Infinity)
    def SetTimeLimit(self, *args): return _pywraplp.Solver_SetTimeLimit(self, *args)
    def WallTime(self): return _pywraplp.Solver_WallTime(self)
    def Iterations(self): return _pywraplp.Solver_Iterations(self)
Solver_swigregister = _pywraplp.Solver_swigregister
Solver_swigregister(Solver)

def Solver_SupportsProblemType(*args):
  return _pywraplp.Solver_SupportsProblemType(*args)
Solver_SupportsProblemType = _pywraplp.Solver_SupportsProblemType

def Solver_infinity():
  return _pywraplp.Solver_infinity()
Solver_infinity = _pywraplp.Solver_infinity

def Solver_Infinity():
  return _pywraplp.Solver_Infinity()
Solver_Infinity = _pywraplp.Solver_Infinity

class Objective(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Objective, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Objective, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Clear(self): return _pywraplp.Objective_Clear(self)
    def SetCoefficient(self, *args): return _pywraplp.Objective_SetCoefficient(self, *args)
    def GetCoefficient(self, *args): return _pywraplp.Objective_GetCoefficient(self, *args)
    def SetOffset(self, *args): return _pywraplp.Objective_SetOffset(self, *args)
    def offset(self): return _pywraplp.Objective_offset(self)
    def AddOffset(self, *args): return _pywraplp.Objective_AddOffset(self, *args)
    def SetOptimizationDirection(self, *args): return _pywraplp.Objective_SetOptimizationDirection(self, *args)
    def SetMinimization(self): return _pywraplp.Objective_SetMinimization(self)
    def SetMaximization(self): return _pywraplp.Objective_SetMaximization(self)
    def maximization(self): return _pywraplp.Objective_maximization(self)
    def minimization(self): return _pywraplp.Objective_minimization(self)
    def Value(self): return _pywraplp.Objective_Value(self)
    def BestBound(self): return _pywraplp.Objective_BestBound(self)
    def Offset(self): return _pywraplp.Objective_Offset(self)
    __swig_destroy__ = _pywraplp.delete_Objective
    __del__ = lambda self : None;
Objective_swigregister = _pywraplp.Objective_swigregister
Objective_swigregister(Objective)

class Variable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    def name(self): return _pywraplp.Variable_name(self)
    def solution_value(self): return _pywraplp.Variable_solution_value(self)
    def lb(self): return _pywraplp.Variable_lb(self)
    def ub(self): return _pywraplp.Variable_ub(self)
    def reduced_cost(self): return _pywraplp.Variable_reduced_cost(self)
    def basis_status(self): return _pywraplp.Variable_basis_status(self)
    def __str__(self): return _pywraplp.Variable___str__(self)
    def __repr__(self): return _pywraplp.Variable___repr__(self)
    def __add__(self, expr):
      if isinstance(expr, (int, long, float)):
        return SumCst(self, expr)
      else:
        return Sum(self, expr)

    def __radd__(self, cst):
      if isinstance(cst, (int, long, float)):
        return SumCst(self, cst)
      else:
        raise TypeError

    def __sub__(self, expr):
      if isinstance(expr, (int, long, float)):
        return SumCst(self, -expr)
      else:
        return Sum(self, ProductCst(expr, -1))

    def __rsub__(self, cst):
      if isinstance(cst, (int, long, float)):
        return SumCst(ProductCst(self, -1), cst)
      else:
        raise TypeError

    def __mul__(self, cst):
      if isinstance(cst, (int, long, float)):
        return ProductCst(self, cst)
      else:
        raise TypeError

    def __rmul__(self, cst):
      if isinstance(cst, (int, long, float)):
        return ProductCst(self, cst)
      else:
        raise TypeError

    def __div__(self, cst):
      if isinstance(cst, (int, long, float)):
        if cst == 0.0:
          raise ZeroDivisionError
        else:
          return ProductCst(self, 1.0 / cst)
      else:
        raise TypeError

    def __truediv__(self, cst):
      if isinstance(cst, (int, long, float)):
        if cst == 0.0:
          raise ZeroDivisionError
        else:
          return ProductCst(self, 1.0 / cst)
      else:
        raise TypeError

    def __neg__(self):
      return ProductCst(self, -1)

    def __eq__(self, arg):
      if isinstance(arg, (int, long, float)):
        return LinearConstraint(self, arg, arg)
      else:
        return LinearConstraint(Sum(self, ProductCst(arg, -1)), 0.0, 0.0)

    def __ge__(self, arg):
      if isinstance(arg, (int, long, float)):
        return LinearConstraint(self, arg, 1e308)
      else:
        return LinearConstraint(Sum(self, ProductCst(arg, -1)), 0.0, 1e308)

    def __le__(self, arg):
      if isinstance(arg, (int, long, float)):
        return LinearConstraint(self, -1e308, arg)
      else:
        return LinearConstraint(Sum(self, ProductCst(arg, -1)), -1e308, 0.0)

    def Visit(self, coeffs):
      return self.DoVisit(coeffs, 1.0)

    def DoVisit(self, coeffs, multiplier):
      if self in coeffs:
        coeffs[self] += multiplier
      else:
        coeffs[self] = multiplier
      return 0.0

    def SolutionValue(self): return _pywraplp.Variable_SolutionValue(self)
    def Integer(self): return _pywraplp.Variable_Integer(self)
    def Lb(self): return _pywraplp.Variable_Lb(self)
    def Ub(self): return _pywraplp.Variable_Ub(self)
    def ReducedCost(self): return _pywraplp.Variable_ReducedCost(self)
    __swig_destroy__ = _pywraplp.delete_Variable
    __del__ = lambda self : None;
Variable_swigregister = _pywraplp.Variable_swigregister
Variable_swigregister(Variable)

class Constraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def name(self): return _pywraplp.Constraint_name(self)
    def SetCoefficient(self, *args): return _pywraplp.Constraint_SetCoefficient(self, *args)
    def GetCoefficient(self, *args): return _pywraplp.Constraint_GetCoefficient(self, *args)
    def lb(self): return _pywraplp.Constraint_lb(self)
    def ub(self): return _pywraplp.Constraint_ub(self)
    def SetLB(self, *args): return _pywraplp.Constraint_SetLB(self, *args)
    def SetUB(self, *args): return _pywraplp.Constraint_SetUB(self, *args)
    def SetBounds(self, *args): return _pywraplp.Constraint_SetBounds(self, *args)
    def set_is_lazy(self, *args): return _pywraplp.Constraint_set_is_lazy(self, *args)
    def activity(self): return _pywraplp.Constraint_activity(self)
    def dual_value(self): return _pywraplp.Constraint_dual_value(self)
    def basis_status(self): return _pywraplp.Constraint_basis_status(self)
    def Lb(self): return _pywraplp.Constraint_Lb(self)
    def Ub(self): return _pywraplp.Constraint_Ub(self)
    def SetLb(self, *args): return _pywraplp.Constraint_SetLb(self, *args)
    def SetUb(self, *args): return _pywraplp.Constraint_SetUb(self, *args)
    def DualValue(self): return _pywraplp.Constraint_DualValue(self)
    __swig_destroy__ = _pywraplp.delete_Constraint
    __del__ = lambda self : None;
Constraint_swigregister = _pywraplp.Constraint_swigregister
Constraint_swigregister(Constraint)

class MPSolverParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPSolverParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPSolverParameters, name)
    __repr__ = _swig_repr
    RELATIVE_MIP_GAP = _pywraplp.MPSolverParameters_RELATIVE_MIP_GAP
    def __init__(self): 
        this = _pywraplp.new_MPSolverParameters()
        try: self.this.append(this)
        except: self.this = this
    def SetDoubleParam(self, *args): return _pywraplp.MPSolverParameters_SetDoubleParam(self, *args)
    __swig_destroy__ = _pywraplp.delete_MPSolverParameters
    __del__ = lambda self : None;
MPSolverParameters_swigregister = _pywraplp.MPSolverParameters_swigregister
MPSolverParameters_swigregister(MPSolverParameters)
cvar = _pywraplp.cvar
MPSolverParameters.kDefaultPrimalTolerance = _pywraplp.cvar.MPSolverParameters_kDefaultPrimalTolerance

# This file is compatible with both classic and new-style classes.


