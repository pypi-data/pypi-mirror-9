Theme Fragments for `Plone Themes`_
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. image:: https://secure.travis-ci.org/datakurre/collective.themefragments.png
   :target: https://travis-ci.org/datakurre/collective.themefragments

.. _Plone Themes: https://pypi.python.org/pypi/plone.app.theming

Diazo Rules may operate on content that is fetched from somewhere other than
the current page being rendered by Plone, by using the href attribute to
specify a path of a resource relative to the root of the Plone site::

  <!-- Pull in extra navigation from a browser view on the Plone site root -->
  <after
      css:theme-children="#leftnav"
      css:content=".navitem"
      href="/@@extra-nav"
      />

The ``href`` attribute can be used with any rule apart from ``<drop />`` and
``<strip />``, and can reference any URL, for example to an existing browser
view configured for your site. However, it is often desirable to generate some
dynamic content specifically for the purpose of constructing a particular theme.
In this scenario, you can use *fragments*.

Fragment templates
++++++++++++++++++

Fragments are Zope Page Template files bundled with your theme. You can create
them by adding a folder called ``fragments`` to your theme resource directory
(i.e. the directory containing ``rules.xml``), either through the web or on the
filesystem, and creating one or more files with a ``.pt`` extension in this
directory.

For example, you could create a file ``fragments/customnav.pt`` in your theme
directory, containing::

  <ul id="nav">
    <li tal:repeat="item context/@@folderListing">
      <img tal:replace="structure item/getIcon" />
      <span tal:replace="item/Title" tal:attributes="titile item/Description">Title</span>
    </li>
  </ul>

This uses Zope Page Template TAL syntax (the same syntax you might use to create
a template for a browser view if you are doing filesystem Python development,
say) to generate some markup based on the attributes and helper views available
relative to the current context.

The following variables are available to the page template used to build a
fragment:

``context``
  The context in which the fragment was looked up. This is usually either the
  portal root (when using an ``href`` with an absolute path, i.e. one starting
  with a ``/``) or the current content object (when using an ``href`` with a
  relative path).
``request``
  The request used to render the fragment. When using a fragment from the
  ``href`` of a rule, this is a clone of the request used to render the page,
  but with the path to the fragment view, not the original content object.
  Note that form parameters from the original request are not available in this
  request.
``portal``
  The portal root object.
``portal_url``
  The URL to the portal root.

You can learn more about Zope Page Template syntax
`here <http://plone.org/documentation/tutorial/zpt/>`_.

Rendering fragments
+++++++++++++++++++

The special ``@@theme-fragment`` view is used to render fragments. Before
using it in your theme, you can test it directlry in your browser by going to
a URL like::

  http://localhost:8080/Plone/@@theme-fragment/customnav

This will cause the fragment in ``fragments/customnav.pt`` to be rendered with
the Plone site ``Plone`` running on ``localhost:8080`` as its context. You can
render fragments relative to any content object, by adjusting the URL.

**Note:** Fragments are only available for the currently active theme. When
testing a fragment in the browser in this way, make sure the theme is enabled!

To use a fragment in a theme rule, use the ``href`` attribute with either an
absolute or relative path. For example::

  <replace css:theme="#navlist" css:content="#nav" href="/@@theme-fragment/customnav" />

will replace the element with id ``navlist`` in the theme with the element with
id ``nav`` in the fragment generated by the ``fragments/customnav.pt`` template
in the theme, rendered with the portal root as its ``context`` always (since the
``href`` is using an absolute path, i.e. one beginning with a ``/``).

Similarly::

  <replace css:theme="#navlist" css:content="#nav" href="@@theme-fragment/customnav" />

will do the same, but using the current content item as its ``context`` (i.e.
the ``href`` is using a relative path).

Fragment security
+++++++++++++++++

Fragments, like theme HTML mockup files, are publicly accessible. Anyone with
access to the site can construct a URL containing ``@@theme-fragment/<name>`` to
render a given fragment.

However, the page templates used to build fragments execute in a so-called
*Restricted Python* environment. This means that the are executed as the current
user (or *Anonymous*, if the current user is not logged in). Information (such
as content items or their attributes) not accessible to the current user cannot
be rendered, and may result in a ``403 Forbidden`` error when rendering the
fragment.
