=====================
ZooKeeper integration
=====================

    >>> import gevent, mock, zc.resumelb.zk, zc.resumelb.tests, zc.zk
    >>> zk = zc.zk.ZooKeeper('zookeeper.example.com:2181')

To demonstrate the integration, we'll set up a tree:

    >>> zk.import_tree("""
    ... /test
    ...   /lb
    ...     /providers
    ...     workers -> ../app
    ...   /app
    ...     history = 32
    ...     max_skill_age = 90
    ...     /providers
    ... """)

There are some things to note about this tree:

- We have an lb node, where we'll configure an lb.  It has a workers
  subnode where we'll configure the workers.  This subnode could be a
  regular node, or a symbolic link.

  Here we made it a link because a) that's often useful and b) it was
  broken in some cases. :)

- Addresses of running workers and load balancers will be registered
  at provider subnodes.

Workers
=======

There's a paste server runner that:

- Registers with ZooKeeper, and

- Gets settings from ZooKeeper.

The server runner takes options:

zookeeper
  A ZooKeeper connection string

path
  A zookeeper where the worker will get settings and publish its
  address.

address
  Address to listen on, of the form HOST:PORT

  This defaults to ":0", to bind to a dynamic port on all IPv4 addresses.

loggers
  A ZConfig loggers-definition string, or a log-level

description
  An informatove description of the worker.

version
  The software version the worker is running.

Let's create a worker, making sure that ZConfig.configureLoggers was called.

    >>> app = zc.resumelb.tests.app()
    >>> import marshal
    >>> with open('resume.mar', 'w') as f:
    ...     marshal.dump(dict(a=1.0, b=2.0), f)
    >>> with mock.patch('ZConfig.configureLoggers') as configureLoggers:
    ...   with mock.patch('logging.basicConfig') as basicConfig:
    ...     worker = zc.resumelb.zk.worker(
    ...         app, None,
    ...         zookeeper='zookeeper.example.com:2181', path='/test/app',
    ...         address='127.0.0.1:0', run=False, loggers='loggers',
    ...         resume_file='resume.mar',
    ...         description='test',
    ...         version='42',
    ...         )
    ...     configureLoggers.assert_called_with('loggers')
    ...     if basicConfig.called: print 'basicConfig'

Normally, when used with paste, the worker function runs forever.  We
passed the run argument with a false value. The run argument exists
solely for testing.

The worker got its settings from the tree:

    >>> worker.max_skill_age
    90

    >>> worker.history
    32

    >>> worker.decay
    0.96875

It loaded its resume from resume.mar:

    >>> from pprint import pprint
    >>> pprint(worker.resume)
    {'a': 1.0, 'b': 2.0}

It registers its address as an ephemeral subnode of the provider's
subnode of the given path:

    >>> [waddr] = zk.get_children('/test/app/providers')
    >>> waddr == "%s:%s" % worker.addr
    True

    >>> meta = zk.get('/test/app/providers/' + waddr)[1]
    >>> ephemeralOwner = (meta['ephemeralOwner'] if isinstance(meta, dict)
    ...                   else meta.ephemeralOwner)
    >>> bool(ephemeralOwner)
    True

And provides some meta data:

    >>> pprint(zk.get_properties('/test/app/providers/' + waddr))
    {u'description': u'test', u'pid': 4195, u'version': u'42'}

Shutdown
--------

A shutdown signal handler is registered.  We can call it to shut the
worker down:

    >>> import signal
    >>> gevent.signal.call_args[0][0] == signal.SIGTERM
    True

    >>> gevent.signal.call_args[0][1]()
    >>> gevent.sleep(.01)
    >>> zk.get_children('/test/app/providers')
    []

    >>> gevent.socket.create_connection(worker.addr) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    error: [Errno ...] Connection refused


Variations
----------

Let's try again, but this time, don't set up logging:

    >>> with mock.patch('ZConfig.configureLoggers') as configureLoggers:
    ...   with mock.patch('logging.basicConfig') as basicConfig:
    ...     worker = zc.resumelb.zk.worker(
    ...         app, None,
    ...         zookeeper='zookeeper.example.com:2181', path='/test/app',
    ...         address='127.0.0.1:0', run=False,
    ...         resume_file='resume.mar',
    ...         )
    ...     if configureLoggers.called: print 'configureLoggers'
    ...     if basicConfig.called: print 'basicConfig'

Let's try again, but this time, set up basic logging:

    >>> worker.stop(); worker.zk.close()
    >>> with mock.patch('ZConfig.configureLoggers') as configureLoggers:
    ...   with mock.patch('logging.basicConfig') as basicConfig:
    ...     worker = zc.resumelb.zk.worker(
    ...         app, None,
    ...         zookeeper='zookeeper.example.com:2181', path='/test/app',
    ...         address='127.0.0.1:0', run=False, loggers='INFO',
    ...         resume_file='resume.mar',
    ...         )
    ...     if configureLoggers.called: print 'configureLoggers'
    ...     basicConfig.assert_called_with(level=20)

Let's try again, but this time, set up basic logging with a numeric level:

    >>> worker.stop(); worker.zk.close()
    >>> with mock.patch('ZConfig.configureLoggers') as configureLoggers:
    ...   with mock.patch('logging.basicConfig') as basicConfig:
    ...     worker = zc.resumelb.zk.worker(
    ...         app, None,
    ...         zookeeper='zookeeper.example.com:2181', path='/test/app',
    ...         address='127.0.0.1:0', run=False, loggers='42',
    ...         resume_file='resume.mar',
    ...         )
    ...     if configureLoggers.called: print 'configureLoggers'
    ...     basicConfig.assert_called_with(level=42)

LB
==

There's a script entry point for a load balancer.  It takes
command-line arguments and also has a run keyword argument for
testing. As an added testing convenience, if arguments are passed as a
string, the string is split and testing mode (run=False) is assumed.

    >>> zc.resumelb.zk.lbmain('-h')
    Usage: test [options] zookeeper_connection path
    <BLANKLINE>
        Run a resume-based load balancer on addr.
    <BLANKLINE>
    <BLANKLINE>
    Options:
      -h, --help            show this help message and exit
      -a ADDRESS, --address=ADDRESS
                            Address to listed on for web requests
      -b BACKLOG, --backlog=BACKLOG
                            Server backlog setting.
      -d, --backdoor        Run a backdoor server. Use with caution!
      -e DISCONNECT_MESSAGE, --disconnect-message=DISCONNECT_MESSAGE
                            Path to error page to use when a request is
                            lost due to worker disconnection
      -L LOGGER_CONFIGURATION, --logger-configuration=LOGGER_CONFIGURATION
                            Read logger configuration from the given
                            configuration file path.  The configuration
                            file must be in ZConfig logger configuration
                            syntax. Alternatively, you can give a Python
                            logger level name or number.
      -l ACCESS_LOGGER, --access-logger=ACCESS_LOGGER
                            Access-log logger name.
      -m MAX_CONNECTIONS, --max-connections=MAX_CONNECTIONS
                            Maximum number of simultanious accepted
                            connections.
      -r REQUEST_CLASSIFIER, --request-classifier=REQUEST_CLASSIFIER
                            Request classification function
                            (module:expr)
      -p POOL_FACTORY, --pool-factory=POOL_FACTORY
                            Callable which creates a pool (module:expr).
                            Will be called with settings as keyword
                            arguments.
      -s STATUS_SERVER, --status-server=STATUS_SERVER
                            Run a status server for getting pool
                            information. The argument is a unix-domain
                            socket path to listen on.
      -t SOCKET_TIMEOUT, --socket-timeout=SOCKET_TIMEOUT
                            HTTP socket timeout.
      -v, --single-version  Only use a single worker version.


Let's start with a simple call:


    >>> gevent.signal.reset_mock()
    >>> lb, server = zc.resumelb.zk.lbmain(
    ...     'zookeeper.example.com:2181 /test/lb -s status.sock')

    >>> sig, sighandler = gevent.signal.call_args[0]

At this point, the lb is running and listening on all interfaces using
a self assigned port.

It has connected to the worker and thus has a pool size of one:

    >>> len(lb.pool.workers)
    1

Let's make a web request.  First, we'll get the lb address from ZooKeeper:

    >>> import zc.parse_addr
    >>> addr = zc.parse_addr.parse_addr(
    ...     zk.get_children('/test/lb/providers')[0])

All of the addresses are ips, not hostnames. None of them include localhost:

    >>> [a for a in zk.get_children('/test/lb/providers')
    ...  if a.startswith('localhost:')]
    []

Then we'll make a simpler GET request:

    >>> import gevent.socket
    >>> sock = gevent.socket.create_connection(('127.0.0.1', addr[1]))
    >>> sock.sendall('''GET /hi.html HTTP/1.0\r
    ... Host: h1.com\r
    ... Content-Length: 0\r
    ... \r
    ... ''')

    >>> print sock.recv(9999) # doctest: +ELLIPSIS
    HTTP/1.1 200 OK...

If we create another worker, it will be seen by the load
balancer. This time, we're not going to run the worker in test mode.
We want to make sure that non-test mode works:

    >>> worker2_greenlet = gevent.spawn(zc.resumelb.zk.worker,
    ...     app, None,
    ...     zookeeper='zookeeper.example.com:2181', path='/test/app',
    ...     address='127.0.0.1:0')
    >>> gevent.sleep(.01)

    >>> len(lb.pool.workers)
    2

LB status server
----------------

When we started the lb, we told it to create a status server.  The
server is registered with ZooKeeper. We'll cause a request to be
outstanding to have a case with a worker backlog:

    >>> sock = gevent.socket.create_connection(('127.0.0.1', addr[1]))
    >>> sock.sendall('''GET /gsleep.html?dur=1 HTTP/1.0\r
    ... Host: h1.com\r
    ... Content-Length: 0\r
    ... \r
    ... ''')
    >>> gevent.sleep(.1)


    >>> import socket
    >>> status_socket = gevent.socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    >>> status_socket.connect('status.sock')
    >>> status_file = status_socket.makefile()
    >>> import json
    >>> status = json.loads(status_file.read())
    >>> pprint(status, width=1) # doctest: +ELLIPSIS
    {u'backlog': 1,
     u'mean_backlog': 0.6...,
     u'workers': [...]}

    >>> sorted(status['workers'], key=lambda w: w[2])
    ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
    [[u'127.0.0.1:...', 0, 0, None],
     [u'127.0.0.1:...', 1, 0.6..., 1...]]

    >>> sorted(status['workers_ex'])
    ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
    [[u'127.0.0.1:DDDD', 0], [u'127.0.0.1:DDDD', 0]]

    >>> status_file.close()
    >>> status_socket.close()

There's also a command-line client for the status server:

    >>> zc.resumelb.zk.get_lb_status(['status.sock'])
    status for status.sock
      backlog: 1, mean backlog: 0.7
      workers: 2, mean backlog per worker: 0.3
    <BLANKLINE>
                            worker backlog mean bl     age
                   127.0.0.1:48407       1     0.7     0.1
                   127.0.0.1:52308       0     0.0       -


    >>> sock.close()

Shutdown
--------

A shutdown signal handler is registered.  We can call it to shut the
worker down:

    >>> sig == signal.SIGTERM
    True

    >>> sighandler()
    >>> gevent.sleep(.01)
    >>> zk.get_children('/test/lb/providers')
    []

    >>> gevent.socket.create_connection(('127.0.0.1', addr[1]))
    ... # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    error: [Errno ...] Connection refused

    >>> lb.workletts
    {}


Variations
-----------

OK, so let's try a more complex example.  Maybe we can exercise all of
the options!

    >>> with open('log.conf', 'w') as f:
    ...   f.write('loggers')

    >>> with open('oops.html', 'w') as f:
    ...   f.write("oops")

    >>> with mock.patch('ZConfig.configureLoggers') as configureLoggers:
    ...     lb, server = zc.resumelb.zk.lbmain(
    ...         'zookeeper.example.com:2181 /test/lb'
    ...         ' -alocalhost:0 -laccess -b1 -m2'
    ...         ' --logger-configuration log.conf '
    ...         ' -rzc.resumelb.tests:test_classifier -eoops.html'
    ...         )
    ...     configureLoggers.assert_called_with('loggers')

    >>> server.backlog
    1

    >>> server.pool.size
    2

    >>> lb.disconnect_message
    'oops'

    >>> [addr] = map(zc.parse_addr.parse_addr,
    ...              zk.get_children('/test/lb/providers'))

    >>> str(addr[0])
    'localhost'

    >>> len(lb.pool.workers)
    2


The 3rd collection failed because we said to only accept one
connection at a time and set the backlog to 1.

We specified a logger name for the access log.  Let's set up a log
handler, so we can verify that accesses were logged there.

    >>> import zope.testing.loggingsupport
    >>> accesslog = zope.testing.loggingsupport.InstalledHandler('access')

Let's do a request.

    >>> sock = gevent.socket.create_connection(addr)
    >>> sock.sendall('''GET /hi.html HTTP/1.0\r
    ... Host: h1.com\r
    ... Content-Length: 0\r
    ... \r
    ... ''')
    >>> print sock.recv(9999) # doctest: +ELLIPSIS
    HTTP/1.1 200 OK...

    >>> sock.close()

We now have access-log records in the access-log handler:

    >>> print accesslog # doctest: +NORMALIZE_WHITESPACE
    access INFO
      127.0.0.1 - -
      [2012-03-28 13:57:58] "GET /hi.html HTTP/1.0" 200 226 0.034563


    >>> accesslog.uninstall()

By looking at the lb's pool's skilled data structure, we can see that
the test request classifier was used.

    >>> sorted(lb.pool.skilled)
    ['a', 'b', 'h1.com', "yup, it's a test"]

Let's shut down the workers:

    >>> worker.stop()
    >>> worker.zk.close()
    >>> worker2_greenlet.kill()
    >>> gevent.sleep(.01)

We see that there are fewer workers:

    >>> len(lb.worker_addrs)
    0

Not that if we looked at the number of pools, it would still be
2. This is an artifact of the way the test is run.  We shutdown/killed
the servers, but we didn't close the open worker connections.  We
don't have the plumbing to do that and it's only an issue for the tests.

OK. Now let's shut down the server and lb.

    >>> server.stop()
    >>> lb.stop()
    >>> lb.zk.close()

Finally, let's test that:

- The server runs in non-test mode, that

- we can pass an object as the access log parameter (used by
  simulation script.), and that we can pass basic logging information:


    >>> worker_greenlet = gevent.spawn(zc.resumelb.zk.worker,
    ...     app, None,
    ...     zookeeper='zookeeper.example.com:2181', path='/test/app',
    ...     address='127.0.0.1:0')

    >>> with mock.patch('ZConfig.configureLoggers') as configureLoggers:
    ...   with mock.patch('logging.basicConfig') as basicConfig:
    ...     lb_greenlet = gevent.spawn(zc.resumelb.zk.lbmain, [
    ...       '-a127.0.0.1:0', '--logger-configuration', 'INFO',
    ...       'zookeeper.example.com:2181', '/test/lb'])
    ...     gevent.sleep(.1)
    ...     if configureLoggers.called: print 'configureLoggers'
    ...     basicConfig.assert_called_with(level=20)

    >>> [addr] = map(zc.parse_addr.parse_addr,
    ...              zk.get_children('/test/lb/providers'))
    >>> sock = gevent.socket.create_connection(addr)
    >>> sock.sendall('''GET /hi.html HTTP/1.0\r
    ... Host: h1.com\r
    ... Content-Length: 0\r
    ... \r
    ... ''')
    >>> print sock.recv(9999) # doctest: +ELLIPSIS
    HTTP/1.1 200 OK...

    >>> lb_greenlet.kill()

Try a numeric log level:

    >>> with mock.patch('ZConfig.configureLoggers') as configureLoggers:
    ...   with mock.patch('logging.basicConfig') as basicConfig:
    ...     lb_greenlet = gevent.spawn(zc.resumelb.zk.lbmain, [
    ...       '-a127.0.0.1:0', '--logger-configuration', '42',
    ...       'zookeeper.example.com:2181', '/test/lb'])
    ...     gevent.sleep(.1)
    ...     if configureLoggers.called: print 'configureLoggers'
    ...     basicConfig.assert_called_with(level=42)


    >>> lb_greenlet.kill()
    >>> worker_greenlet.kill()

Single-version load balancer
=============================

If only one version of your application should run at a time, you can
use the single-version (``-v``, ``--single-version``) option.  Your
workers must register with a version, or they'll be ignored.

    >>> with mock.patch('ZConfig.configureLoggers') as configureLoggers:
    ...   with mock.patch('logging.basicConfig') as basicConfig:
    ...     worker = zc.resumelb.zk.worker(
    ...         app, None,
    ...         zookeeper='zookeeper.example.com:2181', path='/test/app',
    ...         address='127.0.0.1:0', run=False, version='42')
    >>> gevent.sleep(.01)
    >>> lb, server = zc.resumelb.zk.lbmain(
    ...     'zookeeper.example.com:2181 /test/lb -v')
    >>> gevent.sleep(1)
    >>> with mock.patch('ZConfig.configureLoggers') as configureLoggers:
    ...   with mock.patch('logging.basicConfig') as basicConfig:
    ...     worker = zc.resumelb.zk.worker(
    ...         app, None,
    ...         zookeeper='zookeeper.example.com:2181', path='/test/app',
    ...         address='127.0.0.1:0', run=False, version='42')
    >>> gevent.sleep(.01)
    >>> lb.pool
    Version: 42
    Request classes:
    Backlogs:
      overall backlog: 0 Decayed: 0 Avg: 0
      0: [127.0.0.1:39208, 127.0.0.1:60073]

Overriding the default Pool class
=================================

If you wish to override the default Pool class, you can use the pool-factory
(``-p``, ``--pool-factory``) option. Pool factories can be any callable that
takes keyword arguments.

    >>> lb, server = zc.resumelb.zk.lbmain(
    ...     'zookeeper.example.com:2181 /test/lb -pzc.resumelb.tests:TestPool')
    >>> gevent.sleep(1)
    >>> with mock.patch('ZConfig.configureLoggers') as configureLoggers:
    ...   with mock.patch('logging.basicConfig') as basicConfig:
    ...     worker = zc.resumelb.zk.worker(
    ...         app, None,
    ...         zookeeper='zookeeper.example.com:2181', path='/test/app',
    ...         address='127.0.0.1:0', run=False, version='42')
    >>> gevent.sleep(.01)

Our pool is an instance of the TestPool class we specified:

    >>> isinstance(lb.pool, zc.resumelb.tests.TestPool)
    True

This also causes the loadbalancer to load the worker versions as the new pool
factory may need them:

    >>> print list(lb.pool.workers)[0].version
    42
