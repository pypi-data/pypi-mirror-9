#!/usr/bin/env python

import json
import sys
import os
import argparse

from jsontester.shell import Script

from jsontester.request import JSONRequest,JSONRequestError,response_code_text

script = Script(description='Send a HTTP PUT request with data from file to given URL as JSON')
script.add_argument('-r','--raw',action='store_true',help='No output formatting')
script.add_argument('-i','--indent',type=int,default=2,help='Result indent level')
script.add_argument('-D','--data-from',type=argparse.FileType('r'),help='Data to send in PUT request')
script.add_argument('urls', nargs='*', help='URLs to put')
args = script.parse_args()

request = JSONRequest(browser=args.browser, verify=args.insecure)

if not args.data_from:
    script.exit(1,'PUT data to send is required argument')

if args.data_from=='-':
    script.log.debug('Reading PUT data from standard input')
    post_data = ''
    while True:
        l = sys.stdin.readline()
        if l=='': break
        post_data += l

elif args.data_from:
    script.log.debug('Reading PUT data from file')
    try:
        post_data = args.data_from.read()
    except OSError,(ecode,emsg):
        script.exit(1,'Error reading PUT data from file %s: %s' % (args.data,emsg))

else:
    script.exit(1,'Could not parse PUT data from anywhere')

script.log.debug('PUT %d bytes:\n%s' % (len(post_data),post_data))
for url in args.urls:
    try:
        res = request.put(url,data=post_data)
    except JSONRequestError,emsg:
        script.exit(1,emsg)

    res_text = response_code_text(res.status_code)
    if res_text != 'OK':
        script.error('RESPONSE CODE: %s\n' % res_text)
        script.error('ERROR updating JSON resource')
        if args.raw:
            script.error(res.content)
        else:
            try:
                script.error(json.dumps(json.loads(res.content),indent=args.indent))
            except ValueError:
                script.error(res.content)

    else:
        script.error('RESPONSE CODE: %s\n' % res_text)
        if args.raw:
            script.message(res.content)
        else:
            try:
                script.message(json.dumps(json.loads(res.content),indent=args.indent))
            except ValueError:
                script.error(res.content)

