#!/usr/bin/env python
import os
import sys
import getopt
from emase.EMfactory import EMfactory
from emase.AlignmentPropertyMatrix import AlignmentPropertyMatrix as APM

__author__ = 'Kwangbom "KB" Choi, Ph. D.'


help_message = '''
    Usage:
        run-emase -i <h5_file> -g <grp_file> -L <len_file> -M <multiread_model> -o <outbase> \\
                  -b <min_uniq_reads> -p <pseudocount> -r <read_length> -m <max_iters> -t <tolerance>
    Input:
        <h5_file>        : Alignments stored in a PyTables HDF5 format
        <grp_file>       : Gene-to-transcript map (ENSMUSGxxx followed by a list of ENSMUSTyyy's)
        <len_file>       : File that contains transcript lengths
        <multiread_model>: Multiread model ID
                              1: Gene->Isoform->Allele,
                              2: Gene->Allele->Isoform,
                              3: Gene->Isoform*Allele,
                              4: Gene*Isoform*Allele
        <outbase>        : EMASE outputs the result to outbase (default: './emase')
        <min_uniq_reads> : The number of unique reads to be considered for convergence checking
        <pseudocount>    : Pseudocount for allele specificity (default: 0.0)
        <max_iters>      : The number of maximum iterations for EM (default: 1000)
        <tolerance>      : Tolerance for the termination of EM. (default: 0.01)
    Parameters:
        -h, --help: shows this help message
        -c: reports the alignment counts
        -w: reports the posterior probability for each read
'''


class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg


def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "hi:g:L:M:o:b:p:r:m:t:cw", ["help"])
        except getopt.error, msg:
            raise Usage(msg)

        # Default values of vars
        h5file = None
        grpfile = None
        lenfile = None
        multiread_model = 1
        outbase = './emase'
        min_uniq_reads = 0
        read_length = 100
        pseudocount = 0.2
        max_iters = 999
        tolerance = 0.01
        report_gene_counts = False
        report_alignment_counts = False
        report_posterior = False

        # option processing (change this later with optparse)
        for option, value in opts:
            if option in ("-h", "--help"):
                raise Usage(help_message)
            if option == "-i":
                h5file = value
            if option == "-g":
                grpfile = value
                report_gene_counts = True
            if option == "-L":
                lenfile = value
            if option == "-M":
                multiread_model = int(value)
            if option == "-o":
                outbase = value
            if option == "-b":
                min_uniq_reads = int(value)
            if option == "-p":
                pseudocount = float(value)
            if option == "-r":
                read_length = int(value)
            if option == "-m":
                max_iters = int(value)
            if option == "-t":
                tolerance = float(value)
            if option == "-c":
                report_alignment_counts = True
            if option == "-w":
                report_posterior = True

        # Check if the required options are given
        if h5file is None:  # If alignment file is not given
            raise Usage(help_message)

        #
        # Main body
        #
        alnmat = APM(h5file=h5file, grpfile=grpfile)
        em_factory = EMfactory(alnmat)
        em_factory.prepare(pseudocount, lenfile=lenfile, read_length=read_length)
        em_factory.run(model=multiread_model, tol=tolerance, max_iters=max_iters, min_uniq_reads=min_uniq_reads, verbose=True)
        em_factory.report_depths(filename=os.path.join(outbase, ".isoforms.tpm"), tpm=True)
        em_factory.report_effective_read_counts(filename=os.path.join(outbase, "isoforms.effective_read_counts"))
        if report_posterior:
            em_factory.export_posterior_probability(filename=os.path.join(outbase, ".posterior.h5"))
        if report_gene_counts:
            em_factory.report_depths(filename=os.path.join(outbase, ".genes.tpm"), tpm=True, grp_wise=True)
            em_factory.report_effective_read_counts(filename=os.path.join(outbase, ".genes.effective_read_counts"), grp_wise=True)
        if report_alignment_counts:
            alnmat.reset()
            alnmat.report_alignment_counts(filename=os.path.join(outbase, ".isoforms.alignment_counts"))
            if report_gene_counts:
                alnmat._bundle_inline(reset=True)
                alnmat.report_alignment_counts(filename=os.path.join(outbase, ".genes.alignment_counts"))

        #
        # End of main body
        #

    except Usage, err:
        print >> sys.stderr, sys.argv[0].split("/")[-1] + ": " + str(err.msg)
        return 2


if __name__ == "__main__":
    sys.exit(main())
