# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Mistral2', [dirname(__file__)])
        except ImportError:
            import _Mistral2
            return _Mistral2
        if fp is not None:
            try:
                _mod = imp.load_module('_Mistral2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Mistral2 = swig_import_helper()
    del swig_import_helper
else:
    import _Mistral2
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Mistral2_Expression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    nbj_ident = _swig_property(_Mistral2.Mistral2_Expression_nbj_ident_get, _Mistral2.Mistral2_Expression_nbj_ident_set)
    _self = _swig_property(_Mistral2.Mistral2_Expression__self_get, _Mistral2.Mistral2_Expression__self_set)
    _solver = _swig_property(_Mistral2.Mistral2_Expression__solver_get, _Mistral2.Mistral2_Expression__solver_set)
    def has_been_added(self): return _Mistral2.Mistral2_Expression_has_been_added(self)
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_Expression(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Expression
    __del__ = lambda self : None;
    def getVariableId(self): return _Mistral2.Mistral2_Expression_getVariableId(self)
    def get_value(self): return _Mistral2.Mistral2_Expression_get_value(self)
    def get_size(self): return _Mistral2.Mistral2_Expression_get_size(self)
    def get_min(self): return _Mistral2.Mistral2_Expression_get_min(self)
    def get_max(self): return _Mistral2.Mistral2_Expression_get_max(self)
    def contain(self, *args): return _Mistral2.Mistral2_Expression_contain(self, *args)
    def add(self, *args): return _Mistral2.Mistral2_Expression_add(self, *args)
Mistral2_Expression_swigregister = _Mistral2.Mistral2_Expression_swigregister
Mistral2_Expression_swigregister(Mistral2_Expression)

class Mistral2_IntVar(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_IntVar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_IntVar
    __del__ = lambda self : None;
Mistral2_IntVar_swigregister = _Mistral2.Mistral2_IntVar_swigregister
Mistral2_IntVar_swigregister(Mistral2_IntVar)

class Mistral2_Min(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_Min(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Min
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_Min_add(self, *args)
Mistral2_Min_swigregister = _Mistral2.Mistral2_Min_swigregister
Mistral2_Min_swigregister(Mistral2_Min)

class Mistral2_Max(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_Max(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Max
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_Max_add(self, *args)
Mistral2_Max_swigregister = _Mistral2.Mistral2_Max_swigregister
Mistral2_Max_swigregister(Mistral2_Max)

class Mistral2_AllDiff(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_AllDiff(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_AllDiff
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_AllDiff_add(self, *args)
Mistral2_AllDiff_swigregister = _Mistral2.Mistral2_AllDiff_swigregister
Mistral2_AllDiff_swigregister(Mistral2_AllDiff)

class Mistral2_Gcc(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_Gcc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Gcc
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_Gcc_add(self, *args)
Mistral2_Gcc_swigregister = _Mistral2.Mistral2_Gcc_swigregister
Mistral2_Gcc_swigregister(Mistral2_Gcc)

class Mistral2_Element(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_Element(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Element
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_Element_add(self, *args)
Mistral2_Element_swigregister = _Mistral2.Mistral2_Element_swigregister
Mistral2_Element_swigregister(Mistral2_Element)

class Mistral2_LeqLex(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_LeqLex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_LeqLex
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_LeqLex_add(self, *args)
Mistral2_LeqLex_swigregister = _Mistral2.Mistral2_LeqLex_swigregister
Mistral2_LeqLex_swigregister(Mistral2_LeqLex)

class Mistral2_LessLex(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_LessLex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_LessLex
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_LessLex_add(self, *args)
Mistral2_LessLex_swigregister = _Mistral2.Mistral2_LessLex_swigregister
Mistral2_LessLex_swigregister(Mistral2_LessLex)

class Mistral2_Sum(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_Sum(*args)
        try: self.this.append(this)
        except: self.this = this
    def addVar(self, *args): return _Mistral2.Mistral2_Sum_addVar(self, *args)
    def addWeight(self, *args): return _Mistral2.Mistral2_Sum_addWeight(self, *args)
    __swig_destroy__ = _Mistral2.delete_Mistral2_Sum
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_Sum_add(self, *args)
Mistral2_Sum_swigregister = _Mistral2.Mistral2_Sum_swigregister
Mistral2_Sum_swigregister(Mistral2_Sum)

class Mistral2_binop(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def arity(self): return _Mistral2.Mistral2_binop_arity(self)
    __swig_destroy__ = _Mistral2.delete_Mistral2_binop
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_binop_add(self, *args)
Mistral2_binop_swigregister = _Mistral2.Mistral2_binop_swigregister
Mistral2_binop_swigregister(Mistral2_binop)

class Mistral2_mul(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_mul(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_mul
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_mul_add(self, *args)
Mistral2_mul_swigregister = _Mistral2.Mistral2_mul_swigregister
Mistral2_mul_swigregister(Mistral2_mul)

class Mistral2_div(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_div(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_div
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_div_add(self, *args)
Mistral2_div_swigregister = _Mistral2.Mistral2_div_swigregister
Mistral2_div_swigregister(Mistral2_div)

class Mistral2_mod(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_mod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_mod
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_mod_add(self, *args)
Mistral2_mod_swigregister = _Mistral2.Mistral2_mod_swigregister
Mistral2_mod_swigregister(Mistral2_mod)

class Mistral2_and(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_and(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_and
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_and_add(self, *args)
Mistral2_and_swigregister = _Mistral2.Mistral2_and_swigregister
Mistral2_and_swigregister(Mistral2_and)

class Mistral2_or(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_or(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_or
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_or_add(self, *args)
Mistral2_or_swigregister = _Mistral2.Mistral2_or_swigregister
Mistral2_or_swigregister(Mistral2_or)

class Mistral2_eq(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_eq(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_eq
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_eq_add(self, *args)
Mistral2_eq_swigregister = _Mistral2.Mistral2_eq_swigregister
Mistral2_eq_swigregister(Mistral2_eq)

class Mistral2_ne(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_ne(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_ne
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_ne_add(self, *args)
Mistral2_ne_swigregister = _Mistral2.Mistral2_ne_swigregister
Mistral2_ne_swigregister(Mistral2_ne)

class Mistral2_NoOverlap(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_NoOverlap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_NoOverlap
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_NoOverlap_add(self, *args)
Mistral2_NoOverlap_swigregister = _Mistral2.Mistral2_NoOverlap_swigregister
Mistral2_NoOverlap_swigregister(Mistral2_NoOverlap)

class Mistral2_le(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_le(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_le
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_le_add(self, *args)
Mistral2_le_swigregister = _Mistral2.Mistral2_le_swigregister
Mistral2_le_swigregister(Mistral2_le)

class Mistral2_ge(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_ge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_ge
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_ge_add(self, *args)
Mistral2_ge_swigregister = _Mistral2.Mistral2_ge_swigregister
Mistral2_ge_swigregister(Mistral2_ge)

class Mistral2_lt(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_lt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_lt
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_lt_add(self, *args)
Mistral2_lt_swigregister = _Mistral2.Mistral2_lt_swigregister
Mistral2_lt_swigregister(Mistral2_lt)

class Mistral2_gt(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_gt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_gt
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_gt_add(self, *args)
Mistral2_gt_swigregister = _Mistral2.Mistral2_gt_swigregister
Mistral2_gt_swigregister(Mistral2_gt)

class Mistral2_Minimise(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_Minimise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Minimise
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_Minimise_add(self, *args)
Mistral2_Minimise_swigregister = _Mistral2.Mistral2_Minimise_swigregister
Mistral2_Minimise_swigregister(Mistral2_Minimise)

class Mistral2_Maximise(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mistral2.new_Mistral2_Maximise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Maximise
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2_Maximise_add(self, *args)
Mistral2_Maximise_swigregister = _Mistral2.Mistral2_Maximise_swigregister
Mistral2_Maximise_swigregister(Mistral2_Maximise)

class Mistral2Solver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    solver = _swig_property(_Mistral2.Mistral2Solver_solver_get, _Mistral2.Mistral2Solver_solver_set)
    first_decision_level = _swig_property(_Mistral2.Mistral2Solver_first_decision_level_get, _Mistral2.Mistral2Solver_first_decision_level_set)
    saved_level = _swig_property(_Mistral2.Mistral2Solver_saved_level_get, _Mistral2.Mistral2Solver_saved_level_set)
    _heuristic_randomization = _swig_property(_Mistral2.Mistral2Solver__heuristic_randomization_get, _Mistral2.Mistral2Solver__heuristic_randomization_set)
    _var_heuristic_str = _swig_property(_Mistral2.Mistral2Solver__var_heuristic_str_get, _Mistral2.Mistral2Solver__var_heuristic_str_set)
    _val_heuristic_str = _swig_property(_Mistral2.Mistral2Solver__val_heuristic_str_get, _Mistral2.Mistral2Solver__val_heuristic_str_set)
    _restart_policy_str = _swig_property(_Mistral2.Mistral2Solver__restart_policy_str_get, _Mistral2.Mistral2Solver__restart_policy_str_set)
    _branching_heuristic = _swig_property(_Mistral2.Mistral2Solver__branching_heuristic_get, _Mistral2.Mistral2Solver__branching_heuristic_set)
    _restart_policy = _swig_property(_Mistral2.Mistral2Solver__restart_policy_get, _Mistral2.Mistral2Solver__restart_policy_set)
    _search_goal = _swig_property(_Mistral2.Mistral2Solver__search_goal_get, _Mistral2.Mistral2Solver__search_goal_set)
    def __init__(self): 
        this = _Mistral2.new_Mistral2Solver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2Solver
    __del__ = lambda self : None;
    def add(self, *args): return _Mistral2.Mistral2Solver_add(self, *args)
    def initialise(self, *args): return _Mistral2.Mistral2Solver_initialise(self, *args)
    def solve(self): return _Mistral2.Mistral2Solver_solve(self)
    def solveAndRestart(self, *args): return _Mistral2.Mistral2Solver_solveAndRestart(self, *args)
    def startNewSearch(self): return _Mistral2.Mistral2Solver_startNewSearch(self)
    def getNextSolution(self): return _Mistral2.Mistral2Solver_getNextSolution(self)
    def sacPreprocess(self, *args): return _Mistral2.Mistral2Solver_sacPreprocess(self, *args)
    def next(self, *args): return _Mistral2.Mistral2Solver_next(self, *args)
    def get_level(self): return _Mistral2.Mistral2Solver_get_level(self)
    def propagate(self): return _Mistral2.Mistral2Solver_propagate(self)
    def save(self): return _Mistral2.Mistral2Solver_save(self)
    def post(self, *args): return _Mistral2.Mistral2Solver_post(self, *args)
    def undo(self, *args): return _Mistral2.Mistral2Solver_undo(self, *args)
    def deduce(self, *args): return _Mistral2.Mistral2Solver_deduce(self, *args)
    def branch_right(self): return _Mistral2.Mistral2Solver_branch_right(self)
    def store_solution(self): return _Mistral2.Mistral2Solver_store_solution(self)
    def setHeuristic(self, *args): return _Mistral2.Mistral2Solver_setHeuristic(self, *args)
    def setFailureLimit(self, *args): return _Mistral2.Mistral2Solver_setFailureLimit(self, *args)
    def setNodeLimit(self, *args): return _Mistral2.Mistral2Solver_setNodeLimit(self, *args)
    def setTimeLimit(self, *args): return _Mistral2.Mistral2Solver_setTimeLimit(self, *args)
    def setVerbosity(self, *args): return _Mistral2.Mistral2Solver_setVerbosity(self, *args)
    def setRandomized(self, *args): return _Mistral2.Mistral2Solver_setRandomized(self, *args)
    def setRandomSeed(self, *args): return _Mistral2.Mistral2Solver_setRandomSeed(self, *args)
    def forceFiniteDomain(self, *args): return _Mistral2.Mistral2Solver_forceFiniteDomain(self, *args)
    def addNogood(self, *args): return _Mistral2.Mistral2Solver_addNogood(self, *args)
    def guide(self, *args): return _Mistral2.Mistral2Solver_guide(self, *args)
    def backtrackTo(self, *args): return _Mistral2.Mistral2Solver_backtrackTo(self, *args)
    def upOneLevel(self): return _Mistral2.Mistral2Solver_upOneLevel(self)
    def presolve(self): return _Mistral2.Mistral2Solver_presolve(self)
    def assign(self, *args): return _Mistral2.Mistral2Solver_assign(self, *args)
    def increase_init_level(self, *args): return _Mistral2.Mistral2Solver_increase_init_level(self, *args)
    def decrease_init_level(self, *args): return _Mistral2.Mistral2Solver_decrease_init_level(self, *args)
    def reset(self, *args): return _Mistral2.Mistral2Solver_reset(self, *args)
    def setLowerBounds(self, *args): return _Mistral2.Mistral2Solver_setLowerBounds(self, *args)
    def setUpperBounds(self, *args): return _Mistral2.Mistral2Solver_setUpperBounds(self, *args)
    def setRestartNogood(self): return _Mistral2.Mistral2Solver_setRestartNogood(self)
    def is_opt(self): return _Mistral2.Mistral2Solver_is_opt(self)
    def is_sat(self): return _Mistral2.Mistral2Solver_is_sat(self)
    def is_unsat(self): return _Mistral2.Mistral2Solver_is_unsat(self)
    def printStatistics(self): return _Mistral2.Mistral2Solver_printStatistics(self)
    def getBacktracks(self): return _Mistral2.Mistral2Solver_getBacktracks(self)
    def getNodes(self): return _Mistral2.Mistral2Solver_getNodes(self)
    def getFailures(self): return _Mistral2.Mistral2Solver_getFailures(self)
    def getChecks(self): return _Mistral2.Mistral2Solver_getChecks(self)
    def getPropags(self): return _Mistral2.Mistral2Solver_getPropags(self)
    def getTime(self): return _Mistral2.Mistral2Solver_getTime(self)
    def getRandomNumber(self): return _Mistral2.Mistral2Solver_getRandomNumber(self)
    def getNumVariables(self): return _Mistral2.Mistral2Solver_getNumVariables(self)
    def getNumConstraints(self): return _Mistral2.Mistral2Solver_getNumConstraints(self)
    def num_vars(self): return _Mistral2.Mistral2Solver_num_vars(self)
    def get_degree(self, *args): return _Mistral2.Mistral2Solver_get_degree(self, *args)
Mistral2Solver_swigregister = _Mistral2.Mistral2Solver_swigregister
Mistral2Solver_swigregister(Mistral2Solver)

class Mistral2ExpArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Mistral2.new_Mistral2ExpArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2ExpArray
    __del__ = lambda self : None;
    def size(self): return _Mistral2.Mistral2ExpArray_size(self)
    def add(self, *args): return _Mistral2.Mistral2ExpArray_add(self, *args)
    def get_item(self, *args): return _Mistral2.Mistral2ExpArray_get_item(self, *args)
    def set_item(self, *args): return _Mistral2.Mistral2ExpArray_set_item(self, *args)
Mistral2ExpArray_swigregister = _Mistral2.Mistral2ExpArray_swigregister
Mistral2ExpArray_swigregister(Mistral2ExpArray)

class Mistral2IntArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Mistral2.new_Mistral2IntArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2IntArray
    __del__ = lambda self : None;
    def size(self): return _Mistral2.Mistral2IntArray_size(self)
    def add(self, *args): return _Mistral2.Mistral2IntArray_add(self, *args)
    def get_item(self, *args): return _Mistral2.Mistral2IntArray_get_item(self, *args)
    def set_item(self, *args): return _Mistral2.Mistral2IntArray_set_item(self, *args)
Mistral2IntArray_swigregister = _Mistral2.Mistral2IntArray_swigregister
Mistral2IntArray_swigregister(Mistral2IntArray)

class Mistral2DoubleArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Mistral2.new_Mistral2DoubleArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2DoubleArray
    __del__ = lambda self : None;
    def size(self): return _Mistral2.Mistral2DoubleArray_size(self)
    def add(self, *args): return _Mistral2.Mistral2DoubleArray_add(self, *args)
    def get_item(self, *args): return _Mistral2.Mistral2DoubleArray_get_item(self, *args)
    def set_item(self, *args): return _Mistral2.Mistral2DoubleArray_set_item(self, *args)
Mistral2DoubleArray_swigregister = _Mistral2.Mistral2DoubleArray_swigregister
Mistral2DoubleArray_swigregister(Mistral2DoubleArray)

import Numberjack

class Solver(Numberjack.NBJ_STD_Solver):
    def __init__(self, model=None, X=None, FD=False, clause_limit=-1, encoding=None):
        Numberjack.NBJ_STD_Solver.__init__(self, "Mistral2", "Mistral2", model, X, FD, clause_limit, encoding)



