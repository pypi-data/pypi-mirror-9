# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Gurobi', [dirname(__file__)])
        except ImportError:
            import _Gurobi
            return _Gurobi
        if fp is not None:
            try:
                _mod = imp.load_module('_Gurobi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Gurobi = swig_import_helper()
    del swig_import_helper
else:
    import _Gurobi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import MipWrapper
class GurobiSolver(MipWrapper.MipWrapperSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Gurobi.new_GurobiSolver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gurobi.delete_GurobiSolver
    __del__ = lambda self : None;
    def initialise(self, *args): return _Gurobi.GurobiSolver_initialise(self, *args)
    def solve(self): return _Gurobi.GurobiSolver_solve(self)
    def setTimeLimit(self, *args): return _Gurobi.GurobiSolver_setTimeLimit(self, *args)
    def setNodeLimit(self, *args): return _Gurobi.GurobiSolver_setNodeLimit(self, *args)
    def setThreadCount(self, *args): return _Gurobi.GurobiSolver_setThreadCount(self, *args)
    def setVerbosity(self, *args): return _Gurobi.GurobiSolver_setVerbosity(self, *args)
    def getNodes(self): return _Gurobi.GurobiSolver_getNodes(self)
    def is_sat(self): return _Gurobi.GurobiSolver_is_sat(self)
    def is_unsat(self): return _Gurobi.GurobiSolver_is_unsat(self)
    def is_opt(self): return _Gurobi.GurobiSolver_is_opt(self)
    def output_lp(self, *args): return _Gurobi.GurobiSolver_output_lp(self, *args)
    def output_mps(self, *args): return _Gurobi.GurobiSolver_output_mps(self, *args)
    def printStatistics(self): return _Gurobi.GurobiSolver_printStatistics(self)
    def getTime(self): return _Gurobi.GurobiSolver_getTime(self)
    def getOptimalityGap(self): return _Gurobi.GurobiSolver_getOptimalityGap(self)
    def get_value(self, *args): return _Gurobi.GurobiSolver_get_value(self, *args)
GurobiSolver_swigregister = _Gurobi.GurobiSolver_swigregister
GurobiSolver_swigregister(GurobiSolver)

import Numberjack

class Solver(Numberjack.NBJ_STD_Solver):
    def __init__(self, model=None, X=None, FD=False, clause_limit=-1, encoding=None):
        Numberjack.NBJ_STD_Solver.__init__(self, "Gurobi", "MipWrapper", model, X, FD, clause_limit, encoding)



