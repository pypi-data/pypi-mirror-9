# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Gecode', [dirname(__file__)])
        except ImportError:
            import _Gecode
            return _Gecode
        if fp is not None:
            try:
                _mod = imp.load_module('_Gecode', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Gecode = swig_import_helper()
    del swig_import_helper
else:
    import _Gecode
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


NOTVAR = _Gecode.NOTVAR
BOOLVAR = _Gecode.BOOLVAR
INTVARNVAL = _Gecode.INTVARNVAL
INTVARBOUNDS = _Gecode.INTVARBOUNDS
INTVARVALUES = _Gecode.INTVARVALUES
class NJGecodeSpace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_NJGecodeSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(self, *args): return _Gecode.NJGecodeSpace_copy(self, *args)
    def createIntVar(self, *args): return _Gecode.NJGecodeSpace_createIntVar(self, *args)
    def getVar(self, *args): return _Gecode.NJGecodeSpace_getVar(self, *args)
    def assertNotClosed(self): return _Gecode.NJGecodeSpace_assertNotClosed(self)
    def closeNJ(self): return _Gecode.NJGecodeSpace_closeNJ(self)
    def _print(self): return _Gecode.NJGecodeSpace__print(self)
    __swig_destroy__ = _Gecode.delete_NJGecodeSpace
    __del__ = lambda self : None;
NJGecodeSpace_swigregister = _Gecode.NJGecodeSpace_swigregister
NJGecodeSpace_swigregister(NJGecodeSpace)

class Gecode_Expression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    nbj_ident = _swig_property(_Gecode.Gecode_Expression_nbj_ident_get, _Gecode.Gecode_Expression_nbj_ident_set)
    _nval = _swig_property(_Gecode.Gecode_Expression__nval_get, _Gecode.Gecode_Expression__nval_set)
    _lb = _swig_property(_Gecode.Gecode_Expression__lb_get, _Gecode.Gecode_Expression__lb_set)
    _ub = _swig_property(_Gecode.Gecode_Expression__ub_get, _Gecode.Gecode_Expression__ub_set)
    _vals = _swig_property(_Gecode.Gecode_Expression__vals_get, _Gecode.Gecode_Expression__vals_set)
    _vartype = _swig_property(_Gecode.Gecode_Expression__vartype_get, _Gecode.Gecode_Expression__vartype_set)
    _gcvarid = _swig_property(_Gecode.Gecode_Expression__gcvarid_get, _Gecode.Gecode_Expression__gcvarid_set)
    _solver = _swig_property(_Gecode.Gecode_Expression__solver_get, _Gecode.Gecode_Expression__solver_set)
    def has_been_added(self): return _Gecode.Gecode_Expression_has_been_added(self)
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_Expression(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_Expression
    __del__ = lambda self : None;
    def getVariableId(self): return _Gecode.Gecode_Expression_getVariableId(self)
    def get_value(self): return _Gecode.Gecode_Expression_get_value(self)
    def get_size(self): return _Gecode.Gecode_Expression_get_size(self)
    def get_min(self): return _Gecode.Gecode_Expression_get_min(self)
    def get_max(self): return _Gecode.Gecode_Expression_get_max(self)
    def contain(self, *args): return _Gecode.Gecode_Expression_contain(self, *args)
    def add(self, *args): return _Gecode.Gecode_Expression_add(self, *args)
    def getGecodeVar(self): return _Gecode.Gecode_Expression_getGecodeVar(self)
Gecode_Expression_swigregister = _Gecode.Gecode_Expression_swigregister
Gecode_Expression_swigregister(Gecode_Expression)

class Gecode_IntVar(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_IntVar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_IntVar
    __del__ = lambda self : None;
Gecode_IntVar_swigregister = _Gecode.Gecode_IntVar_swigregister
Gecode_IntVar_swigregister(Gecode_IntVar)

class Gecode_Min(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_Min(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_Min
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_Min_add(self, *args)
Gecode_Min_swigregister = _Gecode.Gecode_Min_swigregister
Gecode_Min_swigregister(Gecode_Min)

class Gecode_Max(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_Max(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_Max
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_Max_add(self, *args)
Gecode_Max_swigregister = _Gecode.Gecode_Max_swigregister
Gecode_Max_swigregister(Gecode_Max)

class Gecode_AllDiff(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_AllDiff(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_AllDiff
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_AllDiff_add(self, *args)
Gecode_AllDiff_swigregister = _Gecode.Gecode_AllDiff_swigregister
Gecode_AllDiff_swigregister(Gecode_AllDiff)

class Gecode_Gcc(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_Gcc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_Gcc
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_Gcc_add(self, *args)
Gecode_Gcc_swigregister = _Gecode.Gecode_Gcc_swigregister
Gecode_Gcc_swigregister(Gecode_Gcc)

class Gecode_Element(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_Element(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_Element
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_Element_add(self, *args)
Gecode_Element_swigregister = _Gecode.Gecode_Element_swigregister
Gecode_Element_swigregister(Gecode_Element)

class Gecode_LeqLex(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_LeqLex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_LeqLex
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_LeqLex_add(self, *args)
Gecode_LeqLex_swigregister = _Gecode.Gecode_LeqLex_swigregister
Gecode_LeqLex_swigregister(Gecode_LeqLex)

class Gecode_LessLex(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_LessLex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_LessLex
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_LessLex_add(self, *args)
Gecode_LessLex_swigregister = _Gecode.Gecode_LessLex_swigregister
Gecode_LessLex_swigregister(Gecode_LessLex)

class Gecode_Sum(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_Sum(*args)
        try: self.this.append(this)
        except: self.this = this
    def addVar(self, *args): return _Gecode.Gecode_Sum_addVar(self, *args)
    def addWeight(self, *args): return _Gecode.Gecode_Sum_addWeight(self, *args)
    __swig_destroy__ = _Gecode.delete_Gecode_Sum
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_Sum_add(self, *args)
Gecode_Sum_swigregister = _Gecode.Gecode_Sum_swigregister
Gecode_Sum_swigregister(Gecode_Sum)

class Gecode_binop(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def arity(self): return _Gecode.Gecode_binop_arity(self)
    __swig_destroy__ = _Gecode.delete_Gecode_binop
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_binop_add(self, *args)
Gecode_binop_swigregister = _Gecode.Gecode_binop_swigregister
Gecode_binop_swigregister(Gecode_binop)

class Gecode_mul(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_mul(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_mul
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_mul_add(self, *args)
Gecode_mul_swigregister = _Gecode.Gecode_mul_swigregister
Gecode_mul_swigregister(Gecode_mul)

class Gecode_div(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_div(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_div
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_div_add(self, *args)
Gecode_div_swigregister = _Gecode.Gecode_div_swigregister
Gecode_div_swigregister(Gecode_div)

class Gecode_mod(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_mod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_mod
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_mod_add(self, *args)
Gecode_mod_swigregister = _Gecode.Gecode_mod_swigregister
Gecode_mod_swigregister(Gecode_mod)

class Gecode_and(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_and(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_and
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_and_add(self, *args)
Gecode_and_swigregister = _Gecode.Gecode_and_swigregister
Gecode_and_swigregister(Gecode_and)

class Gecode_or(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_or(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_or
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_or_add(self, *args)
Gecode_or_swigregister = _Gecode.Gecode_or_swigregister
Gecode_or_swigregister(Gecode_or)

class Gecode_eq(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_eq(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_eq
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_eq_add(self, *args)
Gecode_eq_swigregister = _Gecode.Gecode_eq_swigregister
Gecode_eq_swigregister(Gecode_eq)

class Gecode_ne(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_ne(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_ne
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_ne_add(self, *args)
Gecode_ne_swigregister = _Gecode.Gecode_ne_swigregister
Gecode_ne_swigregister(Gecode_ne)

class Gecode_NoOverlap(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_NoOverlap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_NoOverlap
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_NoOverlap_add(self, *args)
Gecode_NoOverlap_swigregister = _Gecode.Gecode_NoOverlap_swigregister
Gecode_NoOverlap_swigregister(Gecode_NoOverlap)

class Gecode_le(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_le(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_le
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_le_add(self, *args)
Gecode_le_swigregister = _Gecode.Gecode_le_swigregister
Gecode_le_swigregister(Gecode_le)

class Gecode_ge(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_ge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_ge
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_ge_add(self, *args)
Gecode_ge_swigregister = _Gecode.Gecode_ge_swigregister
Gecode_ge_swigregister(Gecode_ge)

class Gecode_lt(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_lt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_lt
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_lt_add(self, *args)
Gecode_lt_swigregister = _Gecode.Gecode_lt_swigregister
Gecode_lt_swigregister(Gecode_lt)

class Gecode_gt(Gecode_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_gt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_gt
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_gt_add(self, *args)
Gecode_gt_swigregister = _Gecode.Gecode_gt_swigregister
Gecode_gt_swigregister(Gecode_gt)

class Gecode_Minimise(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_Minimise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_Minimise
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_Minimise_add(self, *args)
Gecode_Minimise_swigregister = _Gecode.Gecode_Minimise_swigregister
Gecode_Minimise_swigregister(Gecode_Minimise)

class Gecode_Maximise(Gecode_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Gecode.new_Gecode_Maximise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_Gecode_Maximise
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.Gecode_Maximise_add(self, *args)
Gecode_Maximise_swigregister = _Gecode.Gecode_Maximise_swigregister
Gecode_Maximise_swigregister(Gecode_Maximise)

class GecodeSolver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    gecodespace = _swig_property(_Gecode.GecodeSolver_gecodespace_get, _Gecode.GecodeSolver_gecodespace_set)
    originalspace = _swig_property(_Gecode.GecodeSolver_originalspace_get, _Gecode.GecodeSolver_originalspace_set)
    def __init__(self): 
        this = _Gecode.new_GecodeSolver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_GecodeSolver
    __del__ = lambda self : None;
    def add(self, *args): return _Gecode.GecodeSolver_add(self, *args)
    def initialise(self, *args): return _Gecode.GecodeSolver_initialise(self, *args)
    def solve(self): return _Gecode.GecodeSolver_solve(self)
    def solveAndRestart(self, *args): return _Gecode.GecodeSolver_solveAndRestart(self, *args)
    def startNewSearch(self): return _Gecode.GecodeSolver_startNewSearch(self)
    def getNextSolution(self): return _Gecode.GecodeSolver_getNextSolution(self)
    def next(self, *args): return _Gecode.GecodeSolver_next(self, *args)
    def get_level(self): return _Gecode.GecodeSolver_get_level(self)
    def propagate(self): return _Gecode.GecodeSolver_propagate(self)
    def save(self): return _Gecode.GecodeSolver_save(self)
    def post(self, *args): return _Gecode.GecodeSolver_post(self, *args)
    def undo(self, *args): return _Gecode.GecodeSolver_undo(self, *args)
    def deduce(self, *args): return _Gecode.GecodeSolver_deduce(self, *args)
    def branch_right(self): return _Gecode.GecodeSolver_branch_right(self)
    def store_solution(self): return _Gecode.GecodeSolver_store_solution(self)
    def setHeuristic(self, *args): return _Gecode.GecodeSolver_setHeuristic(self, *args)
    def setFailureLimit(self, *args): return _Gecode.GecodeSolver_setFailureLimit(self, *args)
    def setNodeLimit(self, *args): return _Gecode.GecodeSolver_setNodeLimit(self, *args)
    def setTimeLimit(self, *args): return _Gecode.GecodeSolver_setTimeLimit(self, *args)
    def setVerbosity(self, *args): return _Gecode.GecodeSolver_setVerbosity(self, *args)
    def setRandomized(self, *args): return _Gecode.GecodeSolver_setRandomized(self, *args)
    def setRandomSeed(self, *args): return _Gecode.GecodeSolver_setRandomSeed(self, *args)
    def forceFiniteDomain(self, *args): return _Gecode.GecodeSolver_forceFiniteDomain(self, *args)
    def addNogood(self, *args): return _Gecode.GecodeSolver_addNogood(self, *args)
    def guide(self, *args): return _Gecode.GecodeSolver_guide(self, *args)
    def backtrackTo(self, *args): return _Gecode.GecodeSolver_backtrackTo(self, *args)
    def upOneLevel(self): return _Gecode.GecodeSolver_upOneLevel(self)
    def presolve(self): return _Gecode.GecodeSolver_presolve(self)
    def assign(self, *args): return _Gecode.GecodeSolver_assign(self, *args)
    def increase_init_level(self, *args): return _Gecode.GecodeSolver_increase_init_level(self, *args)
    def decrease_init_level(self, *args): return _Gecode.GecodeSolver_decrease_init_level(self, *args)
    def reset(self, *args): return _Gecode.GecodeSolver_reset(self, *args)
    def setLowerBounds(self, *args): return _Gecode.GecodeSolver_setLowerBounds(self, *args)
    def setUpperBounds(self, *args): return _Gecode.GecodeSolver_setUpperBounds(self, *args)
    def setRestartNogood(self): return _Gecode.GecodeSolver_setRestartNogood(self)
    def is_opt(self): return _Gecode.GecodeSolver_is_opt(self)
    def is_sat(self): return _Gecode.GecodeSolver_is_sat(self)
    def is_unsat(self): return _Gecode.GecodeSolver_is_unsat(self)
    def printStatistics(self): return _Gecode.GecodeSolver_printStatistics(self)
    def getBacktracks(self): return _Gecode.GecodeSolver_getBacktracks(self)
    def getNodes(self): return _Gecode.GecodeSolver_getNodes(self)
    def getFailures(self): return _Gecode.GecodeSolver_getFailures(self)
    def getChecks(self): return _Gecode.GecodeSolver_getChecks(self)
    def getPropags(self): return _Gecode.GecodeSolver_getPropags(self)
    def getTime(self): return _Gecode.GecodeSolver_getTime(self)
    def getRandomNumber(self): return _Gecode.GecodeSolver_getRandomNumber(self)
    def getNumVariables(self): return _Gecode.GecodeSolver_getNumVariables(self)
    def getNumConstraints(self): return _Gecode.GecodeSolver_getNumConstraints(self)
    def num_vars(self): return _Gecode.GecodeSolver_num_vars(self)
GecodeSolver_swigregister = _Gecode.GecodeSolver_swigregister
GecodeSolver_swigregister(GecodeSolver)

class GecodeExpArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Gecode.new_GecodeExpArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_GecodeExpArray
    __del__ = lambda self : None;
    def size(self): return _Gecode.GecodeExpArray_size(self)
    def add(self, *args): return _Gecode.GecodeExpArray_add(self, *args)
    def get_item(self, *args): return _Gecode.GecodeExpArray_get_item(self, *args)
    def set_item(self, *args): return _Gecode.GecodeExpArray_set_item(self, *args)
GecodeExpArray_swigregister = _Gecode.GecodeExpArray_swigregister
GecodeExpArray_swigregister(GecodeExpArray)

class GecodeIntArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Gecode.new_GecodeIntArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_GecodeIntArray
    __del__ = lambda self : None;
    def size(self): return _Gecode.GecodeIntArray_size(self)
    def add(self, *args): return _Gecode.GecodeIntArray_add(self, *args)
    def get_item(self, *args): return _Gecode.GecodeIntArray_get_item(self, *args)
    def set_item(self, *args): return _Gecode.GecodeIntArray_set_item(self, *args)
GecodeIntArray_swigregister = _Gecode.GecodeIntArray_swigregister
GecodeIntArray_swigregister(GecodeIntArray)

class GecodeDoubleArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Gecode.new_GecodeDoubleArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Gecode.delete_GecodeDoubleArray
    __del__ = lambda self : None;
    def size(self): return _Gecode.GecodeDoubleArray_size(self)
    def add(self, *args): return _Gecode.GecodeDoubleArray_add(self, *args)
    def get_item(self, *args): return _Gecode.GecodeDoubleArray_get_item(self, *args)
    def set_item(self, *args): return _Gecode.GecodeDoubleArray_set_item(self, *args)
GecodeDoubleArray_swigregister = _Gecode.GecodeDoubleArray_swigregister
GecodeDoubleArray_swigregister(GecodeDoubleArray)

import Numberjack

class Solver(Numberjack.NBJ_STD_Solver):
    def __init__(self, model=None, X=None, FD=False, clause_limit=-1, encoding=None):
        Numberjack.NBJ_STD_Solver.__init__(self, "Gecode", "Gecode", model, X, FD, clause_limit, encoding)



