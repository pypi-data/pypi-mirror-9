# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MipWrapper', [dirname(__file__)])
        except ImportError:
            import _MipWrapper
            return _MipWrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_MipWrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MipWrapper = swig_import_helper()
    del swig_import_helper
else:
    import _MipWrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class LINEAR_ARG(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    expr = _swig_property(_MipWrapper.LINEAR_ARG_expr_get, _MipWrapper.LINEAR_ARG_expr_set)
    coef = _swig_property(_MipWrapper.LINEAR_ARG_coef_get, _MipWrapper.LINEAR_ARG_coef_set)
    offset = _swig_property(_MipWrapper.LINEAR_ARG_offset_get, _MipWrapper.LINEAR_ARG_offset_set)
    def __init__(self): 
        this = _MipWrapper.new_LINEAR_ARG()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_LINEAR_ARG
    __del__ = lambda self : None;
LINEAR_ARG_swigregister = _MipWrapper.LINEAR_ARG_swigregister
LINEAR_ARG_swigregister(LINEAR_ARG)
cvar = _MipWrapper.cvar
UNSAT = cvar.UNSAT
SAT = cvar.SAT
UNKNOWN = cvar.UNKNOWN
LUBY = cvar.LUBY
GEOMETRIC = cvar.GEOMETRIC
GLUBY = cvar.GLUBY

class MipWrapper_Expression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _ident = _swig_property(_MipWrapper.MipWrapper_Expression__ident_get, _MipWrapper.MipWrapper_Expression__ident_set)
    nbj_ident = _swig_property(_MipWrapper.MipWrapper_Expression_nbj_ident_get, _MipWrapper.MipWrapper_Expression_nbj_ident_set)
    _solver = _swig_property(_MipWrapper.MipWrapper_Expression__solver_get, _MipWrapper.MipWrapper_Expression__solver_set)
    _expr_encoding = _swig_property(_MipWrapper.MipWrapper_Expression__expr_encoding_get, _MipWrapper.MipWrapper_Expression__expr_encoding_set)
    _encoding = _swig_property(_MipWrapper.MipWrapper_Expression__encoding_get, _MipWrapper.MipWrapper_Expression__encoding_set)
    _var = _swig_property(_MipWrapper.MipWrapper_Expression__var_get, _MipWrapper.MipWrapper_Expression__var_set)
    _lower = _swig_property(_MipWrapper.MipWrapper_Expression__lower_get, _MipWrapper.MipWrapper_Expression__lower_set)
    _upper = _swig_property(_MipWrapper.MipWrapper_Expression__upper_get, _MipWrapper.MipWrapper_Expression__upper_set)
    _coef = _swig_property(_MipWrapper.MipWrapper_Expression__coef_get, _MipWrapper.MipWrapper_Expression__coef_set)
    def leq(self, *args): return _MipWrapper.MipWrapper_Expression_leq(self, *args)
    def lt(self, *args): return _MipWrapper.MipWrapper_Expression_lt(self, *args)
    def geq(self, *args): return _MipWrapper.MipWrapper_Expression_geq(self, *args)
    def gt(self, *args): return _MipWrapper.MipWrapper_Expression_gt(self, *args)
    def eq(self, *args): return _MipWrapper.MipWrapper_Expression_eq(self, *args)
    def neq(self, *args): return _MipWrapper.MipWrapper_Expression_neq(self, *args)
    _continuous = _swig_property(_MipWrapper.MipWrapper_Expression__continuous_get, _MipWrapper.MipWrapper_Expression__continuous_set)
    def get_size(self): return _MipWrapper.MipWrapper_Expression_get_size(self)
    def get_max(self): return _MipWrapper.MipWrapper_Expression_get_max(self)
    def get_min(self): return _MipWrapper.MipWrapper_Expression_get_min(self)
    def has_been_added(self): return _MipWrapper.MipWrapper_Expression_has_been_added(self)
    def initialise(self, *args): return _MipWrapper.MipWrapper_Expression_initialise(self, *args)
    def display(self): return _MipWrapper.MipWrapper_Expression_display(self)
    def __init__(self): 
        this = _MipWrapper.new_MipWrapper_Expression()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_Expression
    __del__ = lambda self : None;
    def encode(self, *args): return _MipWrapper.MipWrapper_Expression_encode(self, *args)
    def add(self, *args): return _MipWrapper.MipWrapper_Expression_add(self, *args)
    def for_linear(self): return _MipWrapper.MipWrapper_Expression_for_linear(self)
    def for_linear_size(self): return _MipWrapper.MipWrapper_Expression_for_linear_size(self)
    def get_whatever_value(self): return _MipWrapper.MipWrapper_Expression_get_whatever_value(self)
MipWrapper_Expression_swigregister = _MipWrapper.MipWrapper_Expression_swigregister
MipWrapper_Expression_swigregister(MipWrapper_Expression)

class MipWrapper_FloatVar(MipWrapper_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_FloatVar(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_value(self): return _MipWrapper.MipWrapper_FloatVar_get_value(self)
    def get_whatever_value(self): return _MipWrapper.MipWrapper_FloatVar_get_whatever_value(self)
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_FloatVar
    __del__ = lambda self : None;
MipWrapper_FloatVar_swigregister = _MipWrapper.MipWrapper_FloatVar_swigregister
MipWrapper_FloatVar_swigregister(MipWrapper_FloatVar)

class MipWrapper_IntVar(MipWrapper_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_IntVar(*args)
        try: self.this.append(this)
        except: self.this = this
    def encode(self, *args): return _MipWrapper.MipWrapper_IntVar_encode(self, *args)
    def add(self, *args): return _MipWrapper.MipWrapper_IntVar_add(self, *args)
    def get_value(self): return _MipWrapper.MipWrapper_IntVar_get_value(self)
    def get_whatever_value(self): return _MipWrapper.MipWrapper_IntVar_get_whatever_value(self)
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_IntVar
    __del__ = lambda self : None;
MipWrapper_IntVar_swigregister = _MipWrapper.MipWrapper_IntVar_swigregister
MipWrapper_IntVar_swigregister(MipWrapper_IntVar)

class MipWrapper_Flow(MipWrapper_FloatVar):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_Flow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_Flow
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_Flow_add(self, *args)
    def initbounds(self): return _MipWrapper.MipWrapper_Flow_initbounds(self)
    def addVar(self, *args): return _MipWrapper.MipWrapper_Flow_addVar(self, *args)
MipWrapper_Flow_swigregister = _MipWrapper.MipWrapper_Flow_swigregister
MipWrapper_Flow_swigregister(MipWrapper_Flow)

class MipWrapper_AllDiff(MipWrapper_Flow):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_AllDiff(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_AllDiff
    __del__ = lambda self : None;
MipWrapper_AllDiff_swigregister = _MipWrapper.MipWrapper_AllDiff_swigregister
MipWrapper_AllDiff_swigregister(MipWrapper_AllDiff)

class MipWrapper_Gcc(MipWrapper_Flow):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_Gcc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_Gcc
    __del__ = lambda self : None;
MipWrapper_Gcc_swigregister = _MipWrapper.MipWrapper_Gcc_swigregister
MipWrapper_Gcc_swigregister(MipWrapper_Gcc)

class MipWrapper_Sum(MipWrapper_FloatVar):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _offset = _swig_property(_MipWrapper.MipWrapper_Sum__offset_get, _MipWrapper.MipWrapper_Sum__offset_set)
    _vars = _swig_property(_MipWrapper.MipWrapper_Sum__vars_get, _MipWrapper.MipWrapper_Sum__vars_set)
    _weights = _swig_property(_MipWrapper.MipWrapper_Sum__weights_get, _MipWrapper.MipWrapper_Sum__weights_set)
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_Sum(*args)
        try: self.this.append(this)
        except: self.this = this
    def leq(self, *args): return _MipWrapper.MipWrapper_Sum_leq(self, *args)
    def geq(self, *args): return _MipWrapper.MipWrapper_Sum_geq(self, *args)
    def eq(self, *args): return _MipWrapper.MipWrapper_Sum_eq(self, *args)
    def neq(self, *args): return _MipWrapper.MipWrapper_Sum_neq(self, *args)
    def encode(self, *args): return _MipWrapper.MipWrapper_Sum_encode(self, *args)
    def initialise(self): return _MipWrapper.MipWrapper_Sum_initialise(self)
    def addVar(self, *args): return _MipWrapper.MipWrapper_Sum_addVar(self, *args)
    def addWeight(self, *args): return _MipWrapper.MipWrapper_Sum_addWeight(self, *args)
    def set_rhs(self, *args): return _MipWrapper.MipWrapper_Sum_set_rhs(self, *args)
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_Sum
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_Sum_add(self, *args)
    def for_linear(self): return _MipWrapper.MipWrapper_Sum_for_linear(self)
    def for_linear_size(self): return _MipWrapper.MipWrapper_Sum_for_linear_size(self)
    def get_value(self): return _MipWrapper.MipWrapper_Sum_get_value(self)
MipWrapper_Sum_swigregister = _MipWrapper.MipWrapper_Sum_swigregister
MipWrapper_Sum_swigregister(MipWrapper_Sum)

class MipWrapper_add(MipWrapper_Sum):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_add(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_add
    __del__ = lambda self : None;
MipWrapper_add_swigregister = _MipWrapper.MipWrapper_add_swigregister
MipWrapper_add_swigregister(MipWrapper_add)

class MipWrapper_sub(MipWrapper_Sum):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_sub(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_sub
    __del__ = lambda self : None;
MipWrapper_sub_swigregister = _MipWrapper.MipWrapper_sub_swigregister
MipWrapper_sub_swigregister(MipWrapper_sub)

class MipWrapper_mul(MipWrapper_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_mul(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_mul
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_mul_add(self, *args)
    def initbounds(self): return _MipWrapper.MipWrapper_mul_initbounds(self)
MipWrapper_mul_swigregister = _MipWrapper.MipWrapper_mul_swigregister
MipWrapper_mul_swigregister(MipWrapper_mul)

class MipWrapper_mod(MipWrapper_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_mod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_mod
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_mod_add(self, *args)
    def initbounds(self): return _MipWrapper.MipWrapper_mod_initbounds(self)
MipWrapper_mod_swigregister = _MipWrapper.MipWrapper_mod_swigregister
MipWrapper_mod_swigregister(MipWrapper_mod)

class MipWrapper_neg(MipWrapper_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_neg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_neg
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_neg_add(self, *args)
    def initbounds(self): return _MipWrapper.MipWrapper_neg_initbounds(self)
MipWrapper_neg_swigregister = _MipWrapper.MipWrapper_neg_swigregister
MipWrapper_neg_swigregister(MipWrapper_neg)

class MipWrapper_Abs(MipWrapper_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_Abs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_Abs
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_Abs_add(self, *args)
    def initbounds(self): return _MipWrapper.MipWrapper_Abs_initbounds(self)
MipWrapper_Abs_swigregister = _MipWrapper.MipWrapper_Abs_swigregister
MipWrapper_Abs_swigregister(MipWrapper_Abs)

class MipWrapper_binop(MipWrapper_FloatVar):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_binop
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_binop_add(self, *args)
MipWrapper_binop_swigregister = _MipWrapper.MipWrapper_binop_swigregister
MipWrapper_binop_swigregister(MipWrapper_binop)

class MipWrapper_NoOverlap(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_NoOverlap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_NoOverlap
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_NoOverlap_add(self, *args)
MipWrapper_NoOverlap_swigregister = _MipWrapper.MipWrapper_NoOverlap_swigregister
MipWrapper_NoOverlap_swigregister(MipWrapper_NoOverlap)

class MipWrapper_Precedence(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_Precedence(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_Precedence
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_Precedence_add(self, *args)
MipWrapper_Precedence_swigregister = _MipWrapper.MipWrapper_Precedence_swigregister
MipWrapper_Precedence_swigregister(MipWrapper_Precedence)

class MipWrapper_eq(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_eq(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_eq
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_eq_add(self, *args)
MipWrapper_eq_swigregister = _MipWrapper.MipWrapper_eq_swigregister
MipWrapper_eq_swigregister(MipWrapper_eq)

class MipWrapper_ne(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_ne(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_ne
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_ne_add(self, *args)
MipWrapper_ne_swigregister = _MipWrapper.MipWrapper_ne_swigregister
MipWrapper_ne_swigregister(MipWrapper_ne)

class MipWrapper_le(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_le(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_le
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_le_add(self, *args)
MipWrapper_le_swigregister = _MipWrapper.MipWrapper_le_swigregister
MipWrapper_le_swigregister(MipWrapper_le)

class MipWrapper_ge(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_ge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_ge
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_ge_add(self, *args)
MipWrapper_ge_swigregister = _MipWrapper.MipWrapper_ge_swigregister
MipWrapper_ge_swigregister(MipWrapper_ge)

class MipWrapper_lt(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_lt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_lt
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_lt_add(self, *args)
MipWrapper_lt_swigregister = _MipWrapper.MipWrapper_lt_swigregister
MipWrapper_lt_swigregister(MipWrapper_lt)

class MipWrapper_gt(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_gt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_gt
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_gt_add(self, *args)
MipWrapper_gt_swigregister = _MipWrapper.MipWrapper_gt_swigregister
MipWrapper_gt_swigregister(MipWrapper_gt)

class MipWrapper_not(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_not(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_not
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_not_add(self, *args)
MipWrapper_not_swigregister = _MipWrapper.MipWrapper_not_swigregister
MipWrapper_not_swigregister(MipWrapper_not)

class MipWrapper_and(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_and(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_and
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_and_add(self, *args)
MipWrapper_and_swigregister = _MipWrapper.MipWrapper_and_swigregister
MipWrapper_and_swigregister(MipWrapper_and)

class MipWrapper_or(MipWrapper_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_or(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_or
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_or_add(self, *args)
MipWrapper_or_swigregister = _MipWrapper.MipWrapper_or_swigregister
MipWrapper_or_swigregister(MipWrapper_or)

class MipWrapper_Minimise(MipWrapper_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_Minimise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_Minimise
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_Minimise_add(self, *args)
MipWrapper_Minimise_swigregister = _MipWrapper.MipWrapper_Minimise_swigregister
MipWrapper_Minimise_swigregister(MipWrapper_Minimise)

class MipWrapper_Maximise(MipWrapper_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MipWrapper.new_MipWrapper_Maximise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapper_Maximise
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapper_Maximise_add(self, *args)
MipWrapper_Maximise_swigregister = _MipWrapper.MipWrapper_Maximise_swigregister
MipWrapper_Maximise_swigregister(MipWrapper_Maximise)

class LinearConstraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _variables = _swig_property(_MipWrapper.LinearConstraint__variables_get, _MipWrapper.LinearConstraint__variables_set)
    _coefficients = _swig_property(_MipWrapper.LinearConstraint__coefficients_get, _MipWrapper.LinearConstraint__coefficients_set)
    _lhs = _swig_property(_MipWrapper.LinearConstraint__lhs_get, _MipWrapper.LinearConstraint__lhs_set)
    _rhs = _swig_property(_MipWrapper.LinearConstraint__rhs_get, _MipWrapper.LinearConstraint__rhs_set)
    def __init__(self, *args): 
        this = _MipWrapper.new_LinearConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_LinearConstraint
    __del__ = lambda self : None;
    def add_coef(self, *args): return _MipWrapper.LinearConstraint_add_coef(self, *args)
    def display(self): return _MipWrapper.LinearConstraint_display(self)
LinearConstraint_swigregister = _MipWrapper.LinearConstraint_swigregister
LinearConstraint_swigregister(LinearConstraint)

class MipWrapperSolver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _constraints = _swig_property(_MipWrapper.MipWrapperSolver__constraints_get, _MipWrapper.MipWrapperSolver__constraints_set)
    _obj = _swig_property(_MipWrapper.MipWrapperSolver__obj_get, _MipWrapper.MipWrapperSolver__obj_set)
    _obj_coef = _swig_property(_MipWrapper.MipWrapperSolver__obj_coef_get, _MipWrapper.MipWrapperSolver__obj_coef_set)
    var_counter = _swig_property(_MipWrapper.MipWrapperSolver_var_counter_get, _MipWrapper.MipWrapperSolver_var_counter_set)
    def get_lin_cons_size(self): return _MipWrapper.MipWrapperSolver_get_lin_cons_size(self)
    def __init__(self): 
        this = _MipWrapper.new_MipWrapperSolver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapperSolver
    __del__ = lambda self : None;
    def add(self, *args): return _MipWrapper.MipWrapperSolver_add(self, *args)
    def add_expr(self, *args): return _MipWrapper.MipWrapperSolver_add_expr(self, *args)
    def add_int_array(self, *args): return _MipWrapper.MipWrapperSolver_add_int_array(self, *args)
    def add_var_array(self, *args): return _MipWrapper.MipWrapperSolver_add_var_array(self, *args)
    def initialise(self, *args): return _MipWrapper.MipWrapperSolver_initialise(self, *args)
    def solve(self): return _MipWrapper.MipWrapperSolver_solve(self)
    def solveAndRestart(self, *args): return _MipWrapper.MipWrapperSolver_solveAndRestart(self, *args)
    def startNewSearch(self): return _MipWrapper.MipWrapperSolver_startNewSearch(self)
    def getNextSolution(self): return _MipWrapper.MipWrapperSolver_getNextSolution(self)
    def sacPreprocess(self, *args): return _MipWrapper.MipWrapperSolver_sacPreprocess(self, *args)
    def setHeuristic(self, *args): return _MipWrapper.MipWrapperSolver_setHeuristic(self, *args)
    def setFailureLimit(self, *args): return _MipWrapper.MipWrapperSolver_setFailureLimit(self, *args)
    def setTimeLimit(self, *args): return _MipWrapper.MipWrapperSolver_setTimeLimit(self, *args)
    def setOptimalityGap(self, *args): return _MipWrapper.MipWrapperSolver_setOptimalityGap(self, *args)
    def setNodeLimit(self, *args): return _MipWrapper.MipWrapperSolver_setNodeLimit(self, *args)
    def setVerbosity(self, *args): return _MipWrapper.MipWrapperSolver_setVerbosity(self, *args)
    def setRandomized(self, *args): return _MipWrapper.MipWrapperSolver_setRandomized(self, *args)
    def setRandomSeed(self, *args): return _MipWrapper.MipWrapperSolver_setRandomSeed(self, *args)
    def is_sat(self): return _MipWrapper.MipWrapperSolver_is_sat(self)
    def is_opt(self): return _MipWrapper.MipWrapperSolver_is_opt(self)
    def is_unsat(self): return _MipWrapper.MipWrapperSolver_is_unsat(self)
    def printStatistics(self): return _MipWrapper.MipWrapperSolver_printStatistics(self)
    def getNumVariables(self): return _MipWrapper.MipWrapperSolver_getNumVariables(self)
    def getNumConstraints(self): return _MipWrapper.MipWrapperSolver_getNumConstraints(self)
    def getBacktracks(self): return _MipWrapper.MipWrapperSolver_getBacktracks(self)
    def getNodes(self): return _MipWrapper.MipWrapperSolver_getNodes(self)
    def getFailures(self): return _MipWrapper.MipWrapperSolver_getFailures(self)
    def getChecks(self): return _MipWrapper.MipWrapperSolver_getChecks(self)
    def getPropags(self): return _MipWrapper.MipWrapperSolver_getPropags(self)
    def getTime(self): return _MipWrapper.MipWrapperSolver_getTime(self)
    def getOptimalityGap(self): return _MipWrapper.MipWrapperSolver_getOptimalityGap(self)
    def get_value(self, *args): return _MipWrapper.MipWrapperSolver_get_value(self, *args)
MipWrapperSolver_swigregister = _MipWrapper.MipWrapperSolver_swigregister
MipWrapperSolver_swigregister(MipWrapperSolver)

class MipWrapperExpArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _MipWrapper.new_MipWrapperExpArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapperExpArray
    __del__ = lambda self : None;
    def size(self): return _MipWrapper.MipWrapperExpArray_size(self)
    def add(self, *args): return _MipWrapper.MipWrapperExpArray_add(self, *args)
    def set_item(self, *args): return _MipWrapper.MipWrapperExpArray_set_item(self, *args)
    def get_item(self, *args): return _MipWrapper.MipWrapperExpArray_get_item(self, *args)
MipWrapperExpArray_swigregister = _MipWrapper.MipWrapperExpArray_swigregister
MipWrapperExpArray_swigregister(MipWrapperExpArray)

class MipWrapperIntArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _MipWrapper.new_MipWrapperIntArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapperIntArray
    __del__ = lambda self : None;
    def size(self): return _MipWrapper.MipWrapperIntArray_size(self)
    def add(self, *args): return _MipWrapper.MipWrapperIntArray_add(self, *args)
    def set_item(self, *args): return _MipWrapper.MipWrapperIntArray_set_item(self, *args)
    def get_item(self, *args): return _MipWrapper.MipWrapperIntArray_get_item(self, *args)
MipWrapperIntArray_swigregister = _MipWrapper.MipWrapperIntArray_swigregister
MipWrapperIntArray_swigregister(MipWrapperIntArray)

class MipWrapperDoubleArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _MipWrapper.new_MipWrapperDoubleArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MipWrapper.delete_MipWrapperDoubleArray
    __del__ = lambda self : None;
    def size(self): return _MipWrapper.MipWrapperDoubleArray_size(self)
    def add(self, *args): return _MipWrapper.MipWrapperDoubleArray_add(self, *args)
    def set_item(self, *args): return _MipWrapper.MipWrapperDoubleArray_set_item(self, *args)
    def get_item(self, *args): return _MipWrapper.MipWrapperDoubleArray_get_item(self, *args)
MipWrapperDoubleArray_swigregister = _MipWrapper.MipWrapperDoubleArray_swigregister
MipWrapperDoubleArray_swigregister(MipWrapperDoubleArray)

import Numberjack

class Solver(Numberjack.NBJ_STD_Solver):
    def __init__(self, model=None, X=None, FD=False, clause_limit=-1, encoding=None):
        Numberjack.NBJ_STD_Solver.__init__(self, "MipWrapper", "MipWrapper", model, X, FD, clause_limit, encoding)



