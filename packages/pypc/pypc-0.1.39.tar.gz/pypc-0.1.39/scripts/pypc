#!/usr/bin/env python
#-*- coding: utf-8 -*-

import os
import sys
import ntpath
import argparse
import getpass # experimental
from pypc.pypc import Package
from pypc import __title__, __version__

def argparser():
    """
    todo:
        -o - offline (does not attempt pip install dependencies)
    """
    parser = argparse.ArgumentParser(description=__title__)
    parser.add_argument('-m', '--minimal', help="Minimal mode, setup.py only",
                        action="store_true")
    parser.add_argument('-V', help="Displays the pypc version",
                        action="version", version="%s v%s" \
                            % (__title__, __version__))
    parser.add_argument(dest="path", help="Package full path")
    parser.add_argument('--author', dest="author", help="Author's name",
                        default=getpass.getuser())
    parser.add_argument('--email', dest="email", help="Author's email",
                        default='')
    parser.add_argument('--version', dest="version",
                        help="Your package's version: defaults to v0.0.1" \
                            "(use -V for pypc version)",
                        default='0.0.1')
    parser.add_argument('--desc', dest="desc", help="Package desc",
                        default='no description available')
    parser.add_argument('--url', dest="url", help="Package url",
                        default='')
    parser.add_argument('--rm', dest="readme", help="README filename",
                        default='README.rst')
    parser.add_argument('--fs', dest="fs", help=".json File Structure",
                        default=None)
    return parser

def normalize_path(path):
    if os.sep in path:
        return path
    return os.path.join(os.getcwd(), path)

if __name__ == "__main__":
    parser = argparser()
    args = parser.parse_args()
    if args.fs:
        # It'd be nice to collect analytics on how often this is req'd.
        # Cookiecutter + Donald Stufft lead me to believe often
        # see: groups.google.com/forum/#!topic/pypa-dev/eaku1xvUVHU
        raise NotImplementedError("")
    options = {
        'path': normalize_path(args.path),
        'pkgname' : ntpath.split(args.path)[-1],
        'author': args.author,
        'email': args.email,
        'version': args.version,
        'classifiers': [], #todo        
        'url': args.url,
        'desc': args.desc,
        'readme': args.readme,
        'venv': 'venv'
        }
    if args.minimal:
        options['dependencies'] = {}
    pkg = Package(**options)
    pkg.new(fs=args.fs, minimal=args.minimal)
    if not args.minimal:
        pkg.install_virtualenv()
        pkg.install_requirements()
