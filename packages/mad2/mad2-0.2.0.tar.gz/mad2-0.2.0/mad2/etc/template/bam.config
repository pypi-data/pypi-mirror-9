decompress: &bam_decompress
  description: 'convert Bam to Sam'
  defaults:
    output: "{{ basename|re_sub('.bam$', '.sam') }}"
  template: |
    samtools view -h {{ fullpath }} > {{ output }}
stats:
  description: 'run flagstats'
  defaults:
    output: "{{ basename|re_sub('.sam$', '.flagstat') }}"
  template: |
    samtools flagstat {{ fullpath }} > {{ output }}
coveragebg:
  description: create a coverage bedgraph
  defaults:
    createdWith: '$(bedtools --version)'
    output: '{{ basename|re_sub(".bam$", "") }}.bedgraph'
  template: |
    bedtools genomecov \
        -ibam {{ fullpath }} \
        -bga -split \
        | bgzip -c \
        > {{ output }} ;
        tabix -p bed {{ output }}
htseq_count:
  description: 'Count reads using htseq-count'
  defaults:
    pbs_mem: 4gb
    pbs_group: lp_symbiosys
    pbs_queue: qreg
    pbs_walltime: '23:59:58'
    htseq_stranded: "no"
    htseq_minqual: 5
    genome_gtf_file: "/ddn1/vol1/leuven_groups/lts_00002/lcb/resources/mouse/{{genome_build}}/{{genome_build}}.gtf"
    htseq_idattr: gene_name
    htseq_mode: union
    htseq_feature_type: exon
    output: '{{ sample_name }}.counts'
    readsortout: '{{ sample_name }}.readname.sorted'
sort_dedup:
  description: Sort and deduplicate the bam file
  defaults:
    pbs_mem: 9Gb
    pbs_queue: qreg
    pbs_walltime: '29:59:59'
    pbs_group: lp_symbiosys
    job_name: '{{ sample_name }}'
    output_sort: '{{ sample_name }}.sort.bam'
    output_stats: '{{ sample_name }}.stats'
    output: '{{ sample_name }}.sort.dedup.bam'
    picard_dir: /ddn1/vol1/leuven_groups/lts_00002/software/picard/current
  template: |
    if [ ! -f  "{{ output_sort }}" ];
    then
      samtools sort -m 3G {{ fullpath }} {{ sample_name }}.sort;
    fi
    java -Xmx8g -Djava.io.tmpdir="$VSC_SCRATCH/tmp"  \
        -jar "{{picard_dir}}/MarkDuplicates.jar" \
        I="{{ output_sort }}" \
        O="{{ output }}" \
        M="{{ output_stats }}" \
        CREATE_INDEX=true \
        MAX_RECORDS_IN_RAM=5000000 \
        VALIDATION_STRINGENCY=SILENT \
        QUIET=true \
        REMOVE_DUPLICATES=true
mpileup:
  defaults:
    mpileup_min_mapq : 4
    mpileup_min_baseq : 13
    mpileup_max_per_bam_depth_snvs : 8000
    mpileup_max_per_bam_depth_indels : 8000
    bcf_output: '{{ sample_name }}.raw.bcf'
    vcf_output: '{{ sample_name }}.vcf'
    genome_fasta: "/ddn1/vol1/leuven_groups/lts_00002/lcb/resources/mouse/{{genome_build}}/{{genome_build}}.fa"
  template: |
    samtools mpileup \
        -d "{{ mpileup_max_per_bam_depth_snvs }}" \
        -L "{{ mpileup_max_per_bam_depth_indels }}" \
        -q "{{ mpileup_min_mapq }}" \
        -Q "{{ mpileup_min_baseq }}" \
        -u -D -S \
        -f "{{ genome_fasta }}" \
        {{ inputfile }} \
      | bcftools view -bvcg - > "{{ bcf_output }}" && \
    bcftools view {{ bcf_output }} \
      | vcfutils.pl varFilter -D100 \
      > {{ vcf_output }}
