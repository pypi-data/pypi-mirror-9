{
  "id": 55, 
  "title": "Cross-Site Scripting (XSS)", 
  "severity": "high", 
  "description": [
    "Client-side scripts are used extensively by modern web applications.", 
    "They perform from simple functions (such as the formatting of text) up", 
    "to full\nmanipulation of client-side data and Operating System", 
    "interaction.\n\nCross Site Scripting (XSS) allows clients to inject", 
    "scripts into a request and\nhave the server return the script to the", 
    "client in the response. This occurs\nbecause the application is taking", 
    "untrusted data (in this example, from the client)\nand reusing it", 
    "without performing any validation or sanitisation.\n\nIf the injected", 
    "script is returned immediately this is known as reflected XSS.\nIf the", 
    "injected script is stored by the server and returned to any client", 
    "visiting\nthe affected page, then this is known as persistent XSS (also", 
    "stored XSS).\n\nThe tool has discovered that it is possible to insert", 
    "script content directly into\nHTML element content."
  ], 
  "fix": {
    "effort": 50, 
    "guidance": [
      "To remedy XSS vulnerabilities, it is important to never use untrusted", 
      "or unfiltered\ndata within the code of a HTML page.\n\nUntrusted data can", 
      "originate not only form the client but potentially a third\nparty or", 
      "previously uploaded file etc.\n\nFiltering of untrusted data typically", 
      "involves converting special characters to\ntheir HTML entity encoded", 
      "counterparts (however, other methods do exist, see references).\nThese", 
      "special characters include:\n\n* `&`\n* `<`\n* `>`\n* `\"`\n* `'`\n* `/`\n\nAn", 
      "example of HTML entity encoding is converting `<` to `&lt;`.\n\nAlthough", 
      "it is possible to filter untrusted input, there are five locations", 
      "within an HTML page where untrusted input (even if it has been", 
      "filtered) should\nnever be placed:\n\n1. Directly in a script.\n2. Inside", 
      "an HTML comment.\n3. In an attribute name.\n4. In a tag name.\n5.", 
      "Directly in CSS.\n\nEach of these locations have their own form of", 
      "escaping and filtering.\n\n_Because many browsers attempt to implement", 
      "XSS protection, any manual verification\nof this finding should be", 
      "conducted using multiple different browsers and browser\nversions._"
    ]
  }, 
  "tags": [
    "xss", 
    "regexp", 
    "injection", 
    "script"
  ], 
  "references": [
    {
      "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting", 
      "title": "WASC"
    }, 
    {
      "url": "http://secunia.com/advisories/9716/", 
      "title": "Secunia"
    }, 
    {
      "url": "http://ha.ckers.org/xss.html", 
      "title": "ha.ckers"
    }, 
    {
      "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet", 
      "title": "OWASP"
    }
  ]
}