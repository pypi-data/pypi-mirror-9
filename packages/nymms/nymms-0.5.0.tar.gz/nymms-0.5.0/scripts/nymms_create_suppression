#!/usr/bin/env python

"""CLI tool to create new reactor suppression filters"""

import os
import socket

from nymms.schemas import Suppression
from nymms.utils import cli, parse_time
from nymms.suppress.sdb_suppress import SDBSuppressionManager
from nymms.config import config

import arrow


def get_ipaddr():
    """This is probably the most consistent & cross platform way
    to figure out what our IP address is"""
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('google.com', 80))
    ip = s.getsockname()[0]
    s.close()
    return ip

ipaddr = get_ipaddr()
userid = os.getlogin()

parser = cli.NymmsCommandArgs(__doc__)
parser.add_argument('-e', '--expires', dest='expires', default='+1h',
                    help='ISO-8601 or +XXX[smhd] to expire in. '
                         'default: %(default)s')
parser.add_argument('-f', '--filter', dest='filter', required=True,
                    help='Regex to filter events with')
parser.add_argument('-C', '--comment', dest='comment', required=True,
                    help='Comment to record with filter')
parser.add_argument('-i', '--ipaddr', dest='ipaddr', default=ipaddr,
                    help='Override IP address to record: %(default)s')
parser.add_argument('-u', '--userid', dest='userid', default=userid,
                    help='Override userid to record: %(default)s')

args = parser.parse_args()
logger = cli.setup_logging(args.verbose)

config.load_config(args.config)

now = arrow.get()
expires = parse_time(args.expires)

if expires <= now:
    logger.error("Expires must be in the future")
    exit(1)

logger.debug("Currently %s, will expire at %s.", now, expires)

region = config.settings['region']
cache_timeout = config.settings['suppress']['cache_timeout']
domain = config.settings['suppress']['domain']

suppress = SDBSuppressionManager(region, cache_timeout, domain)

suppress_obj = Suppression({
    'comment': args.comment,
    'expires': expires,
    'ipaddr': args.ipaddr,
    'regex': args.filter,
    'userid': args.userid})
suppress.add_suppression(suppress_obj)
print "Suppression added: %s" % suppress_obj.rowkey
