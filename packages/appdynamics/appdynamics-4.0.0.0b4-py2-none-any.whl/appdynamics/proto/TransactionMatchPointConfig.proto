option java_package = "appdynamics.pb";
package appdynamics.pb.Agent;

import "Common.proto";
import "EPType.proto";

enum HTTPMethod
{
    GET = 0;
    POST = 1;
    PUT = 2;
    DELETE = 3;
}

message KeyValueMatch
{
    enum Type
    {
        CHECK_FOR_EXISTENCE = 0;
        COMPARE_VALUE = 1;
    }

    required Type type = 1;
    required Common.StringMatchCondition key = 2;
    optional Common.StringMatchCondition value = 3;
}

message EntryPointMatchCondition
{
    message HTTPMatchRule
    {
        optional HTTPMethod method = 1;
        optional Common.StringMatchCondition uri = 2;
        optional Common.StringMatchCondition host = 3;
        optional Common.StringMatchCondition port = 4;
        repeated KeyValueMatch params = 5;
        repeated KeyValueMatch cookies = 6;
        repeated KeyValueMatch headers = 7;
        repeated Common.NameValuePair properties = 8;
    }

    message MVCMatchRule
    {
        optional Common.StringMatchCondition controller = 1;
        optional Common.StringMatchCondition action = 2;
        optional Common.StringMatchCondition module = 3;
    }

    message DrupalMatchRule
    {
        optional Common.StringMatchCondition pageCallbackName = 1;
    }

    message WordpressMatchRule
    {
        optional Common.StringMatchCondition pageTemplateName = 1;
    }

    message CLIMatchRule
    {
        optional Common.StringMatchCondition scriptName = 1;
    }

    message WebServiceMatchRule
    {
        optional Common.StringMatchCondition serviceName = 1;
        optional Common.StringMatchCondition operationName = 2;
    }

    // Union fields ( only one of these will ever be present )
    // The entryPointType field of the containing MatchPointConfig
    // determines which of these fields will be present.
    optional HTTPMatchRule http = 3;
    optional MVCMatchRule mvc = 4;
    optional DrupalMatchRule drupal = 5;
    optional WordpressMatchRule wordpress = 6;
    optional CLIMatchRule cli = 7;
    optional WebServiceMatchRule webservice = 8;
}

message NamingScheme
{
    required string type = 1;
    repeated Common.NameValuePair properties = 2;
}

message MatchPointConfig
{
    message Discovery
    {
        required bool enabled = 1;
        required NamingScheme namingScheme = 2;
        repeated EntryPointMatchCondition excludes = 3;
    }

    message CustomMatch
    {
        required int64 id = 1;
        required string btName = 2;
        required int32 priority = 3;

        required EntryPointMatchCondition condition = 4;
    }

    required EntryPointType entryPointType = 1;
    required bool enabled = 2;
    optional Discovery discoveryConfig = 3;
    repeated CustomMatch customDefinitions = 4;
}
