#!/usr/bin/python
# -*- coding:utf-8 -*-

# Author: Pablo Saavedra Rodinho
# Contact: pablo.saavedra@interoud.com

"""
Save a group of streams from http or udp and generates a db with related info

"""

from optparse import OptionParser

import os
import sys
import subprocess

reload(sys)
sys.setdefaultencoding('utf-8')

import ConfigParser
import simplejson as json


import time
from datetime import datetime
import struct
import socket

import urllib2

DEV_NULL=open('/dev/null', "w")

conffile = "./chic.cfg"

logfile = "/dev/stdout"
loglevel = 20
workdir = "./chic/"
all_ = False

# command line options parser ##################################################

parser = OptionParser()

parser.add_option("-w", "--workdir", dest="workdir", default=workdir,
        help="Work directory (default: %s)" % workdir)
parser.add_option("-l", "--logfile",
        dest="logfile", help="Log file (default: %s)" % logfile,
        default=logfile)
parser.add_option("-k", "--key",
        dest="key", help="Log file (default: %s)" % "key",
        default="key")
parser.add_option("-i", "--item",
        dest="item", help="Log file (default: %s)" % "item",
        default="item")
parser.add_option("--all", action="store_true", dest="all_",
        help="Check all",
        default=all_)



parser.add_option("--loglevel",
        dest="loglevel", help="Log level (default: %s)" % loglevel,
        default=loglevel)
(options, args) = parser.parse_args()

workdir = options.workdir
logfile = options.logfile
loglevel = options.loglevel
key = options.key
item = options.item
all_ = options.all_


# logging ######################################################################
import logging
hdlr = logging.FileHandler(logfile)
hdlr.setFormatter(logging.Formatter('%(levelname)s %(asctime)s %(message)s'))
logger = logging.getLogger('chic')
logger.addHandler(hdlr)
logger.setLevel(int(loglevel))


# setting up ###################################################################

logger.info("Default encoding: %s" % sys.getdefaultencoding())


################################################################################


def main():
    global conffile
    global item
    global all_

    dbfilename = workdir + '/checks.db'
    dbfile = open(dbfilename)
    db = json.load(dbfile)
    dbfile.close()

    if all_ or key=="all":
        res = 0
        for k,v in db.iteritems():
            try:
              res += v["ok"]
            except Exception:
              pass
        print res
    else:
      try:
        k = db[key]
        try:
            print k[item]
        except:
            print "ERROR: No item found"
      except:
        print "ERROR: No key found"

# main #########################################################################

if __name__ == '__main__':
    main()

