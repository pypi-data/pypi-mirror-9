# -*- coding: utf-8 -*-
# PYTHON_ARGCOMPLETE_OK

"""atxpdf.atxpdf: provides entry point main()."""


__version__ = "0.1.0"

import argcomplete
import argparse
import logging
import sys
import base64
import tempfile
import datetime

from argh import ArghParser, completion, arg
from fpdf import FPDF, Template
from os.path import exists
from os import remove, listdir, rename
from re import match
from PIL import Image, ExifTags

# These arguments are used by this global dispatcher and each individual
# stand-alone commands.
COMMON_PARSER = argparse.ArgumentParser(add_help=False)
COMMON_PARSER.add_argument('--debug',
                           action='store_true',
                           default=False,
                           help="Enable debug logging.")

def main():
    parser = ArghParser(parents=[COMMON_PARSER])
    parser.add_commands(
        [
            write
        ]
    )
    completion.autocomplete(parser)

    # Parse ahead
    args = parser.parse_args()
    if args.debug:
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s %(levelname)s: %(message)s'
        )

    parser.dispatch()

# adding help to `foo` which is in the function signature:
@arg('foo', help='blah')
# these are not in the signature so they go to **kwargs:
@arg('baz')
@arg('-q', '--quux')
# the function itself:
def ting(foo, bar=1, *args, **kwargs):
    logging.info("You turned on --debug")
    yield foo
    yield bar
    yield ', '.join(args)
    yield kwargs['baz']
    yield kwargs['quux']

def write(address, lang='nl', type='plaatsbeschrijving'):

    # load atexpert image as base64
    image_base64 = '/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAJ1A/ADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKa39KAFxRXl2rfFOHT/AIrWvhzfF/Zqr5F1M23Kztgj5iQAF4B68lhjgV6gmcc+tXUpShbmW4r3HCiiioGFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAJXP8AjTxHD4T8LX2rybS8Ue2BGP8ArJTwi9emTzjsCe1b7f0r5w+Oviz+09fi8P20ha1075p8HhpyOnHB2rx7EuO1dWCw7r1lDp19CZOyPK5ru4ubyS8mmke5kkMzyk/Mzk5LE+uT1r6u+GPixfFng62mlkDX1sBBcjOSWA4Y8k8jHJ75r5Jr0P4PeLv+Ea8XpbXM2zT9QxDLubCq/wDC3LADnjJzwT619DmmEVSjzR3j+RjCVmfVI6UtNTpTq+UOgKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooprf0oAwPGviSHwn4WvtXk2l4o9sCMf9ZKeEXr0yefYE9q+OLq5mvLqa5uJWlnmdpJJHOWZmOST75Ner/HXxZ/aevxaBbSFrXTvmnweGnI6ccHavHsS47V5GfWvqsowqp0vaS3f5GFR3dhKfGzIQ6EqyncCpwQfr2+tMpa9dpNWIPrb4Y+LF8V+DraaWQNfWwEFyM5JYDhjyTyMcnvmu2HSvlb4PeLf+Ea8XpbXM2zT9QxDLubCq/8AC3LADnjJzwT619TqeK+KzDD+wrOPR7HRCV0PooFFcZQUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAJXP+NPEcPhPwtfavJtLxR7YEY/6yU8IvXpk847AntW+39K+cPjr4s/tPX4vD9tIWtdO+afB4acjpxwdq8exLjtXVgsO69ZQ6dfQmTsjyi6uZry7lubiVpZ5naSSRjksxOST75NQ0Givt0klZHMFFFFMB8bMjB0JVlO4FTgg/Xt9a+tPhj4sXxZ4OtppZA19bAQXIzklgOGPJPIxye+a+SK9E+D3i7/hGvF6W1zNs0/UMQy7mwqv/AAtywA54yc8E+teTm2G9rS51vEuErM+qR0paanSnV8mdAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUU1v6UAYHjXxJD4T8LX2rybS8Ue2BGP+slPCL16ZPPsCe1fHF1czXl1Nc3ErSzzO0kkjnLMzHJJ98mvV/jr4s/tPX4tAtpC1rp3zT4PDTkdOODtXj2Jcdq8jPrX1WUYVU6XtJbv8jCo7uwlFFKK9dmYlFdbpnge+1H4fan4oiRytnOgCDndFg+acAE5XMZycAKHPPQco/Ws6daFTm5HqtxtDafGzIQ6EqyncCpwQfr2+tNorRpNWBH1t8MfFi+K/B1tNLIGvrYCC5GcksBwx5J5GOT3zXbDpXyt8HvFv8AwjXi9La5m2afqGIZdzYVX/hblgBzxk54J9a+p1PFfFZhh/YVnHo9johK6H0UCiuMoKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBK5/xp4jh8J+Fr7V5NpeKPbAjH/WSnhF69MnnHYE9q32/pXzh8dfFn9p6/F4ftpC1rp3zT4PDTkdOODtXj2Jcdq6sFh3XrKHTr6EydkeUXVzNeXctzcStLPM7SSSMclmJySffJqGg0V9ukkrI5gq9pOnT6xqlrptqu6e5lWJBkDJP1wP1FUhXt/wC8K757rxRcr8sWbe1+p++3B9CByMc57VyY3EKhRc+vT1Kirs9l0nQLLSfDVvoCxJLZxW/kOsi7lkBHzZDZyDk8cjnFfJfjfwxN4R8WXukSBzDG2+2kfJ8yFuVOSBk44JAxuVh2r7LB4ryf46+ERq/hyPX7WLdeaYD521eXtz1zhSTtPzckAAua+cyzFeyr2ltLf1Npxuj5ropWOTSV9cc4+NmRg6EqyncCpwQfr2+tfWnwx8WL4s8HW00sga+tgILkZySwHDHknkY5PfNfJFeifB7xd/wjXi9La5m2afqGIZdzYVX/hblgBzxk54J9a8rNsN7WlzreJcJWZ9UjpS01OlOr5M6AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKa39KAMDxr4kh8J+Fr7V5NpeKPbAjH/WSnhF69Mnn2BPavji6uZry6mubiVpZ5naSSRzlmZjkk++TXq/x18Wf2nr8WgW0ha1075p8HhpyOnHB2rx7EuO1eRn1r6rKMKqdL2kt3+RhUd3YSiilFeuzMu6Tps+sapa6barunuZViQZA5P1wP1FfZvh/Rrfw/oNlpNt/qrWIRg8/Me55J6nJ614p8AvCu+e68UXI+WPNva/U/fbg+hA5GOc9q99XmvlM3xXtavItl+ZvTVlcKhuYIru3ltp4klglQpIkihldSMEEHgjGeKmoryUaHxn428MTeEfFl7pEgcwo2+2kfJ8yFuVOSBk44JAxuVh2rnq+k/jr4R/tbw5Hr9rFuvNMz521eXtyeeiknafm5IABc183NzX2eXYr29BN7rc55xsxtPjZkIdCVZTuBU4IP17fWmUtdzSasSfW3wx8WL4r8HW00sga+tgILkZySwHDHknkY5PfNdsOlfK3we8W/8ACNeL0trmbZp+oYhl3NhVf+FuWAHPGTngn1r6nU8V8VmGH9hWcej2OiErofRQKK4ygooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBK5/xp4jh8J+Fr7V5NpeKPbAjH/WSnhF69MnnHYE9q32/pXzh8dfFn9p6/F4ftpC1rp3zT4PDTkdOODtXj2Jcdq6sFh3XrKHTr6EydkeUXVzNeXctzcStLPM7SSSMclmJySffJqGg0V9ukkrI5gq9pOnT6xqlrptqu6e5lWJBkDJP1wP1FUhXt/wC8K757rxRcr8sWbe1+p++3B9CByMc57VyY3EKhRc+vT1Kirs9s8P6Pb+H9BstJtv9VaxCMHn5j3PJPU5PXvWlSL0pa+Kbbd2dIUUUUgIbmCK6gltp4klglQpIjqGV1IwQQeCMdq+OPG/hibwj4sv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or12Zl3SdNn1jVLXTbVd09zKsSDIHJ+uB+or7N8P6Nb+H9BstJtv9VaxCMHn5j3PJPU5PWvFPgF4V3z3Xii5Hyx5t7X6n77cH0IHIxzntXvq818pm+K9rV5FsvzN6asri0UUV5JoFFFFABRRRQAUUUUAJUNzBFd28ttPEksEqFJEkUMrqRggg8EYzxU9JQB8Z+NvDE3hHxZe6RIHMKNvtpHyfMhblTkgZOOCQMblYdq56vpP46+Ef7W8OR6/axbrzTM+dtXl7cnnopJ2n5uSAAXNfNzc19nl2K9vQTe63OecbMbT42ZCHQlWU7gVOCD9e31plLXc0mrEn1t8MfFi+K/B1tNLIGvrYCC5GcksBwx5J5GOT3zXbDpXyt8HvFv/AAjXi9La5m2afqGIZdzYVX/hblgBzxk54J9a+p1PFfFZhh/YVnHo9johK6H0UCiuMoKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBK5/xp4jh8J+Fr7V5NpeKPbAjH/WSnhF69MnnHYE9q32/pXzh8dfFn9p6/F4ftpC1rp3zT4PDTkdOODtXj2Jcdq6sFh3XrKHTr6EydkeUXVzNeXctzcStLPM7SSSMclmJySffJqGg0V9ukkrI5gq9pOnT6xqlrptqu6e5lWJBkDJP1wP1FUhXt/wC8K757rxRcr8sWbe1+p++3B9CByMc57VyY3EKhRc+vT1Kirs9s8P6Pb+H9BstJtv9VaxCMHn5j3PJPU5PXvWlSL0pa+Kbbd2dIUUUUgCiiigAooooAKKKKACiiigCG5giuoJbaeJJYJUKSI6hldSMEEHgjHavjjxv4Ym8I+LL3SJA5hjbfbSPk+ZC3KnJAyccEgY3Kw7V9mGvJvjr4RGr+HI9ftYt15pgPnbV5e3PXOFJO0/NyQAC5r08rxPsa3LLaWn+RE43R810UrHJpK+uOcfGzIwdCVZTuBU4IP17fWvrT4Y+LF8WeDraaWQNfWwEFyM5JYDhjyTyMcnvmvkivRPg94u/wCEa8XpbXM2zT9QxDLubCq/8LcsAOeMnPBPrXlZthva0udbxLhKzPqkdKWmp0p1fJnQFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRTW/pQBgeNfEkPhPwtfavJtLxR7YEY/6yU8IvXpk8+wJ7V8cXVzNeXU1zcStLPM7SSSOcszMckn3ya9X+Oviz+09fi0C2kLWunfNPg8NOR044O1ePYlx2ryM+tfVZRhVTpe0lu/yMKju7CUUUor12Zl3SdNn1jVLXTbVd09zKsSDIHJ+uB+or7N8P6Nb+H9BstJtv9VaxCMHn5j3PJPU5PWvFPgF4V3z3Xii5Hyx5t7X6n77cH0IHIxzntXvq818pm+K9rV5FsvzN6asri0UUV5JoFFFFABRRRQAUUUUAFFFFABRRRQAlQ3MEV3by208SSwSoUkSRQyupGCCDwRjPFT0lAHxn428MTeEfFl7pEgcwo2+2kfJ8yFuVOSBk44JAxuVh2rnq+k/jr4R/tbw5Hr9rFuvNMz521eXtyeeiknafm5IABc183NzX2eXYr29BN7rc55xsxtPjZkIdCVZTuBU4IP17fWmUtdzSasSfW3wx8WL4r8HW00sga+tgILkZySwHDHknkY5PfNdsOlfK3we8W/8ACNeL0trmbZp+oYhl3NhVf+FuWAHPGTngn1r6nU8V8VmGH9hWcej2OiErofRQKK4ygooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKK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Vflp/wD9sr3ein/amL/n/Bf5ByRMvw1odv4b8O2Wj2vMVrGE3YxvPVmx2yST+NatAorhbbd2VsFFFFIAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAgureG6he3uIo5YJUKSRyKGV1IwQQeCMEgg+teNSfs66c0rmLxBdrHuOxWgViB2BIIBOO+B9K9rorWjiKtFv2baE0nueJf8ADOlj/wBDFc/+Ay//ABVH/DOlj/0MVz/4DL/8VXttFb/2jif52Lkj2PET+ztZD/mYrnHX/j2X/wCKr2LSLW4stKtrW7uzdzwoEa4K4MmOAx5POMZOeTk8dBcoFYVsRUrfxHcailsLRRRWQwooooAKKKKADvTW/pTqKAPIde+BVrr2vX2qy67PE93M0pjS3BC5OcZLVn/8M6WP/QxXP/gMv/xVe20V1Rx2IguWMnYlxT6HiX/DOll/0MVz/wCAy/8AxVaGg/Au10HX7HVY9dmla0mWYRvbqA2D0zu4r12loljsRJcrldAopbCCloorlKCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA//Z'

    # convert to binary
    image = base64.decodestring(image_base64)

    # Write a temporary file
    fp = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False, mode='wb')
    fp.write(image)
    fp.close() # Close the file but do not delete it yet

    # Get the files and sort alfabetically
    files = [f for f in listdir('.') if match(r'.*\.(JPG|JPEG|jpg|jpeg)', f)]
    files.sort()

    # Print a list of files
    #print files

    # Rotate and rename the files
    for f in range(0, len(files)):

        # Rotate the image
        image=Image.open(files[f])

        # Find the EXIF key
        for orientation in ExifTags.TAGS.keys() :
            if ExifTags.TAGS[orientation]=='Orientation' : break
        if isinstance(image._getexif(), dict):
            exif=dict(image._getexif().items())

            # Set the proper orientation
            if exif[orientation] == 3 :
                print "Image %s is rotated 180" % files[f]
                image=image.rotate(180, expand=True)
            elif exif[orientation] == 6 :
                print "Image %s is rotated 90 CCW" % files[f]
                image=image.rotate(270, expand=True)
            elif exif[orientation] == 8 :
                print "Image %s is rotated 90 CW" % files[f]
                image=image.rotate(90, expand=True)

            # Only save the file if it was changed
            if exif[orientation] in (3, 6, 8):
                # Save the image
                image.save(files[f])

        # Close the image
        image.close()

        # Rename the saved file
        print "renaming file %s to %s" % (files[f], 'foto_' + str(f+1).zfill(3) + '.jpg')
        rename(files[f], 'foto_' + str(f+1).zfill(3) + '.jpg')

    # Read the files again
    files = [f for f in listdir('.') if match(r'.*\.(JPG|JPEG|jpg|jpeg)', f)]
    files.sort()

    pdf = PDF()
    pdf.set_creator(u"AtExpert - Axel Trocmé")
    pdf.set_margins(20, 40)
    pdf.set_strings(lang, type)
    pdf.set_address(address)
    pdf.set_logo(fp.name)
    pdf.set_font('Arial','B',16)
    pdf.frontpage()
    pdf.add_images(files)
    pdf.output(pdf.footer_text + ".pdf",'F')
    pdf.close()

    # Now delete the file
    remove(fp.name)

class PDF(FPDF):

    # Set the language and strings
    def set_strings(this, lang, doc_type):
        if lang=='nl':
            if doc_type=='plaatsbeschrijving':
                this.title = "Bijlage bij proces verbaal van plaatsbeschrijving: foto's"
                this.footer_text = "PV van plaatsbeschrijving"
            elif doc_type=='schatting':
                this.title = "Bijlage bij proces verbaal van schatting: foto's"
                this.footer_text = "PV van schatting"
            else:
                raise ValueError('doc_type should be \'plaatsbeschrijving\' or \'schatting\'.')
        elif lang=='fr':
            if doc_type=='plaatsbeschrijving':
                this.title = u'Annexe au procès verbal d\'état des lieux: photos'
                this.footer_text = u"PV d'état des lieux"
            elif doc_type=='schatting':
                this.title = u'Annexe au procès verbal d\'estimation: photos'
                this.footer_text = u"PV d'estimation"
            else:
                raise ValueError('doc_type should be \'plaatsbeschrijving\' or \'schatting\'.')
        else:
            raise ValueError('Language should be \'nl\' or \'fr\'.')

    # Set the address
    def set_address(this, address):
        this.address = address

    # Set the logo
    def set_logo(this, logo):
        this.logo = logo

    # Markup the frontpage
    def frontpage(this):
        this.add_page()
        this.set_font('Arial','B',28)
        this.set_y(290/2-14)
        this.multi_cell(0, 14, this.title, align='C', border=0)
        this.multi_cell(0, 14, this.address, align='C', border=0)

    # Draw an image and text underneath
    def draw_image(this, x, y, image, image_number, max_width, max_height):

        # Open the image
        im = Image.open(image, mode='r')

        # Get sizes
        [im.width, im.height] = im.size

        # Check for size
        if (float(max_width)/max_height <= float(im.width)/im.height): # Wide image, width is limiting

            # Draw image limited by width
            this.image(image, x, y, w=max_width)

            # Calculate expected image height
            calculated_height = im.height/(im.width/max_width)

            # Set photo number below the image
            # print "Drawing number on %i, %i with number %i." % (x+max_width/2, y+calculated_height-1, image_number)
            this.text(x+max_width/2, y+calculated_height+3, str(image_number))

            # Now adjust x
            x = x + max_width
        else: # Tall image, height is limiting

            # Calculate the expected width
            calculated_width = im.width*max_height/im.height

            # Set x left photo margin
            margin = (max_width - calculated_width)/2
            x = x + margin

            # Draw the image, limited by height
            this.image(image, x, y, h=max_height)

            # Set photo number in the center below the image.
            # print "Drawing number on %i, %i with number %i." % (x+calculated_width/2, y+max_height+4, image_number)
            this.text(x+calculated_width/2, y+max_height+4, str(image_number))

            # Add right photo margin
            x = x + calculated_width + margin

        # Return the current x and y coords
        return [x, y]

    def add_images(this, images):

        # Count the total amount of images to be added
        total = len(images)

        # Amount of pages
        images_per_page = 8
        amount_of_pages = total/images_per_page
        remainder       = total%images_per_page

        # Count the images
        counter = 1

        # Iterate over the pages
        for i in range(0, amount_of_pages):

            # Add list
            images_on_page = []

            # Iterate over the images in the page
            for j in range(0, images_per_page):
                images_on_page.append(images.pop(0))

            # Now that we gathered 'images_per_page' images, we make a page
            this.add_image_page(images_on_page, counter)
            counter+=8

        # The last page, if any
        if remainder > 0:

            # Add list
            images_on_page = []

            # Iterate over the images in the page
            for j in range(0, remainder):
                images_on_page.append(images.pop(0))

            # Now that we gathered 'remainder' images, we make a page
            this.add_image_page(images_on_page, counter)

    # Add an imagepage
    def add_image_page(this, images, counter):
        #this.add_images(images)
        # Add a page
        this.add_page()

        # Set the cursor
        this.set_y(30)

        # Required image size
        width = 78
        height = 55

        # Set initial coords
        x = this.get_x()
        x_orig = x
        y = this.get_y()

        # Set font size
        this.set_font_size(8)

        # Iterate over the images
        for i in range(0, len(images)):

            # Draw the image and the text
            [x, y] = this.draw_image(x, y, images[i], i+counter, width, height)

            if i%2==0:
                # Set column margin
                x = x + 15

            else:
                # Reset x
                x = x_orig

                # Set y
                y = y + height + 10

    # Set the header, gets called automatically
    def header(this):
        this.image(this.logo, x=90, y=5, w=30, h=19)

    # Set the footer, gets called automatically
    def footer(this):
        # Get current date
        today = datetime.date.today()

        # Go to 1.5 cm from bottom
        this.set_y(-15)
        # Select Arial italic 8
        this.set_font('Arial','I',10)
        # Print centered page number, except on first page
        if this.page_no()!=1:
            this.cell(56,10, this.footer_text, 0, 0, 'L')
            this.cell(56, 10, this.address, 0, 0, 'C')
            this.cell(47, 10, today.strftime('%d/%m/%Y'), 0, 0, 'R')
            this.cell(10,10,'%s' % (this.page_no()-1) ,0,0,'R')
