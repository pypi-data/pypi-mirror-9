# Configuration file for Raspi-Sump
# All configurations should be done in this file.
# This file should be located in the /home/pi/raspi-sump directory

[gpio_pins]

# Raspi-Sump uses the actual GPIO numbers and not the Pi numerical pin 
# numbers.  You can use any available GPIO's for Trig and Echo.

# Trig pin sends the signal.  Value is the number of the GPIO 
# on the RaspberryPi
trig_pin = 17

# Echo pin receives the signal.  Value is the number of the GPIO 
# on the RaspberryPi
echo_pin = 27


[pit]

# Unit of measure.  You may choose to use metric or imperial measurements.  
# The unit variable must be set as metric or imperial and is case sensitive.
# Any other setting will cause an error.
unit = metric

# critical_water_level is the water level in the sump pit at which point an 
# email alert should be triggered. 
# If unit = metric then critical_water_level = centimeters
# If unit = imperial then critical_water_level = inches
critical_water_level = 35 

# The pit_depth is the distance between the sensor and the bottom of the 
# sump pit.
# Like critical_water_level, enter centimeters for metric and inches for
# imperial
pit_depth = 72

# rsump.py should be run with a cron job.  However cron is limited to
# 1 minute as its minimum interval. If you need to monitor the sump level
# more frequently you can set reading_interval to the desired time in seconds.
# Default is 0 meaning only one reading will occur and the program will exit.
# If set to 0 call the script with a cron job and select your interval there.
# If setting to a value other than 0 you should run rsumpmonitor.py from a cron
# job at a regularly interval to monitor the health of the rsump.py process.
# rsumpmonitor.py is part of the raspisump software.  See documentation for
# details.
reading_interval = 0

# The temperature variable will adjust the speed of sound to reflect 
# the normal temperature of your basement.  
# If unit = metric then enter the temperature in Degrees Celcius.
# If unit = imperial then enter the temperature in Degrees Fahrenheit.
temperature = 20



[email]

# SMTP Server requires authentication (0=No, 1=Yes)
# If using localhost or possibly your ISP email this value
# will most likely be 0.  Check your ISP's configuration docs.
# For Gmail set this to 1 and fill out the corresponding 
# username and password values in this file.
smtp_authentication = 0

# SMTP Server uses TLS (0=No, 1=Yes)
# If using localhost or possibly your ISP email this value
# will most likely be 0.  Check your ISP's configuratin docs.
# For Gmail set this to 1.
smtp_tls = 0

# If server requires authentication enter username and password.
# For Gmail, activate these values with your gmail username and password.
username = 
password = 

# SMTP Server and Port
# example --  smtp_server = smtp.gmail.com:587
# if using a SMTP server on the Pi use localhost:25
smtp_server = localhost:25

# Notifications will be sent to the following address
# example -- email_to = cellnumber@wireless_carrier (for sms email alerts)
# You can also use a regular email address
# To add multiple recipients seperate email addresses with a comma.
# e.g. Adding a single recipient
#   email_to = single_email@somewhere.com
#
# e.g. Adding multiple recipients
#   email_to = recipient1@somewhere.com, recipient2@somewhere.com
email_to = 

# Notification will be coming from the following address.
# You can enter your email address here as the sender.
# example  email_from = Raspi-Sump <youremail@yourprovider.com>
email_from = 
