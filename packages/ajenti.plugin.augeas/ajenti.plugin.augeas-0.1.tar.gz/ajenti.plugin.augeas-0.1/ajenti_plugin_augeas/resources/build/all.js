// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('ajenti.augeas', ['core']);

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('ajenti.augeas').service('augeas', function($http, $q, AugeasConfig) {
    this.get = function(endpoint) {
      var q;
      q = $q.defer();
      $http.get("/api/augeas/endpoint/get/" + endpoint).success(function(data) {
        return q.resolve(AugeasConfig.get(data));
      }).error(function(err) {
        return q.reject(err);
      });
      return q.promise;
    };
    this.set = function(endpoint, config) {
      var q;
      q = $q.defer();
      $http.post("/api/augeas/endpoint/set/" + endpoint, config.serialize()).success(function(data) {
        return q.resolve(data);
      }).error(function(err) {
        return q.reject(err);
      });
      return q.promise;
    };
    return this;
  });

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('ajenti.augeas').service('AugeasConfig', function() {
    var AugeasConfig, AugeasNode;
    AugeasNode = (function() {
      function AugeasNode() {
        this.children = [];
      }

      AugeasNode.prototype.fullPath = function() {
        var child, index, total, _i, _len, _ref;
        if (this.path) {
          return this.path;
        }
        total = 0;
        index = null;
        _ref = this.parent.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.name === this.name) {
            total += 1;
          }
          if (child === this) {
            index = total;
          }
        }
        if (total > 1) {
          return "" + (this.parent.fullPath()) + "/" + this.name + "[" + index + "]";
        } else {
          return "" + (this.parent.fullPath()) + "/" + this.name;
        }
      };

      AugeasNode.prototype.toString = function() {
        return '[' + this.path + ']';
      };

      return AugeasNode;

    })();
    AugeasConfig = (function() {
      function AugeasConfig(data) {
        this.root = this.__construct(data);
        this.root.path = data.path;
      }

      AugeasConfig.prototype.serialize = function(node) {
        var c, data;
        if (node == null) {
          node = this.root;
        }
        data = {};
        data.path = node.fullPath();
        data.name = node.name;
        data.value = node.value;
        data.children = (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(this.serialize(c));
          }
          return _results;
        }).call(this);
        return data;
      };

      AugeasConfig.prototype.__construct = function(data, parent) {
        var c, node, _i, _len, _ref;
        node = new AugeasNode();
        node.name = data.name;
        node.value = data.value;
        node.parent = parent;
        _ref = data.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          node.children.push(this.__construct(c, node));
        }
        return node;
      };

      AugeasConfig.prototype.relativize = function(path) {
        return path.substring(this.root.path.length + 1);
      };

      AugeasConfig.prototype.get = function(path) {
        var matches;
        matches = this.matchNodes(path);
        if (matches.length === 0) {
          return null;
        }
        return matches[0].value;
      };

      AugeasConfig.prototype.set = function(path, value, node) {
        var child, q, remainder;
        if (!node) {
          node = this.root;
          if (path[0] === '/') {
            path = this.relativize(path);
          }
        }
        if (!path) {
          node.value = value;
          return;
        }
        if (path.indexOf('/') === -1) {
          q = path;
          remainder = null;
        } else {
          q = path.substring(0, path.indexOf('/'));
          remainder = path.substring(path.indexOf('/') + 1);
        }
        child = this.matchNodes(q, node)[0];
        if (!child) {
          child = new AugeasNode();
          child.parent = node;
          child.name = q;
          node.children.push(child);
        }
        return this.set(remainder, value, child);
      };

      AugeasConfig.prototype.model = function(path) {
        var fx;
        fx = (function(_this) {
          return function(value) {
            if (angular.isDefined(value)) {
              _this.set(path, value);
            }
            return _this.get(path);
          };
        })(this);
        return fx;
      };

      AugeasConfig.prototype.insert = function(path, value, index) {
        var child, matches, node;
        matches = this.matchNodes(path);
        if (matches.length === 0) {
          this.set(path, value);
          return path;
        } else {
          node = matches[0].parent;
          if (index == null) {
            index = node.children.indexOf(matches[matches.length - 1]) + 1;
          }
          child = new AugeasNode();
          child.parent = node;
          child.name = path.substring(path.lastIndexOf('/') + 1);
          child.value = value;
          node.children.splice(index, 0, child);
          return child.fullPath();
        }
      };

      AugeasConfig.prototype.remove = function(path) {
        var node, _i, _len, _ref, _results;
        _ref = this.matchNodes(path);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          _results.push(node.parent.children.remove(node));
        }
        return _results;
      };

      AugeasConfig.prototype.match = function(path, node) {
        var x, _i, _len, _ref, _results;
        _ref = this.matchNodes(path, node);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push(x.fullPath());
        }
        return _results;
      };

      AugeasConfig.prototype.matchNodes = function(path, node) {
        var child, deepMatches, index, match, matches, q, remainder, rx, sm, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        if (!node) {
          node = this.root;
          if (path[0] === '/') {
            path = this.relativize(path);
          }
        }
        if (path.indexOf('/') === -1) {
          q = path;
          remainder = null;
        } else {
          q = path.substring(0, path.indexOf('/'));
          remainder = path.substring(path.indexOf('/') + 1);
        }
        if (q.indexOf('[') === -1) {
          index = null;
        } else {
          index = parseInt(q.substring(q.indexOf('[') + 1, q.indexOf(']'))) - 1;
          q = q.substring(0, q.indexOf('['));
        }
        matches = [];
        rx = new RegExp('^' + q + '$');
        _ref = node.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (rx.test(child.name)) {
            matches.push(child);
          }
        }
        if (index !== null) {
          if (matches.length === 0) {
            matches = [];
          } else {
            matches = [matches[index]];
          }
        }
        if (!remainder) {
          return matches;
        }
        deepMatches = [];
        for (_j = 0, _len1 = matches.length; _j < _len1; _j++) {
          match = matches[_j];
          _ref1 = this.matchNodes(remainder, match);
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            sm = _ref1[_k];
            deepMatches.push(sm);
          }
        }
        return deepMatches;
      };

      return AugeasConfig;

    })();
    this.get = function(data) {
      return new AugeasConfig(data);
    };
    return this;
  });

}).call(this);

