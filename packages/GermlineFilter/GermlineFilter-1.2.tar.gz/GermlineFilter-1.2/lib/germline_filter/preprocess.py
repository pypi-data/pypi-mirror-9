### PREPROCESS ####################################################################################
# This script contains functions that implement all the preprocessing steps on the truth and on the
# new vcf file, as required by the germline filter.
# These functionalities are:
# 	- trim a vcf file 
# 	- identifying sample names and getting the their indices
# 	- decrypt truth file
# 	- creating the data structure for filtering
###################################################################################################

from Crypto import Random
from Crypto.Cipher import AES, Blowfish
from decrypt import decrypt_message
import hash_data as hd
import gzip
import sys
import re


### DEFINE CONSTANTS ###############################################################################
TRIM_COLUMNS = ['CHROM', 'POS', 'REF', 'ALT'] 
(CHROM, POS, REF, ALT) = (0, 1, 2, 3)

### FUNCTIONS ######################################################################################

def normalize_chr_name(chromosome):
	'''
	Description:
		Return a string that is normalized name for the CHROMOSOME.
		This is needed in the case when a submission file was generated after the data
		was realigned with a different reference.
		e.g. 'chr1' vs. '1'
		     'chr1_gl000192_random' vs. 'GL000192.1'
		The method strips away the 'chr' part, keeping only the numeric part.
		In the case of a 'gl' name, only the 'gl' part is kept. e.g. GL000###
		Names such 'chr6_apd_hap1' will become '6_apd_hap1'
	Arguments:
		chromosome, is a string containing the chromosome number.
	'''

	p = re.compile('gl\d{6}', re.IGNORECASE)
	chrom = chromosome.strip('chr')
	gl = p.search(chrom)
	if gl:
		key = gl.group().upper()
	else:
		key = chrom

	return str(key)


def split_ref_and_alt(chrom, pos, ref, alt):
	'''
	Description:
		Return a "\n" separated string where every substring is a line of the form:
		CHROM:POS:REF:ALT. The REF and ALT are single base entries.
	Arguments:
		chrom: normalized chromosome string
		pos: position number
		ref: may be comma-seperated for multiple bases
		alt: may be comma-seperated for multiple bases
	'''
	ref = ref.split(',')
	alt = alt.split(',')
	return "\n".join([':'.join([chrom, pos, x, y]) for x in ref for y in alt])


def trim_vcf(vcf_path):
	'''
	Description:
		Return a list of trimmed lines from the original input VCF.
		Each line has only one entry for the REF and ALT fields.
		Each line is a tab delimited entry of the form 
			CHROM:POS:REF:ALT
	Arguments:
		vcf, is the path to the input VCF.
		truth, is a flag for truth vcf. If True, extra filtering needs to be done.
		(i.e. filter out lines where the genotype of the normal is not the same as
		the genotype of the tumour)
	'''

	trim = ''
	if vcf_path.endswith('.gz'):
		infile = gzip.open(vcf_path, 'r')
	else:
		infile = open(vcf_path, 'r')
	
	for line in infile:
		if line.startswith('#') or line == '':
			continue
		fields = line.split('\t')
		trim += split_ref_and_alt(normalize_chr_name(fields[0]), fields[1], fields[3], fields[4])
		trim += '\n'

	return trim.rstrip('\n')


def decrypt_germline_file(enc_germline, keyfile, enc_method):
	'''
	Description:
		Return the content of the decrypted truth file as a string.
		It will contain a header and the hashed fields.
	Arguments:
		truth, is the path to an encrypted truth file in the format generated by encrypt_truth_file (germline_filter.py)
		keyfile, is the path to the key file for decryption.
		enc_method, is a string containing the encryption method to be used. Allowed values: AES, Blowfish
	'''

	with open(keyfile, 'rb') as f:
		key = f.read()
	with open(enc_germline, 'rb') as f:
		content = f.read() 

	dec_content = decrypt_message(content, key, enc_method)

	return dec_content
	

def get_germline_data(germline_file_content):
	'''
	Description:
		Return a set of hashed values for the germline vcf file. 
		Each value is the hash of CHROM, POS, REF and ALT fields. 
	Arguments:
		germline_file_content, is a string of the truth germline vcf content, decrypted, but still hashed.
		The fields in the file are:
			CHROM:POS:REF:ALT
	NOTE:	
		GATK was used for generating germline calls
		if in the ALT field two or more values are present
		GATK will create an entry for each ALT value, resulting in
		non-unique chrom:pos keys
	'''
	lines = germline_file_content.split('\n')
	germline_data = set(lines)
	return germline_data


def get_somatic_data(somatic_vcf, saltfile, hash_method): 
	'''
	Description:
		Return a set of hashed values for the somatic vcf file. 
		Each value is the hash of CHROM, POS, REF and ALT fields. 
	Arguments:
		somatic_vcf, is a vcf file.
		saltfile, path to the file containing the salt message used for hashing.
		hash_method, is a string containing the hashing method to be used. Allowed values: md5 and sha512
	'''
	somatic_data = set([])

	with open(saltfile, 'rb') as fo: 
		salt = fo.read()

	somatic_trim = trim_vcf(somatic_vcf)
	lines = somatic_trim.split('\n')
	for line in lines:
		hashed_line = hd.hash_line(salt, line, hash_method)
		somatic_data.add(hashed_line)
	return somatic_data

