#!/usr/bin/python

#################################################################################
#
# The MIT License (MIT)
#
# Copyright (c) 2015 Dmitry Sovetov
#
# https://github.com/dmsovetov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#################################################################################

import argparse, os, glob

from yap import Project
from yap import Generator
from yap import Makefile
from yap import StaticLibrary
from yap import Executable
from yap import Folder
from yap import Platform
from yap import Location

# parseUnknownArguments
def parseUnknownArguments( args ):
	for arg in args:
		if not arg.startswith( '--' ):
			continue

		items = arg.split( '=' )
		name  = items[0][2:].upper()

		if len( items ) == 1:
			Makefile.project.define( 'DC_' + name + '_ENABLED' )
		else:
			Makefile.project.define( 'DC_' + name + '=' + items[1] )
			Makefile.project.define( 'DC_' + name + '_' + items[1].upper() )
			Makefile.set( name, items[1] )

# Entry point
if __name__ == "__main__":
	name = os.path.basename( os.getcwd() )

	# Parse arguments
	parser = argparse.ArgumentParser( description = 'Yet Another Project Generator', prefix_chars = '--', formatter_class = argparse.ArgumentDefaultsHelpFormatter )

	parser.add_argument( "platform",                             type = str, help = "Target platform" )
	parser.add_argument( "-s", "--source", default = '.',        type = str, help = "Project source path" )
	parser.add_argument( "-o", "--output", default = 'projects', type = str, help = "Output path" )
	parser.add_argument( "-n", "--name",   default = name,       type = str, help = "Workspace (solution) name" )
	parser.add_argument( "-a", "--arch",   default = 'default',  type = str, help = "Target build architecture" )
	parser.add_argument( "-x", "--std",    default = 'cxx98',    type = str, help = "C++ standard" )

	args, unknown = parser.parse_known_args()

	if args.platform == 'install':
		print 'Error: install is not implemented'
		exit(1)

	if args.platform == 'build':
		print 'Error: build is not implemented'
		exit(1)

	if not os.path.exists( args.source ):
		print 'Error: source directory {0} does not exist'.format( args.source )
		exit(1)

	if not os.path.exists( os.path.join( args.source, 'Makefile.py' ) ):
		print 'Error: no Makefile.py file found in directory', args.source
		exit(1)

	# Platform aliases
	aliases = dict( macos = 'MacOS', windows = 'Windows', flash = 'Flash', android = 'Android', ios = 'iOS', html5 = 'HTML5' )
	if args.platform in aliases.keys():
		args.platform = aliases[args.platform]

	# Platforms
	platforms = dict( Windows = Platform.Windows, MacOS = Platform.MacOS, iOS = Platform.iOS )
	if not args.platform in platforms.keys():
		print 'Error: unknown platform', args.platform
		exit(1)

	# Push path scope
	Location.PathScope.push( os.path.abspath( args.source ), os.path.abspath( args.output ) )

	# Generate project
	Makefile.platform = platforms[args.platform]()
	Makefile.set( 'PLATFORM', args.platform )
	Makefile.set( 'ARCH', args.arch )
	Makefile.set( 'STD', args.std )
	Makefile.initialize( Project, args.name, args.platform, (lambda fileName: execfile( fileName )) )
	Makefile.project.define( 'DC_PLATFORM_' + args.platform.upper() )
	Makefile.project.define( 'DC_PLATFORM=' + args.platform )

	# Parse unknown arguments
	parseUnknownArguments( unknown )

	# Build config
	platform	    = args.platform
	project         = Makefile.project

	# Include
	def Include( *list ):
		for path in list:
			Makefile.project.target( path )

	# Library
	def Library( name, required = False ):
		locations = Makefile.platform.find_library( name )

		if not locations and required:
			print 'Error:', name, 'is required'
			exit(1)

		return locations

	# Has
	def Has( name ):
		return Makefile.get( name.upper() ) != None

	# Get
	def Get( name ):
		return Makefile.get( name.upper() )

	# Set
	def Set( name, value ):
		Makefile.set( name.upper(), value )

	# Project
	def Project( externals = None, paths = None ):
		if externals:
			project.add_headers_search_paths(os.path.join(externals, 'include'))
			project.add_library_search_paths(os.path.join(externals, 'lib', args.platform))
		if paths:
			project.add_headers_search_paths(paths)

	# Folders
	def Folders( path ):
		# class Folder
		class Folder:
			def __init__( self, path ):
				self.name = os.path.basename( path )
				self.path = path

		return [Folder( path ) for path in glob.glob( os.path.join( Location.PathScope.current.source, path ) ) if os.path.isdir( path )]

	# Files
	def Files( path ):
		# class Folder
		class File:
			def __init__( self, path ):
				self.name = os.path.basename( path )
				self.path = path

		return [File( path ) for path in Folder.glob( os.path.join( Location.PathScope.current.source, path ) ) if os.path.isfile( path )]

	# Module
	def Module(url, makefile = None, folder = None, credentials = None):
		name, ext   = os.path.splitext(os.path.basename(url))
		modules     = Location.PathScope.current.source
		auth        = {}

		if credentials:
			execfile(os.path.join(modules, credentials), {}, auth)

		if folder:
			modules = os.path.join(modules, folder)

		# Create modules folder
		if not os.path.exists(modules):
			os.makedirs(modules)

		# Checkout module
		if not os.path.exists(os.path.join(modules, name)):
			if ext == '.git':
				if credentials:
					index = url.find( '//' )
					url   = url[:index + 2] + auth['username'] + ':' + auth['password'] + '@' + url[index + 2:]

				os.system('git clone {0} {1}/{2}'.format(url, modules, name))

		# Include it to project
		if makefile:
			Include(os.path.join(modules, name, makefile))
		else:
			Include(os.path.join(modules, name))

	execfile( Location.PathScope.current.source + '/Makefile.py' )

	Makefile.generate()
