Metadata-Version: 2.0
Name: Flask-RESTful-DRY
Version: 0.3
Summary: DRY applied to Flask-RESTful by using declarations, not code
Home-page: https://bitbucket.org/dangyogi/flask-restful-dry
Author: Bruce Frederiksen
Author-email: dangyogi@gmail.com
License: MIT
Keywords: Flask RESTful Flask-RESTful DRY declarations web
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Framework :: Flask
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.4
Requires-Dist: flask (>=0.10.1)
Requires-Dist: Flask-Login (>=0.2.11)
Requires-Dist: Flask-RESTful (>=0.2.12)
Requires-Dist: Flask-WTF (>=0.10.0)
Requires-Dist: Flask-SQLAlchemy (>=1.0)
Requires-Dist: SQLAlchemy (>=0.9.7)
Requires-Dist: passlib (>=1.6.2)
Requires-Dist: pytest (>=2.6.1)
Requires-Dist: Sphinx (>=1.2.2)

=================
Flask-RESTful-DRY
=================


Allows the declaration of RESTful APIs using simple declarations so that you
don't need to write executable code for every HTTP method on every API.
Introduces:

* Inheritable declarations at the class level, including the ability to
  modify the base class declarations.
* Dynamic creation of Flask-RESTful_ API Resource classes, so that you
  can automatically generate the same pattern of URLs many times.
* Reducing HTTP method code to a series of re-usable steps.  These are
  automatically ordered for each HTTP method to meet ordering
  constraints specified on each step.  This allows the requirements for
  the HTTP method code to be reduced to a simple declaration of what
  steps to include.  Because these steps are automatically ordered,
  they may be specified in any order, making it easy to add or remove
  steps from inherited standard recipes.
* Adds column validation and introspection to Flask-SQLAlchemy_ tables,
  and automatically generates metadata descriptions of what colums are
  allowed to be POSTed or PUT, including the server validation rules
  that will be applied to each column.  This lets you specify the
  validation rules in one place for both server and client.
* Provides column-level authorization for all HTTP methods.
* Supports nested child rows (relationships) in APIs (and nested
  column-level authorization).


The documentation is on ReadTheDocs.org here_.


.. _here: http://flask-restful-dry.readthedocs.org/en/latest/dry.html
.. _Flask-RESTful: https://flask-restful.readthedocs.org
.. _Flask-SQLAlchemy: https://pythonhosted.org/Flask-SQLAlchemy/


