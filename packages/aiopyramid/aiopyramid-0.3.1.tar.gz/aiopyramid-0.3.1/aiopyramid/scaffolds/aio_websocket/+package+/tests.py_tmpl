import unittest
import asyncio

import websockets
from pyramid import testing


class HomeTestCase(unittest.TestCase):

    def test_home_view(self):
        from .views import home

        @asyncio.coroutine
        def _test_home():
            request = testing.DummyRequest()
            view_callable = asyncio.coroutine(home)
            info = yield from view_callable(request)
            self.assertEqual(info['title'], '{{project}} websocket test')
        asyncio.get_event_loop().run_until_complete(_test_home())


class WSTest(unittest.TestCase):
    """ Test aiopyramid websocket view. """

    def setUp(self):
        self.loop = asyncio.get_event_loop()

    def test_echo_view(self):
        """ Test default echo view. """

        @asyncio.coroutine
        def _websockets_compat_wrapper(ws, path):
            """ wrapper to ignore the path argument used witn websockets.serve """
            from .views import echo
            yield from echo(ws)

        self.loop.run_until_complete(websockets.serve(_websockets_compat_wrapper, 'localhost', 8765))

        @asyncio.coroutine
        def _echo_view_client():
            ws = yield from websockets.connect('ws://localhost:8765/')
            for x in range(20):
                yield from ws.send(str(x))
                y = yield from ws.recv()
                assert int(y) == x
        self.loop.run_until_complete(_echo_view_client())
