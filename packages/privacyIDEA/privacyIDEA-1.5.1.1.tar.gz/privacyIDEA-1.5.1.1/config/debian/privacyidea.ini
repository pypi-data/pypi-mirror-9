# privacyIDEA - Pylons development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
debug = false
profile = false
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost


# default audit trail set to SQL Audit
privacyideaAudit.type = privacyidea.lib.auditmodules.sqlaudit
privacyideaAudit.key.private = %(here)s/private.pem
privacyideaAudit.key.public = %(here)s/public.pem

#privacyideaAudit.sql.url = mysql://privacyidea:privacyidea@localhost/privacyidea
#privacyideaAudit.sql.url = sqlite:///%(here)s/token.sqlite
# One entry for SQL audit might take about 1K
privacyideaAudit.sql.highwatermark = 10000
#privacyideaAudit.sql.lowwatermark = 5000

# If true, OTP values can be retrieved via the getotp controller
privacyideaGetotp.active = True

#privacyidea.DefaultSyncWindow = 1000
#privacyidea.DefaultOtpLen = 6
#privacyidea.DefaultCountWindow = 50
#privacyidea.DefaultMaxFailCount = 15
#privacyidea.FailCounterIncOnFalsePin = True
#privacyidea.PrependPin = True
#privacyidea.DefaultResetFailCount = True
#privacyidea.splitAtSign = True
privacyideaSecretFile = %(here)s/encKey

# This file contains the token administrators. 
# It can be created like this:
# % tools/privacyidea-create-pwidresolver-user -u admin -p test -i 1000 >> config/admin-users
privacyideaSuperuserFile = %(here)s/admin-users
# list of realms, that are admins
privacyideaSuperuserRealms = superuser
privacyIDEASessionTimeout = 1200
# This is the server, where this system is running.
# This is need to issue a request during login to the 
# management with an OTP token.
privacyideaURL = http://localhost:5001
#
# This determines if the SSL certificate is checked during the login to 
# privacyIDEA. Set to True, if you have a self signed certificate.
privacyideaURL.disable_ssl = False

#privacyidea.useridresolver = privacyidea.lib.resolvers.PasswdIdResolver.IdResolver
# This is only used for testnig purposes for running the selftests.
#privacyidea.selfTest = True


# deprecated
#privacyideaNoSessionCheck = localhost, 127.0.0.1

# The authentication to management and selfservice is
# a form based authentication including countermeasures 
# for CSRF.
# You can change this to basic authentication, which could
# be used on headless machines, that only call the API.
# Note: there will be no CSRF countermeasures in case of
# basic_auth!
# This parameter takes a list of IP-addresses or subnets.
#privacyideaBasicAuth.clients = 127.0.0.1, 10.0.0.0/24

# These are the settings for the RADIUS Token
# The location of the RADIUS dictionary file
radius.dictfile= %(here)s/dictionary
# The NAS Identifier of your privacyIDEA server, 
# that is sent to the RADIUS server
radius.nas_identifier = privacyIDEA

# This is used to provide a list of application modules.
#
privacyideaMachine.applications = privacyidea.lib.applications.ssh, privacyidea.lib.applications.luks 

[server:main]
use = egg:Paste#http
#host = 172.16.200.100
host = 0.0.0.0
#host = localhost
port = 5001
ssl_pem = %(here)s/server.pem

[app:main]
use = egg:privacyIDEA
sqlalchemy.url = mysql://pi2:pi2@localhost/pi2
#sqlalchemy.url = sqlite:///%(here)s/token.sqlite
#sqlalchemy.url = sqlite:////var/lib/privacyidea/token.sqlite
sqlalchemy.pool_recycle = 3600
full_stack = true
static_files = true

# We do not need a who.config, since we do the config in the
# code at config/middleware.py
#who.config_file = %(here)s/who.ini
who.log_level = debug
who.log_file = %(here)s/privacyidea.log


cache_dir = %(here)s/data
custom_templates = %(here)s/custom-templates/
#beaker.session.key = privacyidea
#beaker.session.secret = somesecret

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions


#
#  Note: You should change the Logging Level from DEGUB to WARN
#
# Logging configuration
[loggers]
keys = root, privacyidea, sqlalchemy
#keys = root, privacyidea, sqlalchemy, controllers

[logger_root]
level = WARNING
handlers = file

[logger_privacyidea]
level = INFO
handlers = file
qualname = privacyidea

#[logger_controllers]
#level = DEBUG
#handlers = file
#qualname = privacyidea.controllers.account

[logger_sqlalchemy]
level = ERROR
handlers = file
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handlers]
keys = file

[handler_file]
class = handlers.RotatingFileHandler
# Make the logfiles 10 MB
# and rotate 4  files
args = ('/var/log/privacyidea/privacyidea.log','a', 10000000, 4)
#
# Please note, that the %(here)s parameter will not work, when
# running in wsgi.
#args = ('/var/log/privacyidea/privacyidea.log','a', 10000000, 4)
level = INFO
formatter = generic

[formatters]
keys = generic

[formatter_generic]
class = privacyidea.lib.log.SecureFormatter
format = %(asctime)s %(levelname)-5.5s {%(thread)d} [%(name)s][%(funcName)s #%(lineno)d] %(message)s
datefmt = %Y/%m/%d - %H:%M:%S



