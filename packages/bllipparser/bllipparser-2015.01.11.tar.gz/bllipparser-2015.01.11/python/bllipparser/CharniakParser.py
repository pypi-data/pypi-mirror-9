# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CharniakParser', [dirname(__file__)])
        except ImportError:
            import _CharniakParser
            return _CharniakParser
        if fp is not None:
            try:
                _mod = imp.load_module('_CharniakParser', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CharniakParser = swig_import_helper()
    del swig_import_helper
else:
    import _CharniakParser
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class SwigPyIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CharniakParser.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _CharniakParser.SwigPyIterator_value(self)
    def incr(self, n=1): return _CharniakParser.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _CharniakParser.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _CharniakParser.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _CharniakParser.SwigPyIterator_equal(self, *args)
    def copy(self): return _CharniakParser.SwigPyIterator_copy(self)
    def next(self): return _CharniakParser.SwigPyIterator_next(self)
    def __next__(self): return _CharniakParser.SwigPyIterator___next__(self)
    def previous(self): return _CharniakParser.SwigPyIterator_previous(self)
    def advance(self, *args): return _CharniakParser.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _CharniakParser.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _CharniakParser.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _CharniakParser.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _CharniakParser.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _CharniakParser.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _CharniakParser.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _CharniakParser.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def parse(*args):
  return _CharniakParser.parse(*args)
parse = _CharniakParser.parse

def setOptions(*args):
  return _CharniakParser.setOptions(*args)
setOptions = _CharniakParser.setOptions

def tokenize(*args):
  return _CharniakParser.tokenize(*args)
tokenize = _CharniakParser.tokenize

def inputTreeFromString(*args):
  return _CharniakParser.inputTreeFromString(*args)
inputTreeFromString = _CharniakParser.inputTreeFromString

def inputTreesFromString(*args):
  return _CharniakParser.inputTreesFromString(*args)
inputTreesFromString = _CharniakParser.inputTreesFromString

def inputTreesFromFile(*args):
  return _CharniakParser.inputTreesFromFile(*args)
inputTreesFromFile = _CharniakParser.inputTreesFromFile

def sentRepsFromString(*args):
  return _CharniakParser.sentRepsFromString(*args)
sentRepsFromString = _CharniakParser.sentRepsFromString

def sentRepsFromFile(*args):
  return _CharniakParser.sentRepsFromFile(*args)
sentRepsFromFile = _CharniakParser.sentRepsFromFile

def asNBestList(*args):
  return _CharniakParser.asNBestList(*args)
asNBestList = _CharniakParser.asNBestList

def error(*args):
  return _CharniakParser.error(*args)
error = _CharniakParser.error

def ptbEscape(*args):
  return _CharniakParser.ptbEscape(*args)
ptbEscape = _CharniakParser.ptbEscape

def ptbUnescape(*args):
  return _CharniakParser.ptbUnescape(*args)
ptbUnescape = _CharniakParser.ptbUnescape
class StringList:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr
    def iterator(self): return _CharniakParser.StringList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CharniakParser.StringList___nonzero__(self)
    def __bool__(self): return _CharniakParser.StringList___bool__(self)
    def __len__(self): return _CharniakParser.StringList___len__(self)
    def pop(self): return _CharniakParser.StringList_pop(self)
    def __getslice__(self, *args): return _CharniakParser.StringList___getslice__(self, *args)
    def __setslice__(self, *args): return _CharniakParser.StringList___setslice__(self, *args)
    def __delslice__(self, *args): return _CharniakParser.StringList___delslice__(self, *args)
    def __delitem__(self, *args): return _CharniakParser.StringList___delitem__(self, *args)
    def __getitem__(self, *args): return _CharniakParser.StringList___getitem__(self, *args)
    def __setitem__(self, *args): return _CharniakParser.StringList___setitem__(self, *args)
    def append(self, *args): return _CharniakParser.StringList_append(self, *args)
    def empty(self): return _CharniakParser.StringList_empty(self)
    def size(self): return _CharniakParser.StringList_size(self)
    def clear(self): return _CharniakParser.StringList_clear(self)
    def swap(self, *args): return _CharniakParser.StringList_swap(self, *args)
    def get_allocator(self): return _CharniakParser.StringList_get_allocator(self)
    def begin(self): return _CharniakParser.StringList_begin(self)
    def end(self): return _CharniakParser.StringList_end(self)
    def rbegin(self): return _CharniakParser.StringList_rbegin(self)
    def rend(self): return _CharniakParser.StringList_rend(self)
    def pop_back(self): return _CharniakParser.StringList_pop_back(self)
    def erase(self, *args): return _CharniakParser.StringList_erase(self, *args)
    def __init__(self, *args): 
        this = _CharniakParser.new_StringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CharniakParser.StringList_push_back(self, *args)
    def front(self): return _CharniakParser.StringList_front(self)
    def back(self): return _CharniakParser.StringList_back(self)
    def assign(self, *args): return _CharniakParser.StringList_assign(self, *args)
    def resize(self, *args): return _CharniakParser.StringList_resize(self, *args)
    def insert(self, *args): return _CharniakParser.StringList_insert(self, *args)
    def pop_front(self): return _CharniakParser.StringList_pop_front(self)
    def push_front(self, *args): return _CharniakParser.StringList_push_front(self, *args)
    def reverse(self): return _CharniakParser.StringList_reverse(self)
    __swig_destroy__ = _CharniakParser.delete_StringList
    __del__ = lambda self : None;
StringList_swigregister = _CharniakParser.StringList_swigregister
StringList_swigregister(StringList)
cvar = _CharniakParser.cvar
max_sentence_length = cvar.max_sentence_length

class SentRepList:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SentRepList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SentRepList, name)
    __repr__ = _swig_repr
    def iterator(self): return _CharniakParser.SentRepList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CharniakParser.SentRepList___nonzero__(self)
    def __bool__(self): return _CharniakParser.SentRepList___bool__(self)
    def __len__(self): return _CharniakParser.SentRepList___len__(self)
    def pop(self): return _CharniakParser.SentRepList_pop(self)
    def __getslice__(self, *args): return _CharniakParser.SentRepList___getslice__(self, *args)
    def __setslice__(self, *args): return _CharniakParser.SentRepList___setslice__(self, *args)
    def __delslice__(self, *args): return _CharniakParser.SentRepList___delslice__(self, *args)
    def __delitem__(self, *args): return _CharniakParser.SentRepList___delitem__(self, *args)
    def __getitem__(self, *args): return _CharniakParser.SentRepList___getitem__(self, *args)
    def __setitem__(self, *args): return _CharniakParser.SentRepList___setitem__(self, *args)
    def append(self, *args): return _CharniakParser.SentRepList_append(self, *args)
    def empty(self): return _CharniakParser.SentRepList_empty(self)
    def size(self): return _CharniakParser.SentRepList_size(self)
    def clear(self): return _CharniakParser.SentRepList_clear(self)
    def swap(self, *args): return _CharniakParser.SentRepList_swap(self, *args)
    def get_allocator(self): return _CharniakParser.SentRepList_get_allocator(self)
    def begin(self): return _CharniakParser.SentRepList_begin(self)
    def end(self): return _CharniakParser.SentRepList_end(self)
    def rbegin(self): return _CharniakParser.SentRepList_rbegin(self)
    def rend(self): return _CharniakParser.SentRepList_rend(self)
    def pop_back(self): return _CharniakParser.SentRepList_pop_back(self)
    def erase(self, *args): return _CharniakParser.SentRepList_erase(self, *args)
    def __init__(self, *args): 
        this = _CharniakParser.new_SentRepList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CharniakParser.SentRepList_push_back(self, *args)
    def front(self): return _CharniakParser.SentRepList_front(self)
    def back(self): return _CharniakParser.SentRepList_back(self)
    def assign(self, *args): return _CharniakParser.SentRepList_assign(self, *args)
    def resize(self, *args): return _CharniakParser.SentRepList_resize(self, *args)
    def insert(self, *args): return _CharniakParser.SentRepList_insert(self, *args)
    def pop_front(self): return _CharniakParser.SentRepList_pop_front(self)
    def push_front(self, *args): return _CharniakParser.SentRepList_push_front(self, *args)
    def remove(self, *args): return _CharniakParser.SentRepList_remove(self, *args)
    def unique(self): return _CharniakParser.SentRepList_unique(self)
    def reverse(self): return _CharniakParser.SentRepList_reverse(self)
    def sort(self): return _CharniakParser.SentRepList_sort(self)
    def merge(self, *args): return _CharniakParser.SentRepList_merge(self, *args)
    __swig_destroy__ = _CharniakParser.delete_SentRepList
    __del__ = lambda self : None;
SentRepList_swigregister = _CharniakParser.SentRepList_swigregister
SentRepList_swigregister(SentRepList)

class ScoredTreePair:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScoredTreePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScoredTreePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CharniakParser.new_ScoredTreePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _CharniakParser.ScoredTreePair_first_set
    __swig_getmethods__["first"] = _CharniakParser.ScoredTreePair_first_get
    __swig_setmethods__["second"] = _CharniakParser.ScoredTreePair_second_set
    __swig_getmethods__["second"] = _CharniakParser.ScoredTreePair_second_get
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _CharniakParser.delete_ScoredTreePair
    __del__ = lambda self : None;
ScoredTreePair_swigregister = _CharniakParser.ScoredTreePair_swigregister
ScoredTreePair_swigregister(ScoredTreePair)

class InputTrees:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputTrees, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputTrees, name)
    __repr__ = _swig_repr
    def iterator(self): return _CharniakParser.InputTrees_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CharniakParser.InputTrees___nonzero__(self)
    def __bool__(self): return _CharniakParser.InputTrees___bool__(self)
    def __len__(self): return _CharniakParser.InputTrees___len__(self)
    def pop(self): return _CharniakParser.InputTrees_pop(self)
    def __getslice__(self, *args): return _CharniakParser.InputTrees___getslice__(self, *args)
    def __setslice__(self, *args): return _CharniakParser.InputTrees___setslice__(self, *args)
    def __delslice__(self, *args): return _CharniakParser.InputTrees___delslice__(self, *args)
    def __delitem__(self, *args): return _CharniakParser.InputTrees___delitem__(self, *args)
    def __getitem__(self, *args): return _CharniakParser.InputTrees___getitem__(self, *args)
    def __setitem__(self, *args): return _CharniakParser.InputTrees___setitem__(self, *args)
    def append(self, *args): return _CharniakParser.InputTrees_append(self, *args)
    def empty(self): return _CharniakParser.InputTrees_empty(self)
    def size(self): return _CharniakParser.InputTrees_size(self)
    def clear(self): return _CharniakParser.InputTrees_clear(self)
    def swap(self, *args): return _CharniakParser.InputTrees_swap(self, *args)
    def get_allocator(self): return _CharniakParser.InputTrees_get_allocator(self)
    def begin(self): return _CharniakParser.InputTrees_begin(self)
    def end(self): return _CharniakParser.InputTrees_end(self)
    def rbegin(self): return _CharniakParser.InputTrees_rbegin(self)
    def rend(self): return _CharniakParser.InputTrees_rend(self)
    def pop_back(self): return _CharniakParser.InputTrees_pop_back(self)
    def erase(self, *args): return _CharniakParser.InputTrees_erase(self, *args)
    def __init__(self, *args): 
        this = _CharniakParser.new_InputTrees(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CharniakParser.InputTrees_push_back(self, *args)
    def front(self): return _CharniakParser.InputTrees_front(self)
    def back(self): return _CharniakParser.InputTrees_back(self)
    def assign(self, *args): return _CharniakParser.InputTrees_assign(self, *args)
    def resize(self, *args): return _CharniakParser.InputTrees_resize(self, *args)
    def insert(self, *args): return _CharniakParser.InputTrees_insert(self, *args)
    def pop_front(self): return _CharniakParser.InputTrees_pop_front(self)
    def push_front(self, *args): return _CharniakParser.InputTrees_push_front(self, *args)
    def remove(self, *args): return _CharniakParser.InputTrees_remove(self, *args)
    def unique(self): return _CharniakParser.InputTrees_unique(self)
    def reverse(self): return _CharniakParser.InputTrees_reverse(self)
    def sort(self): return _CharniakParser.InputTrees_sort(self)
    def merge(self, *args): return _CharniakParser.InputTrees_merge(self, *args)
    __swig_destroy__ = _CharniakParser.delete_InputTrees
    __del__ = lambda self : None;
InputTrees_swigregister = _CharniakParser.InputTrees_swigregister
InputTrees_swigregister(InputTrees)

class VectorScoredTree:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScoredTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScoredTree, name)
    __repr__ = _swig_repr
    def iterator(self): return _CharniakParser.VectorScoredTree_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CharniakParser.VectorScoredTree___nonzero__(self)
    def __bool__(self): return _CharniakParser.VectorScoredTree___bool__(self)
    def __len__(self): return _CharniakParser.VectorScoredTree___len__(self)
    def pop(self): return _CharniakParser.VectorScoredTree_pop(self)
    def __getslice__(self, *args): return _CharniakParser.VectorScoredTree___getslice__(self, *args)
    def __setslice__(self, *args): return _CharniakParser.VectorScoredTree___setslice__(self, *args)
    def __delslice__(self, *args): return _CharniakParser.VectorScoredTree___delslice__(self, *args)
    def __delitem__(self, *args): return _CharniakParser.VectorScoredTree___delitem__(self, *args)
    def __getitem__(self, *args): return _CharniakParser.VectorScoredTree___getitem__(self, *args)
    def __setitem__(self, *args): return _CharniakParser.VectorScoredTree___setitem__(self, *args)
    def append(self, *args): return _CharniakParser.VectorScoredTree_append(self, *args)
    def empty(self): return _CharniakParser.VectorScoredTree_empty(self)
    def size(self): return _CharniakParser.VectorScoredTree_size(self)
    def clear(self): return _CharniakParser.VectorScoredTree_clear(self)
    def swap(self, *args): return _CharniakParser.VectorScoredTree_swap(self, *args)
    def get_allocator(self): return _CharniakParser.VectorScoredTree_get_allocator(self)
    def begin(self): return _CharniakParser.VectorScoredTree_begin(self)
    def end(self): return _CharniakParser.VectorScoredTree_end(self)
    def rbegin(self): return _CharniakParser.VectorScoredTree_rbegin(self)
    def rend(self): return _CharniakParser.VectorScoredTree_rend(self)
    def pop_back(self): return _CharniakParser.VectorScoredTree_pop_back(self)
    def erase(self, *args): return _CharniakParser.VectorScoredTree_erase(self, *args)
    def __init__(self, *args): 
        this = _CharniakParser.new_VectorScoredTree(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CharniakParser.VectorScoredTree_push_back(self, *args)
    def front(self): return _CharniakParser.VectorScoredTree_front(self)
    def back(self): return _CharniakParser.VectorScoredTree_back(self)
    def assign(self, *args): return _CharniakParser.VectorScoredTree_assign(self, *args)
    def resize(self, *args): return _CharniakParser.VectorScoredTree_resize(self, *args)
    def insert(self, *args): return _CharniakParser.VectorScoredTree_insert(self, *args)
    def reserve(self, *args): return _CharniakParser.VectorScoredTree_reserve(self, *args)
    def capacity(self): return _CharniakParser.VectorScoredTree_capacity(self)
    __swig_destroy__ = _CharniakParser.delete_VectorScoredTree
    __del__ = lambda self : None;
VectorScoredTree_swigregister = _CharniakParser.VectorScoredTree_swigregister
VectorScoredTree_swigregister(VectorScoredTree)

class StringVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _CharniakParser.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CharniakParser.StringVector___nonzero__(self)
    def __bool__(self): return _CharniakParser.StringVector___bool__(self)
    def __len__(self): return _CharniakParser.StringVector___len__(self)
    def pop(self): return _CharniakParser.StringVector_pop(self)
    def __getslice__(self, *args): return _CharniakParser.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _CharniakParser.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _CharniakParser.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _CharniakParser.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _CharniakParser.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _CharniakParser.StringVector___setitem__(self, *args)
    def append(self, *args): return _CharniakParser.StringVector_append(self, *args)
    def empty(self): return _CharniakParser.StringVector_empty(self)
    def size(self): return _CharniakParser.StringVector_size(self)
    def clear(self): return _CharniakParser.StringVector_clear(self)
    def swap(self, *args): return _CharniakParser.StringVector_swap(self, *args)
    def get_allocator(self): return _CharniakParser.StringVector_get_allocator(self)
    def begin(self): return _CharniakParser.StringVector_begin(self)
    def end(self): return _CharniakParser.StringVector_end(self)
    def rbegin(self): return _CharniakParser.StringVector_rbegin(self)
    def rend(self): return _CharniakParser.StringVector_rend(self)
    def pop_back(self): return _CharniakParser.StringVector_pop_back(self)
    def erase(self, *args): return _CharniakParser.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _CharniakParser.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CharniakParser.StringVector_push_back(self, *args)
    def front(self): return _CharniakParser.StringVector_front(self)
    def back(self): return _CharniakParser.StringVector_back(self)
    def assign(self, *args): return _CharniakParser.StringVector_assign(self, *args)
    def resize(self, *args): return _CharniakParser.StringVector_resize(self, *args)
    def insert(self, *args): return _CharniakParser.StringVector_insert(self, *args)
    def reserve(self, *args): return _CharniakParser.StringVector_reserve(self, *args)
    def capacity(self): return _CharniakParser.StringVector_capacity(self)
    __swig_destroy__ = _CharniakParser.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _CharniakParser.StringVector_swigregister
StringVector_swigregister(StringVector)

class TermVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TermVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TermVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _CharniakParser.TermVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CharniakParser.TermVector___nonzero__(self)
    def __bool__(self): return _CharniakParser.TermVector___bool__(self)
    def __len__(self): return _CharniakParser.TermVector___len__(self)
    def pop(self): return _CharniakParser.TermVector_pop(self)
    def __getslice__(self, *args): return _CharniakParser.TermVector___getslice__(self, *args)
    def __setslice__(self, *args): return _CharniakParser.TermVector___setslice__(self, *args)
    def __delslice__(self, *args): return _CharniakParser.TermVector___delslice__(self, *args)
    def __delitem__(self, *args): return _CharniakParser.TermVector___delitem__(self, *args)
    def __getitem__(self, *args): return _CharniakParser.TermVector___getitem__(self, *args)
    def __setitem__(self, *args): return _CharniakParser.TermVector___setitem__(self, *args)
    def append(self, *args): return _CharniakParser.TermVector_append(self, *args)
    def empty(self): return _CharniakParser.TermVector_empty(self)
    def size(self): return _CharniakParser.TermVector_size(self)
    def clear(self): return _CharniakParser.TermVector_clear(self)
    def swap(self, *args): return _CharniakParser.TermVector_swap(self, *args)
    def get_allocator(self): return _CharniakParser.TermVector_get_allocator(self)
    def begin(self): return _CharniakParser.TermVector_begin(self)
    def end(self): return _CharniakParser.TermVector_end(self)
    def rbegin(self): return _CharniakParser.TermVector_rbegin(self)
    def rend(self): return _CharniakParser.TermVector_rend(self)
    def pop_back(self): return _CharniakParser.TermVector_pop_back(self)
    def erase(self, *args): return _CharniakParser.TermVector_erase(self, *args)
    def __init__(self, *args): 
        this = _CharniakParser.new_TermVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CharniakParser.TermVector_push_back(self, *args)
    def front(self): return _CharniakParser.TermVector_front(self)
    def back(self): return _CharniakParser.TermVector_back(self)
    def assign(self, *args): return _CharniakParser.TermVector_assign(self, *args)
    def resize(self, *args): return _CharniakParser.TermVector_resize(self, *args)
    def insert(self, *args): return _CharniakParser.TermVector_insert(self, *args)
    def reserve(self, *args): return _CharniakParser.TermVector_reserve(self, *args)
    def capacity(self): return _CharniakParser.TermVector_capacity(self)
    __swig_destroy__ = _CharniakParser.delete_TermVector
    __del__ = lambda self : None;
TermVector_swigregister = _CharniakParser.TermVector_swigregister
TermVector_swigregister(TermVector)

class TermVectorVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TermVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TermVectorVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _CharniakParser.TermVectorVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _CharniakParser.TermVectorVector___nonzero__(self)
    def __bool__(self): return _CharniakParser.TermVectorVector___bool__(self)
    def __len__(self): return _CharniakParser.TermVectorVector___len__(self)
    def pop(self): return _CharniakParser.TermVectorVector_pop(self)
    def __getslice__(self, *args): return _CharniakParser.TermVectorVector___getslice__(self, *args)
    def __setslice__(self, *args): return _CharniakParser.TermVectorVector___setslice__(self, *args)
    def __delslice__(self, *args): return _CharniakParser.TermVectorVector___delslice__(self, *args)
    def __delitem__(self, *args): return _CharniakParser.TermVectorVector___delitem__(self, *args)
    def __getitem__(self, *args): return _CharniakParser.TermVectorVector___getitem__(self, *args)
    def __setitem__(self, *args): return _CharniakParser.TermVectorVector___setitem__(self, *args)
    def append(self, *args): return _CharniakParser.TermVectorVector_append(self, *args)
    def empty(self): return _CharniakParser.TermVectorVector_empty(self)
    def size(self): return _CharniakParser.TermVectorVector_size(self)
    def clear(self): return _CharniakParser.TermVectorVector_clear(self)
    def swap(self, *args): return _CharniakParser.TermVectorVector_swap(self, *args)
    def get_allocator(self): return _CharniakParser.TermVectorVector_get_allocator(self)
    def begin(self): return _CharniakParser.TermVectorVector_begin(self)
    def end(self): return _CharniakParser.TermVectorVector_end(self)
    def rbegin(self): return _CharniakParser.TermVectorVector_rbegin(self)
    def rend(self): return _CharniakParser.TermVectorVector_rend(self)
    def pop_back(self): return _CharniakParser.TermVectorVector_pop_back(self)
    def erase(self, *args): return _CharniakParser.TermVectorVector_erase(self, *args)
    def __init__(self, *args): 
        this = _CharniakParser.new_TermVectorVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _CharniakParser.TermVectorVector_push_back(self, *args)
    def front(self): return _CharniakParser.TermVectorVector_front(self)
    def back(self): return _CharniakParser.TermVectorVector_back(self)
    def assign(self, *args): return _CharniakParser.TermVectorVector_assign(self, *args)
    def resize(self, *args): return _CharniakParser.TermVectorVector_resize(self, *args)
    def insert(self, *args): return _CharniakParser.TermVectorVector_insert(self, *args)
    def reserve(self, *args): return _CharniakParser.TermVectorVector_reserve(self, *args)
    def capacity(self): return _CharniakParser.TermVectorVector_capacity(self)
    __swig_destroy__ = _CharniakParser.delete_TermVectorVector
    __del__ = lambda self : None;
TermVectorVector_swigregister = _CharniakParser.TermVectorVector_swigregister
TermVectorVector_swigregister(TermVectorVector)


def loadModel(*args):
  return _CharniakParser.loadModel(*args)
loadModel = _CharniakParser.loadModel
class SentRep:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SentRep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SentRep, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CharniakParser.new_SentRep(*args)
        try: self.this.append(this)
        except: self.this = this
    def __len__(self): return _CharniakParser.SentRep___len__(self)
    def getWord(self, *args): return _CharniakParser.SentRep_getWord(self, *args)
    def getName(self): return _CharniakParser.SentRep_getName(self)
    def __str__(self): return _CharniakParser.SentRep___str__(self)
    def makeFailureTree(self, *args): return _CharniakParser.SentRep_makeFailureTree(self, *args)
    __swig_destroy__ = _CharniakParser.delete_SentRep
    __del__ = lambda self : None;
SentRep_swigregister = _CharniakParser.SentRep_swigregister
SentRep_swigregister(SentRep)

class InputTree:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputTree, name)
    __repr__ = _swig_repr
    def num(self): return _CharniakParser.InputTree_num(self)
    def start(self): return _CharniakParser.InputTree_start(self)
    def __len__(self): return _CharniakParser.InputTree___len__(self)
    def finish(self): return _CharniakParser.InputTree_finish(self)
    def word(self): return _CharniakParser.InputTree_word(self)
    def term(self): return _CharniakParser.InputTree_term(self)
    def ntInfo(self): return _CharniakParser.InputTree_ntInfo(self)
    def head(self): return _CharniakParser.InputTree_head(self)
    def hTag(self): return _CharniakParser.InputTree_hTag(self)
    def subTrees(self): return _CharniakParser.InputTree_subTrees(self)
    def headTree(self): return _CharniakParser.InputTree_headTree(self)
    def parent(self): return _CharniakParser.InputTree_parent(self)
    def parentSet(self): return _CharniakParser.InputTree_parentSet(self)
    __swig_destroy__ = _CharniakParser.delete_InputTree
    __del__ = lambda self : None;
    def make(self, *args): return _CharniakParser.InputTree_make(self, *args)
    def makePosList(self, *args): return _CharniakParser.InputTree_makePosList(self, *args)
    __swig_setmethods__["pageWidth"] = _CharniakParser.InputTree_pageWidth_set
    __swig_getmethods__["pageWidth"] = _CharniakParser.InputTree_pageWidth_get
    def __str__(self): return _CharniakParser.InputTree___str__(self)
    def toStringPrettyPrint(self): return _CharniakParser.InputTree_toStringPrettyPrint(self)
    def toSentRep(self): return _CharniakParser.InputTree_toSentRep(self)
    def getTags(self): return _CharniakParser.InputTree_getTags(self)
    def getWords(self): return _CharniakParser.InputTree_getWords(self)
    def setTerm(self, *args): return _CharniakParser.InputTree_setTerm(self, *args)
    def setNtInfo(self, *args): return _CharniakParser.InputTree_setNtInfo(self, *args)
    def setWord(self, *args): return _CharniakParser.InputTree_setWord(self, *args)
    def __init__(self): 
        this = _CharniakParser.new_InputTree()
        try: self.this.append(this)
        except: self.this = this
InputTree_swigregister = _CharniakParser.InputTree_swigregister
InputTree_swigregister(InputTree)

class ewDciTokStrm:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ewDciTokStrm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ewDciTokStrm, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CharniakParser.new_ewDciTokStrm(*args)
        try: self.this.append(this)
        except: self.this = this
    def read(self): return _CharniakParser.ewDciTokStrm_read(self)
    __swig_destroy__ = _CharniakParser.delete_ewDciTokStrm
    __del__ = lambda self : None;
ewDciTokStrm_swigregister = _CharniakParser.ewDciTokStrm_swigregister
ewDciTokStrm_swigregister(ewDciTokStrm)

class Wrd:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wrd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Wrd, name)
    __repr__ = _swig_repr
    def lexeme(self): return _CharniakParser.Wrd_lexeme(self)
    def __init__(self): 
        this = _CharniakParser.new_Wrd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CharniakParser.delete_Wrd
    __del__ = lambda self : None;
Wrd_swigregister = _CharniakParser.Wrd_swigregister
Wrd_swigregister(Wrd)

class Term:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Term, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Term, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CharniakParser.new_Term(*args)
        try: self.this.append(this)
        except: self.this = this
    def toInt(self): return _CharniakParser.Term_toInt(self)
    def terminal_p(self): return _CharniakParser.Term_terminal_p(self)
    def isPunc(self): return _CharniakParser.Term_isPunc(self)
    def openClass(self): return _CharniakParser.Term_openClass(self)
    def isColon(self): return _CharniakParser.Term_isColon(self)
    def isFinal(self): return _CharniakParser.Term_isFinal(self)
    def isComma(self): return _CharniakParser.Term_isComma(self)
    def isCC(self): return _CharniakParser.Term_isCC(self)
    def isRoot(self): return _CharniakParser.Term_isRoot(self)
    def isS(self): return _CharniakParser.Term_isS(self)
    def isParen(self): return _CharniakParser.Term_isParen(self)
    def isNP(self): return _CharniakParser.Term_isNP(self)
    def isVP(self): return _CharniakParser.Term_isVP(self)
    def isOpen(self): return _CharniakParser.Term_isOpen(self)
    def isClosed(self): return _CharniakParser.Term_isClosed(self)
    __swig_destroy__ = _CharniakParser.delete_Term
    __del__ = lambda self : None;
Term_swigregister = _CharniakParser.Term_swigregister
Term_swigregister(Term)

class ExtPos:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtPos, name)
    __repr__ = _swig_repr
    def hasExtPos(self): return _CharniakParser.ExtPos_hasExtPos(self)
    def addTagConstraints(self, *args): return _CharniakParser.ExtPos_addTagConstraints(self, *args)
    def getTerms(self, *args): return _CharniakParser.ExtPos_getTerms(self, *args)
    def size(self): return _CharniakParser.ExtPos_size(self)
    def __init__(self): 
        this = _CharniakParser.new_ExtPos()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CharniakParser.delete_ExtPos
    __del__ = lambda self : None;
ExtPos_swigregister = _CharniakParser.ExtPos_swigregister
ExtPos_swigregister(ExtPos)

# This file is compatible with both classic and new-style classes.


