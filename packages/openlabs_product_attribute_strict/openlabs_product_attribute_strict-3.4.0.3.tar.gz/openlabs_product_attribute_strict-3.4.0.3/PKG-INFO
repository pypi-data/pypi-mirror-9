Metadata-Version: 1.1
Name: openlabs_product_attribute_strict
Version: 3.4.0.3
Summary: Experimental module to improve Product Attribute module
        consistency
Home-page: http://www.openlabs.co.in/
Author: Openlabs Technologies and Consulting (P) Ltd.
Author-email: info@openlabs.co.in
License: GPL-3
Description: Product Attributes (Strict)
        ===========================
        
        .. image:: https://travis-ci.org/openlabs/product-attribute-strict.svg?branch=develop
            :target: https://travis-ci.org/openlabs/product-attribute-strict
        
        .. image:: https://pypip.in/download/openlabs_product_attribute_strict/badge.svg
            :target: https://pypi.python.org/pypi//openlabs_product_attribute_strict/
            :alt: Downloads
        
        .. image:: https://pypip.in/version/openlabs_product_attribute_strict/badge.svg
            :target: https://pypi.python.org/pypi/openlabs_product_attribute_strict/
            :alt: Latest Version
        
        .. image:: https://pypip.in/status/openlabs_product_attribute_strict/badge.svg
            :target: https://pypi.python.org/pypi/openlabs_product_attribute_strict/
            :alt: Development Status
        
        Tryton has a powerful system of attributes for products introduced by the
        ``product_attribute`` module. The module however uses the ``fields.Dict``
        (JSON in database) field type to store attributes and this reduces the
        consistency since the lack of foreign keys and constraints allow deletion,
        renaming and editing of selection values even when used by products.
        
        This module tries to remain as close as possible to Tryton's attribute
        system, but avoids the dictionary field to have attributes stored on
        separate table.
        
        Key differences
        ---------------
        
        1. Options of attributes with the `Selection` type are stores in a new
           table.
           (Core module stores that in a text field in a JSON like syntax)
        2. Attributes of product are stored on a separate table
           (Core module stores this as JSON serialized text in database)
        
        FAQ
        ---
        
        *1. Can you move data from the tryton core module to this module ?*
        
        Yes, you can. An example script is provided to migrate the values
        from Tryton's default attribute system to this one. The script can
        be found under ``scripts/migrate_from_core_module.py``
        
        *2. Can this module be installed alongside core `product_attribute` module ?*
        
        Nope. You can use only one of the two modules and obviously we
        recommend ours
        
        Authors and Contributors
        ------------------------
        
        This module was built at `Openlabs <http://www.openlabs.co.in>`_.
        
        Professional Support
        --------------------
        
        This module is professionally supported by `Openlabs <http://www.openlabs.co.in>`_.
        If you are looking for on-site teaching or consulting support, contact our
        `sales <mailto:sales@openlabs.co.in>`_ and `support
        <mailto:support@openlabs.co.in>`_ teams.
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Plugins
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Framework :: Tryton
Classifier: Topic :: Office/Business
