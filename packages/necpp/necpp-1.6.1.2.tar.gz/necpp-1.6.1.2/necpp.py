# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_necpp', [dirname(__file__)])
        except ImportError:
            import _necpp
            return _necpp
        if fp is not None:
            try:
                _mod = imp.load_module('_necpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _necpp = swig_import_helper()
    del swig_import_helper
else:
    import _necpp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def nec_create():
  return _necpp.nec_create()
nec_create = _necpp.nec_create

def nec_delete(*args):
  return _necpp.nec_delete(*args)
nec_delete = _necpp.nec_delete

def nec_benchmark():
  return _necpp.nec_benchmark()
nec_benchmark = _necpp.nec_benchmark

def nec_wire(*args):
  return _necpp.nec_wire(*args)
nec_wire = _necpp.nec_wire

def nec_sp_card(*args):
  return _necpp.nec_sp_card(*args)
nec_sp_card = _necpp.nec_sp_card

def nec_sc_card(*args):
  return _necpp.nec_sc_card(*args)
nec_sc_card = _necpp.nec_sc_card

def nec_gm_card(*args):
  return _necpp.nec_gm_card(*args)
nec_gm_card = _necpp.nec_gm_card

def nec_gx_card(*args):
  return _necpp.nec_gx_card(*args)
nec_gx_card = _necpp.nec_gx_card

def nec_geometry_complete(*args):
  return _necpp.nec_geometry_complete(*args)
nec_geometry_complete = _necpp.nec_geometry_complete

def nec_error_message():
  return _necpp.nec_error_message()
nec_error_message = _necpp.nec_error_message

def nec_gn_card(*args):
  return _necpp.nec_gn_card(*args)
nec_gn_card = _necpp.nec_gn_card

def nec_fr_card(*args):
  return _necpp.nec_fr_card(*args)
nec_fr_card = _necpp.nec_fr_card

def nec_ld_card(*args):
  return _necpp.nec_ld_card(*args)
nec_ld_card = _necpp.nec_ld_card

def nec_ex_card(*args):
  return _necpp.nec_ex_card(*args)
nec_ex_card = _necpp.nec_ex_card

def nec_tl_card(*args):
  return _necpp.nec_tl_card(*args)
nec_tl_card = _necpp.nec_tl_card

def nec_nt_card(*args):
  return _necpp.nec_nt_card(*args)
nec_nt_card = _necpp.nec_nt_card

def nec_xq_card(*args):
  return _necpp.nec_xq_card(*args)
nec_xq_card = _necpp.nec_xq_card

def nec_gd_card(*args):
  return _necpp.nec_gd_card(*args)
nec_gd_card = _necpp.nec_gd_card

def nec_rp_card(*args):
  return _necpp.nec_rp_card(*args)
nec_rp_card = _necpp.nec_rp_card

def nec_pt_card(*args):
  return _necpp.nec_pt_card(*args)
nec_pt_card = _necpp.nec_pt_card

def nec_pq_card(*args):
  return _necpp.nec_pq_card(*args)
nec_pq_card = _necpp.nec_pq_card

def nec_kh_card(*args):
  return _necpp.nec_kh_card(*args)
nec_kh_card = _necpp.nec_kh_card

def nec_ne_card(*args):
  return _necpp.nec_ne_card(*args)
nec_ne_card = _necpp.nec_ne_card

def nec_nh_card(*args):
  return _necpp.nec_nh_card(*args)
nec_nh_card = _necpp.nec_nh_card

def nec_ek_card(*args):
  return _necpp.nec_ek_card(*args)
nec_ek_card = _necpp.nec_ek_card

def nec_cp_card(*args):
  return _necpp.nec_cp_card(*args)
nec_cp_card = _necpp.nec_cp_card

def nec_pl_card(*args):
  return _necpp.nec_pl_card(*args)
nec_pl_card = _necpp.nec_pl_card

def nec_gain_max(*args):
  return _necpp.nec_gain_max(*args)
nec_gain_max = _necpp.nec_gain_max

def nec_gain_min(*args):
  return _necpp.nec_gain_min(*args)
nec_gain_min = _necpp.nec_gain_min

def nec_gain_mean(*args):
  return _necpp.nec_gain_mean(*args)
nec_gain_mean = _necpp.nec_gain_mean

def nec_gain_sd(*args):
  return _necpp.nec_gain_sd(*args)
nec_gain_sd = _necpp.nec_gain_sd

def nec_gain_rhcp_max(*args):
  return _necpp.nec_gain_rhcp_max(*args)
nec_gain_rhcp_max = _necpp.nec_gain_rhcp_max

def nec_gain_rhcp_min(*args):
  return _necpp.nec_gain_rhcp_min(*args)
nec_gain_rhcp_min = _necpp.nec_gain_rhcp_min

def nec_gain_rhcp_mean(*args):
  return _necpp.nec_gain_rhcp_mean(*args)
nec_gain_rhcp_mean = _necpp.nec_gain_rhcp_mean

def nec_gain_rhcp_sd(*args):
  return _necpp.nec_gain_rhcp_sd(*args)
nec_gain_rhcp_sd = _necpp.nec_gain_rhcp_sd

def nec_gain_lhcp_max(*args):
  return _necpp.nec_gain_lhcp_max(*args)
nec_gain_lhcp_max = _necpp.nec_gain_lhcp_max

def nec_gain_lhcp_min(*args):
  return _necpp.nec_gain_lhcp_min(*args)
nec_gain_lhcp_min = _necpp.nec_gain_lhcp_min

def nec_gain_lhcp_mean(*args):
  return _necpp.nec_gain_lhcp_mean(*args)
nec_gain_lhcp_mean = _necpp.nec_gain_lhcp_mean

def nec_gain_lhcp_sd(*args):
  return _necpp.nec_gain_lhcp_sd(*args)
nec_gain_lhcp_sd = _necpp.nec_gain_lhcp_sd

def nec_impedance_real(*args):
  return _necpp.nec_impedance_real(*args)
nec_impedance_real = _necpp.nec_impedance_real

def nec_impedance_imag(*args):
  return _necpp.nec_impedance_imag(*args)
nec_impedance_imag = _necpp.nec_impedance_imag
# This file is compatible with both classic and new-style classes.


