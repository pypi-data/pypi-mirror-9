.\" Man page generated from reStructuredText.
.
.TH "TUNIR" "8" "March 23, 2015" "0.5" "Tunir"
.SH NAME
tunir \- Tunir, the simple CI with a big heart.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Tunir is a simple CI system. The goal is to have a system which is
simple to setup, and easy to maintain.
.sp
Contents:
.SH WHY ANOTHER CI?
.sp
I have used Jenkins before. I was maintaining one instance in one of my vps
instance.  The amount of ram required by Jenkins was too much for my small vm.
I can admit that I am not a great sys\-admin anyway.
.sp
As part of my daily job, I have to test the latest cloud images we build under
Fedora project, while doing so I figured out that most of it can be automated
if we have a system to create/maintain/terminate cloud instances. Of course I
do not want any actual cloud, it will be a different monster to maintain.
.sp
This is the point where I came up with Tunir, this simple CI system will help
me to do automated tests for the cloud images. I kept the system generic enough
to execute any kind of tests people want.
.sp
The configuration is very bare minimal with Tunir. The only time you may have
to do some real work, if you are using Docker containers to execute the test.
.SH INSTALLATION
.sp
Tunir is written in Python. Currently it works with Python2.7+
.SS Clone the repository
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone https://github.com/kushaldas/tunir.git
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Install the dependencies
.sp
We are currently depended on the following projects or libraries.
.INDENT 0.0
.IP \(bu 2
libvirt
.IP \(bu 2
libguestfs
.IP \(bu 2
libguestfs\-tools
.IP \(bu 2
paramiko
.IP \(bu 2
sqlalchemy
.IP \(bu 2
redis
.IP \(bu 2
python\-redis
.IP \(bu 2
docker  (optional)
.UNINDENT
.sp
You can install them in Fedora by the following command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo dnf install libguestfs\-tools python\-paramiko python\-sqlalchemy docker\-io python\-redis redis
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Start the redis server with the following command.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo service redis start
.ft P
.fi
.UNINDENT
.UNINDENT
.SH USAGE
.sp
Tunir is a continuous integration (CI) system which can run a set of commands/tests in a
new cloud VM, or bare metal, or in Docker containers based on the job configurations.
It uses fabric project to connect to the vm or bare metal tests.
.sp
The current version can be used along with cron to run at predefined times.
.SS Enabling a queue of ports for the VMs
.sp
We maintain a queue of available ports in the local system, which will be used to create
VM(s). We maintain this queue in Redis. We have a helper script which can enable some
default ports to be used. They are defined in the \fIcreateports.py\fP\&. In case you are using
a rpm, please check \fI/usr/share/tunir/\fP directory for the same.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python createports.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This is very important. Please have the queue with usable ports ready before any
other step. We use ports 2222 to 2230 as the default ports available in createports.py.
.UNINDENT
.UNINDENT
.SS Configuring a new job
.sp
For each different job, two files are required. For example, \fIdefault\fP job has two files,
\fBdefault.json\fP and \fBdefault.txt\fP\&.
.SS jobname.json
.sp
This file is the main configuration for the job. Below is the example of one such job.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "name": "jobname",
  "type": "vm",
  "image": "file:///home/vms/Fedora\-Cloud\-Base\-20141203\-21.x86_64.qcow2",
  "ram": 2048,
  "user": "fedora",
  "password": "passw0rd"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The possible keys are mentioned below.
.INDENT 0.0
.TP
.B name
The name of the job, which must match the filename.
.TP
.B type
The type of system in which the tests will run. Possible values are vm, docker, bare.
.TP
.B image
Path to the cloud image in case of a VM. You can provide docker image there for Docker based tests, or the ip/hostname of the bare metal box.
.TP
.B ram
The amount of RAM for the VM. Optional for bare or docker types.
.TP
.B user
The username to connect to.
.TP
.B password
The password of the given user. Right now for cloud VM(s) it is set to \fIpassw0rd\fP\&.
.TP
.B key
The path to the ssh key, the password value should be an empty string for this.
.TP
.B port
The port number as string to connect. (Required for bare type system.)
.UNINDENT
.SS jobname.txt
.sp
This text file contains the bash commands to run in the system, one command per line. In case you are
rebooting the system, you may want to use \fBSLEEP NUMBER_OF_SECONDS\fP command there.
.sp
If a command starts with @@ sign, it means the command is supposed to fail. Generally we check the return codes
of the commands to find if it failed, or not. For Docker container based systems, we track the stderr output.
.SS Database path
.sp
We get that value from a json configuration file named \fItunir.config\fP, either in the current directory or
from under /etc. There is an example configuration in the source.
.SS Create the database schema
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python tunirlib/createdb.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The path of the database is configured in the tunirlib/default_config.py file. Currently it stays under /tmp.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
You do not need a database if you are only running stateless jobs.
.UNINDENT
.UNINDENT
.SS Start a new job
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo ./tunir \-\-job jobname
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Find the result from a job
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ./tunir \-\-result JOB_ID
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The above command will create a file \fIresult\-JOB_ID.txt\fP in the current directory. It will overwrite any file (if exits).
In case you want to just print the result on the console use the following command.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ./tunir \-\-result JOB_ID \-\-text
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Job configuration directory
.sp
You can actually provide a path to tunir so that it can pick up job configuration and commands from the given directory.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo ./tunir \-\-job jobname \-\-config\-dir /etc/tunirjobs/
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Stateless jobs
.sp
You can run a job as stateless, which does not require any database. This will print the result at the end of the
run.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo ./tunir \-\-job jobname \-\-stateless
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Docker jobs
.sp
Docker jobs requires some work on the Docker image you want run. We will have to use a Dockerfile, and make sure
that sshd is running in that image. In case you are using a Debian based image, you will find the example in the
official \fI\%Docker documentation\fP\&.
.sp
If you want to use Fedora/CentOS images, then you can use the example \fI\%Dockerfile\fP
I wrote.
.sp
This way in all cases (vm, bare metal, or Docker containers) tunir will work in the same way.
.SS Atomic images
.sp
In case you are using an Atomic image, you can pass the command line argument \fI\-\-atomic\fP, that way Tunir will be
able to boot the image properly in the local system.
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.UNINDENT
.SH AUTHOR
Kushal Das
.SH COPYRIGHT
2015, Kushal Das
.\" Generated by docutils manpage writer.
.
