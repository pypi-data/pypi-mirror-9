// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6b
//
// <auto-generated>
//
// Generated from file `Instrumentation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_API_EXPORTS
#   define ICE_API_EXPORTS
#endif
#include <Ice/Instrumentation.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30651
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

namespace
{

}

}

namespace Ice
{
}

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::Observer* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::ThreadObserver* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::ConnectionObserver* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::DispatchObserver* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::ChildInvocationObserver* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::RemoteObserver* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::CollocatedObserver* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::InvocationObserver* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::ObserverUpdater* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::CommunicatorObserver* p) { return p; }
