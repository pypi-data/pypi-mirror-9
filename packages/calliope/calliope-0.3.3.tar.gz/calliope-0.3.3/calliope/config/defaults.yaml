#
# NB Parts of this file are automatically parsed and extracted for the configuration reference documentation.
# See `doc/user/configuration_reference.rst` and `doc/generate_tables.py`, which populates
# the `doc/user/includes` directory
#

#
# GENERAL MODEL SETTINGS
#

# General parameters
startup_time: 12  # Length of startup period (hours)

# Operation mode settings
opmode:
    horizon: 48  # Optimization period length (hours)
    window: 24  # Operation period length (hours)

# Per-carrier system margins
system_margin:
    power: 0

availability: false  # Disable availability constraint by default, EXPERIMENTAL

#
# TECH DEFAULTS
#

techs:
    defaults:
        stack_weight: 100
        color: false  # If no color is defined, a random one will be chosen
        source_carrier: false # Defaults to false, allows technologies to define a carrier to consume
        group: false
        constraints:
            force_r: false  # Forces this technology to use all available ``r``, rather than making it a maximum upper boundary (for production) or minimum lower boundary (for consumption)
            r_unit: power  # Sets the unit of ``r`` to either ``power`` (i.e. kW) or ``energy`` (i.e. kWh), which affects how resource time series are processed when performing time resolution adjustments
            r_eff: 1.0  # Resource to/from storage conversion efficiency
            r_area_max: false  # Installed collector area (m\ :sup:`2`), set this to ``false`` to force to 1.0
            r_area_per_e_cap: false  # If set, forces ``r_area`` to follow ``e_cap`` with the given numerical ration (e.g. setting to 1.5 means that ``r_area == 1.5 * e_cap``)
            r_cap_max: inf  # Maximum installed resource to/from storage conversion capacity (kW)
            r_scale: 1.0  # Scale resource by this value
            r_scale_to_peak: false  # Scale resource such that its peak is as defined here, ``false`` to disable. This setting only has an effect if a time series is used via ``r: file``
            allow_rb: false  # Allow secondary resource
            rb_startup_only: false  # Allow secondary resource during startup_time only (only has an effect if ``allow_rb`` is ``true``)
            rb_eff: 1.0  # Secondary resource to/from storage conversion efficiency
            rb_cap_max: inf  # Maximum installed secondary resource to storage conversion capacity (kW)
            rb_cap_max_force: false  # If ``true``, force ``rb_cap`` to equal either ``rb_cap_max`` or the chosen value of ``rb_cap_follows``
            rb_cap_follows:  false  # Can be set to ``e_cap`` or ``r_cap`` to force ``rb_cap_max`` to the respective value (in which case, ``rb_cap_max`` is ignored). ``false`` to disable
            s_init: 0  # Initial storage level (kWh)
            s_cap_max: 0  # Maximum storage capacity (kWh)
            s_cap_max_force: false  # If ``true``, force ``s_cap`` to equal ``s_cap_max``
            use_s_time: false  # Use full load hours for storage sizing? (set to ``true`` or ``false``)
            s_time_max: 0  # Max storage time (full load hours). Only has an effect if ``use_s_time`` is set to ``true``
            s_loss: 0  # Storage loss rate (per hour)
            e_prod: true  # Allow this technology to supply energy to the carrier
            e_con: false  # Allow this technology to consume energy from the carrier
            c_eff: 1.0  # Carrier efficiency (additional losses as energy gets transferred from the plant to the carrier, e.g. due to plant parasitic consumption)
            e_eff: 1.0  # Storage to/from carrier conversion efficiency. Can be set to ``file`` or ``file:`` or to a single numerical value
            e_eff_ref: false  # Reference storage to/from carrier efficiency. If set to false, e_eff is used instead. Currently only used when for storage size calculation when ``suse_s_time`` is ``true``.
            e_cap_max: 0  # Maximum installed storage to/from carrier conversion capacity (kW)
            e_cap_max_force: false  # If ``true``, force ``e_cap`` to equal ``e_cap_max``
            e_cap_max_scale: 1.0  # Scale ``e_cap_max`` by this value
            e_cap_min_use: false  # Set to a value between 0 and 1 to force minimum storage to carrier capacity use for production technologies
            e_ramping:  false  # Ramping rate (fraction of installed capacity per hour), set to ``false`` to disable ramping constraints (only has an effect if the optional ramping constraints are loaded)
            availability: 1.0  # UNDOCUMENTED -- experimental feature TODO
        costs:
            default:  # These default are looked up for any value not defined for a specific cost class
                s_cap: 0  # Cost of storage capacity (per kWh)
                r_area: 0  # Cost of resource collector area (per m\ :sup:`2`)
                r_cap: 0  # Cost of resource conversion capacity (per kW)
                rb_cap: 0  # Cost of secondary resource conversion capacity (per kW)
                e_cap: 0  # Cost of carrier conversion capacity (per kW gross)
                om_frac: 0  # Yearly O&M costs (fraction of total investment)
                om_fixed: 0  # Yearly O&M costs (per kW of ``e_cap``)
                om_var: 0  # Variable O&M costs (per kWh of ``es_prod``)
                om_fuel: 0  # Fuel costs (per kWh of ``r`` used)
                om_rb: 0  # Fuel costs for secondary resource (per kWh of ``rb`` used)
        costs_per_distance:
            default:
                e_cap: 0
        depreciation:
            plant_life: 25  # Lifetime of a plant (years)
            interest:
                default: 0  # Default interest rate if not specified for a cost class ``k``
                monetary: 0.10  # Interest rate for the ``monetary`` cost class
        weight: 1.0  # Cost weight in objective function (higher: relatively more expensive)
    supply:
        parent: defaults
    demand:
        parent: defaults
        constraints:
            r: 0
            force_r: true
            e_cap_max: inf
            e_prod: false
            e_con: true
    unmet_demand:  # Unmet demand that is not child of 'supply' so doesn't get grouped with it
        stack_weight: 0
        color: '#666666'
        parent: defaults
        constraints:
            r: inf
            e_cap_max: inf
        costs:
            monetary:
                om_var: 1.0e+9
    unmet_demand_as_supply_tech:  # Unmet demand that IS a child of 'supply' so gets treated like a regular supply technology for grouping purposes
        stack_weight: 0
        color: '#666666'
        parent: supply
        constraints:
            r: inf
            e_cap_max: inf
        costs:
            monetary:
                om_var: 1.0e+9
    storage:  # ``r`` is not used but still must be defined as inf
        parent: defaults
        constraints:
            r: inf
            e_con: true
    transmission:  # ``r`` is not used but still must be defined as inf
        parent: defaults
        constraints:
            r: inf
            e_cap_max: inf
            e_con: true
    conversion:  # ``r`` is not used but still must be defined as inf
        parent: defaults
        constraints:
            r: inf
            e_con: true
