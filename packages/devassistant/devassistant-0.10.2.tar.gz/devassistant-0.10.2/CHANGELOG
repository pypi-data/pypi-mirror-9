0.10.2
- Small bugfix release
- Installation documentation
- Added option to install DAP without dependencies
- Assistants and snippets in a DAP can be listed

0.10.1
- Small bugfix release
- Docker hard dependency dropped because of non-x86_64 architectures
- Better documentation of upload mechanism to DAPI
- More friendly error output in some use cases
- Assistant args can now be stored in a list, allowing multiple positional args

0.10.0
- DAPI support added, default assistant set was dropped.
- New 'pkg' command for installing/removing packages from DAPI, linting.
- DevAssistant PingPong (a.k.a executable assistants) was implemented.
- "modify" assistants were renamed to "tweak", "task" assistants were
  renamed to "extras".
- Improve support for Docker, support Docker container orchestration
  with Vagrant.
- Support for Fedora's DNF package manager added.
- Support for dynamic CommandRunner loading in assistants was added.
- GitHub two-factor authentication now supported.
- Custom Polkit dialog when asking for elevated privileges.
- Option to specify what architectures an Assistant should be run on.
- Documentation overhaul.
- Tons of minor features added and bugs fixed.

0.9.1
- Mainly bugfixes
- New command ask_input - requests interactive input from user. Usable in both
  CLI and GUI environments.
- Snippets documentation
- GUI test suite in behave using dogtail now resides in /features

0.9.0
- Yaml DSL got a major facelift; check the documentation for more details
  on changes.
- Improved Github integration - better authentication, better return
  values of command runners, less error prone and more user friendly.
- Support for manipulating Docker containers was added to core.
- A simple mechanism for checking Yaml assistant sanity was implemented.
- Project types were introduced.
- All project dependencies are now listed explicitly in .devassistant files.
- Global variables with system (e.g. linux) and distribution (e.g. fedora)
  name and version are now globally available.
- A platform independent way of running commands as root has been introduced.
- Semantics of "in" for loops has been changed to iterate over characters;
  use "word_in" to achieve previous behaviour.
- Tons of minor bugfixes and documentation improvements.
- "crt", "mod" and "prep" got aliases "create", "modify" and "prepare" on
  command line. Users can now use whichever suits them best.

0.8.0
- DevAssistant can now install dependencies by Pacman on ArchLinux.
- Added appdata for Gnome Software Center.
- Added task assistants, whose aim is to carry out custom tasks not related
  to any project.
- Refactored commands to be more pluggable and have a defined API.
- Separated the Yaml language from assistants, which means DevAssistant is now
  usable as a library that can execute commands from passed Python structures.
- Expressions now allow complex stuff, since we have a parser now (thx sYnfo).
- GUI tweaks and improvements for better usability.
- Added --no-cache switch to turn of cache using.
- Added an option to specify additional load paths by DEVASSISTANT_PATH
  environment variable.
- Added jinja template renderer.
- Tons of documentation were added, notably command reference page.

0.7.0
- CLI facelift, introduce custom actions. Everything now works through
  a single entry point - the "da" binary.
- GUI refactoring and UX improvements.
- All modules of devassistant.assistants package have been moved to
  the top-level devassistant package (the subpackage only made sense
  out of historical reasons).
- Tons of bugfixes.
- Don't log dependency checks by default, add --debug flag for that.
- Yaml Assistant changes: "defined" now also returns the value of
  variable itself, if this variable is defined.
- Structure of load dirs was changed to keep everything organized
  and consistent. Consult the documentation to see load dirs structure.

0.6.1
- Quick bugfix release to enable GUI properly and fix some minor bugs.

0.6.0
- Lots of GUI work done, GUI is finally official.
- Introduced assistant cache, which stores the necessary information about
  all assistants, so that they don't have to be loaded everytime on startup.
- Assistant role is no longer specified by "role" attribute, it is rather
  implied by FS location (creator/modifier/preparer directories).
- Preparer assistants can now run a "run" section specified in
  .devassistant file.
- Dependency installation is now uninterruptible, not to break rpmdb or such.
- Large rewrites of inner APIs (dependencies, yaml assistant representation).

0.5.0
- Assistants have been split to different repo, but they remain as a "part"
  of devassistant for the time being (no separate versioning, etc.)
- Fully automatic bash completion (if you use distro package or
  copy da.bash into /etc/bash_completion/)
- A new switch that allows users to choose to prefer a specific UI (gui/tty)
- Lot's of documentation added
- Option to use virtualenv in Python assistants
- Introduction simple for loops (yay!)
- Change of expression syntax (cl calls in expressions now have to be
  be called like "$(command -blabla)")
- Some optimizations of yaml loading to achieve speedup for starting.
- Tons of GUI facelifts (almost ready ;))

0.4.0
- Introduction of "preparer" assistants (use devassitant-prepare binary) that
  can checkout project from SCM and install it's dependencies according to
  .devassistant file
- Perl assistants, PHP assistant
- New way of dependency installation (first find dependencies via yum api,
  then show them to user and let him confirm, then install)
- Interactive commands now use zenity, if available, otherwise they fall
  back to terminal.
- New style of calling assistant/snippet sections
  (call: snippet.section; call: self.run_foo)
- Support for using SCLs easily (the "scl enable" command in yaml assistants)
- GitHub backend rewrite (can now create ssh keys and add them to the user,
  remembers authentication token)
- Some minor/less visible changes (logging improvement, bugfixing, cleanup)

0.3.1
- Abandoned plumbum, implemented own simpler and more suitable solution.
- Assistants are now sorted by name in usage output.
- Yum is executed via pkexec, so that users don't have to alter sudoers.

0.3.0
- Changelog starts here, although some versions were already released.
- At this point, devassistant can create C, C++, various Python, Java and
  Ruby projects
- Devassistant also has the ability to modify existing projects (import to
  eclipse so far)
- The features of created projects include (except for the source code itself)
-- Option to register project into eclipse
-- Option to push project to GitHub
-- Option to set up Vim
- Devassistant can install RPM dependencies
- GUI is not yet operational (although there is a first testing code)
- Yaml assistants have pretty nice set of features and you can implement pretty
  much anything in them (snippets can DRY the code, etc.)
