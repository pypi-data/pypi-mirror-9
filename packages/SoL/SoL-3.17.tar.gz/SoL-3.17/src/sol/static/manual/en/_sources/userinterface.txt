.. -*- coding: utf-8 -*-
.. :Progetto:  SoL
.. :Creato:    gio 06 nov 2008 14:47:43 CET
.. :Autore:    Lele Gaifax <lele@metapensiero.it>
.. :Licenza:   GNU General Public License version 3 or later
..

================
 User interface
================

I tried to keep the user interaction as simple as possible, focused on the typical *workflow*
of managing a new tourney: given a :ref:`club <clubs management>`, selected the
:ref:`championship <championships management>`, create a new :ref:`tourney <tourneys
management>` and then

1. insert the participants, selecting among known :ref:`players <players management>`, possibly
   organizing them in teams

   .. index:: Phantom

   .. note:: When the number of participants is *odd*, SoL will **automatically** handle the
             presence of a `phantom player`, against whom any player wins with a score of
             **25â€”0** (for this reason the scorecards for these imaginary matches are not even
             emitted). In particular cases the actual score assigned to the player may be
             changed on the :ref:`tourney insert and edit` window.

2. print the initial individual :ref:`badges`

3. create the first round: if the tourney is associated with a particular :ref:`glicko rating
   <glicko rating management>` it will be generated using the current rate of each player,
   otherwise using a random order; in any case, the tourney manager may manually adjust the
   combinations generated by the computer

4. print the :ref:`scorecards` of the current round

5. let's play carrom!

6. collect compiled :ref:`scorecards` and insert the resulting scores

7. compute the new ranking and print it if needed

8. verify what picky guys are telling, correct and repeat

9. if desired, let other people join in adding new participants, or let other leave

10. compute the next round and jump to point 4 until satisfied, or until all possible
    combinations are exhausted, whichever comes first

11. if desired, generate and play a :ref:`final round <final round>` to determine the top four
    places in the ranking

12. assign the bounties, print the ranking and the final :ref:`badges`

.. toctree::
   :maxdepth: 2

   authentication
   entities
   other
