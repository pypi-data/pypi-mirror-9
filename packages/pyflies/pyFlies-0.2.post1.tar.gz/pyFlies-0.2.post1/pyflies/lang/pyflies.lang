<?xml version="1.0" encoding="UTF-8"?>
<!--

 This is a pyflies syntax coloring definition for GtkSourceView component.

 Author: Igor R. Dejanovic <igor DOT dejanovic AT gmail DOT com>
 Based on various style files from GtkSourceView component.
-->
<language id="pyflies" _name="pyFlies" version="2.0" _section="Scientific">
  <metadata>
    <property name="mimetypes">text/x-pyflies</property>
    <property name="globs">*.pf</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="comment"           _name="Comment"               map-to="def:comment"/>
    <style id="string"            _name="String"                map-to="def:string"/>
    <style id="char"              _name="Character"             map-to="def:character"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="enum"              _name="Enumeration"           map-to="def:builtin"/>
    <style id="operator"          _name="Operator"              map-to="def:operator"/>
    <style id="type"              _name="Data Type"             map-to="def:type"/>
    <style id="escaped-character" _name="Escaped Character"     map-to="def:special-char"/>
    <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"           _name="Decimal number"        map-to="def:decimal"/>
    <style id="boolean"           _name="Boolean value"         map-to="def:boolean"/>
    <style id="error"             _name="Error"                 map-to="def:error"/>
  </styles>

  <definitions>

    <!--regexs-->
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      [0-7]{1,3} |          # one, two, or three octal digits
      x[0-9A-Fa-f]+         # 'x' followed by hex digits
      )
    </define-regex>


    <context id="string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>L?"</start>
      <end>"</end>
      <include>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char">
      <match>L?'(\%{escaped-character}|.)'</match>
    </context>

    <!-- http://www.lysator.liu.se/c/ANSI-C-grammar-l.html -->
    <context id="float" style-ref="floating-point">
      <match extended="true">
        (?&lt;![\w\.])
        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
         ([0-9]+[Ee][+-]?[0-9]*))
        [fFlL]?
        (?![\w\.])
      </match>
    </context>


    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        (0|[1-9][0-9]*)[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="keywords" style-ref="keyword">
      <keyword>basepath</keyword>
      <keyword>test</keyword>
      <keyword>conditions</keyword>
      <keyword>duration</keyword>
      <keyword>practice</keyword>
      <keyword>content</keyword>
      <keyword>endcontent</keyword>
      <keyword>screen</keyword>
      <keyword>subject</keyword>
      <keyword>experiment</keyword>
      <keyword>structure</keyword>
      <keyword>randomize</keyword>
      <keyword>response</keyword>
      <keyword>responses</keyword>
      <keyword>target</keyword>
      <keyword>output</keyword>
      <keyword>sequence</keyword>
      <keyword>stimuli</keyword>
    </context>

    <context id="operators" style-ref="operator">
      <keyword>\*</keyword>
      <keyword>=</keyword>
      <keyword>and</keyword>
      <keyword>or</keyword>
      <keyword>not</keyword>
    </context>

    <context id="stimuliParams">
      <start>\(</start>
      <end>\)</end>
      <include>
        <context id="paramKwds" style-ref="keyword">
          <keyword>start</keyword>
          <keyword>duration</keyword>
          <keyword>position</keyword>
          <keyword>size</keyword>
          <keyword>radius</keyword>
          <keyword>from</keyword>
          <keyword>to</keyword>
          <keyword>keep</keyword>
          <keyword>target</keyword>
          <keyword>color</keyword>
          <keyword>fillColor</keyword>
          <keyword>lineWidth</keyword>
        </context>
        <context ref="decimal"/>
        <context ref="string"/>
      </include>
    </context>

    <context id="stimuliTypes" style-ref="enum">
      <keyword>shape</keyword>
      <keyword>image</keyword>
      <keyword>sound</keyword>
      <keyword>audio</keyword>
      <keyword>text</keyword>
    </context>

    <context id="types" style-ref="type">
      <keyword>bool</keyword>
      <keyword>char</keyword>
      <keyword>double</keyword>
      <keyword>float</keyword>
      <keyword>int</keyword>
      <keyword>long</keyword>
      <keyword>string</keyword>
    </context>

    <context id="enumkwds" style-ref="enum">
      <keyword>all</keyword>
      <keyword>error</keyword>
      <keyword>correct</keyword>
      <keyword>fixation</keyword>
    </context>

    <context id="enumliterals" style-ref="type">
      <start>\[</start>
      <end>\]</end>
      <include>
        <context ref="enumliteral"/>
      </include>
    </context>

    <context id="enumliteral" style-ref="type">
      <match>L?[a-zA-Z0-9_]*</match>
    </context>


    <!-- C99 booleans -->
    <context id="boolean" style-ref="boolean">
      <keyword>true</keyword>
      <keyword>false</keyword>
    </context>

    <context id="textcontent" style-ref="comment">
      <start>(screen)\s*[a-zA-Z0-9_]+\s*{</start>
      <end>}</end>
      <include>
        <context sub-pattern="1" where="start" style-ref="keyword"/>
        <context ref="rst:rst" />
      </include>
    </context>

    <context id="conditions" class-disabled="no-spell-check">
      <start>(conditions)\s*{</start>
      <end>}</end>
      <include>
        <context sub-pattern="1" where="start" style-ref="keyword" class="no-spell-check"/>
        <context extend-parent="false" style-ref="keyword">
          <!-- FIXME: No newlines in regex. Upstream bug.
          <match>/([ \n\t]*[^\n]+\n)(.*)$/s</match> -->
          <match>()(.*)</match>
          <include>
            <context sub-pattern="1" style-ref="keyword"/>
            <context sub-pattern="2" style-ref="comment"/>
          </include>
        </context>
      </include>
    </context>

    <!--Main context-->
    <context id="pyflies" class="no-spell-check">
      <include>
        <context ref="def:c-like-comment"/>
        <context ref="def:c-like-comment-multiline"/>
        <context ref="def:c-like-close-comment-outside-comment"/>
        <context ref="textcontent"/>
        <context ref="conditions"/>
        <context ref="string"/>
        <context ref="char"/>
        <context ref="float"/>
        <context ref="decimal"/>
        <context ref="keywords"/>
        <context ref="enumliterals"/>
        <context ref="enumkwds"/>
        <context ref="stimuliParams"/>
        <context ref="stimuliTypes"/>
        <context ref="operators"/>
        <context ref="types"/>
        <context ref="boolean"/>
      </include>
    </context>

  </definitions>
</language>
