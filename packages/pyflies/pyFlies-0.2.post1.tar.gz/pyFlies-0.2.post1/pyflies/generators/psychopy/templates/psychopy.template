{# vim: filetype=django tabstop=4 shiftwidth=4 expandtab
-#}
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
{{m.name}}
---------------------

{{m.description}}

This test was generated by pyFlies(https://github.com/igordejanovic/pyFlies) on {{datetime}}
If you are going to regenerate this file from the pyFlies model again
do not edit it manually or else your manual changed will be lost.
"""
import os
import time
import random
import csv
from psychopy import core, visual, sound, event

win = visual.Window(color="black", fullscr=True)

{%- macro stimulus(s) %}
  {%- if s._typename == "Shape" -%}
    {%- if s.shape == "circle" -%}
visual.Circle(size=({{s.width}}, {{s.height}}), colour=misc.constants.{{color_map[s.color]}}, position=({{s.x}}, {{s.y}}))
    {%- elif s.shape == "rectangle" -%}
[[visual.Rect(win,
             pos=({{s.x/100}},{{s.y/100}}),
             lineColor="{{s.color}}",
             fillColor="{{s.fillColor}}",
             lineWidth={{s.lineWidth+3}})],
 {{s|duration}}, {{s.keep}}, {{s.target}}]  # duration, keep, target
    {%- elif s.shape == "cross" -%}
[[visual.Line(win,
              start=({{s.x/100-0.1}},{{s.y/100}}),
              end=({{s.x/100+0.1}}, {{s.y/100}}),
              lineColor="{{s.color}}"), 
  visual.Line(win,
              start=({{s.x/100}},{{s.y/100-0.1}}),
              end=({{s.x/100}}, {{s.y/100+0.1}}),
              lineColor="{{s.color}}")],
 {{s|duration}}, {{s.keep}}, {{s.target}}]  # duration, keep, target
    {%- endif %}
  {%- elif s._typename == "Text" -%}
[[visual.TextStim(win,
                  text="{{s.text}}",
                  height={{s.size/100}},
                  color="{{s.color}}",
                  pos=({{s.x}}, {{s.y}}))],
 {{s|duration}}, {{s.keep}}, {{s.target}}]  # duration, keep, target
  {%- elif s._typename == "Image" %}
[[visual.ImageStim(win,
                 image="{{s.file}}",
                 pos=({{s.x}}, {{s.y}}))],
 {{s|duration}}, {{s.keep}}, {{s.target}}]  # duration, keep, target
  {%- elif s._typename == "Sound" %}
[[sound.Sound({{s.frequency}})], {{s|duration}}, False, {{s.target}}]  # duration, keep, target
  {%- elif s._typename == "Audio" %}
sound.Audio("{{s.file}}")
  {%- endif %}
{%- endmacro %}


{% for b in m.blocks -%}
  {%- if b._typename == "ScreenType" %}

# Screen {{b.name}}
screen_{{b.name}} = [[[visual.TextStim(
    win,
    text="""
{{b.content|striptabs}}
    """,
    alignHoriz='center')], 0, False, False ]]
  {% elif b._typename == "TestType" %}

# {{b.name}} test
{{b.name}}_conditions = [
    {%- for cond in b.conditions.conditions %}
    {
        'condidx': {{loop.index}},
        {%- for varValue in cond.varValues %}
         {%- if b.conditions.varNames[loop.index0] == 'response' %}
        'response': '{{response_map[varValue]}}',
         {%- else %}
        '{{b.conditions.varNames[loop.index0]}}': '{{varValue}}',
         {%- endif %}
        {%- endfor %}
    },
    {%- endfor %}
]

{{b.name}}_varNames = [
    {% for var in b.conditions.varNames %}'{{var}}'{% if not loop.last %}, {% endif %}
    {%- endfor %}
]

# Stimuli for each condition of {{b.name}} test
{{b.name}}_condition_stimuli = [
    {%- for cond in b.conditions.conditions %}
        # Condition {{loop.index}}
        [
        {% for stimuli in cond.stimuli_for_cond -%}
            {%- for s in stimuli -%}
            {{ stimulus (s) }}{% if not loop.last %},
            {% endif %}
            {%- endfor -%}
        {% endfor %}
        ]{% if not loop.last %},
        {%- endif -%}
    {%- endfor %}
    ]

# Fixation stimuli for {{b.name}}
{{b.name}}_fixation = [
        {%- for s in b.fix %}
            {{ stimulus (s) }}{% if not loop.last %},
            {% endif %}
        {%- endfor %}
]

# Error stimuli for {{b.name}}
{{b.name}}_error = [
        {%- for s in b.error %}
            {{ stimulus (s) }}{% if not loop.last %},
            {% endif %}
        {%- endfor %}
]

# Correct stimuli for {{b.name}}
{{b.name}}_correct = [
        {%- for s in b.correct %}
            {{ stimulus (s) }}{% if not loop.last %},
            {% endif %}
        {%- endfor %}
]
  {%- endif %}
{%- endfor %}

def present_stimuli(stimuli):
    """
    Presents stimuli given in 'stimuli' list.
    """

    if not stimuli:
        return None, 0, False

    def get_duration(dur):
        if isinstance(dur, tuple):
            return random.randint(*dur)/1000
        else:
            if dur == 0:
                return float('inf')
            else:
                return dur/1000

    # Check if there is target stimuli. If not mark the first one as
    # target
    for stims, duration, keep, target in stimuli:
        if target:
            break
    else:
        stimuli[0][3] = True

    keep_list = []
    target_presented = False
    clock = core.Clock()
    for stims, duration, keep, target  in stimuli:
        duration = get_duration(duration)
        keep_list.append(stims)

        for sgroup in keep_list:
            for s in sgroup:
                if isinstance(s, visual.ShapeStim) \
                        or isinstance(s, visual.TextStim) \
                        or isinstance(s, visual.ImageStim):
                    s.draw()
                elif isinstance(s, sound.Sound):
                    s.secs = duration
                    s.play()
                else:
                    Exception('Unknown stimulus type - {}'.format(str(s)))

        if not keep:
            keep_list.pop()

        # If duration is less than 20ms continue.
        if duration < 0.02:
            continue

        # Show stimuli
        win.flip()

        # If this stimulus is marked as target create
        # clock instance to measure time from the presentation of this stimulus.
        if target:
            target_presented = True
            clock = core.Clock()

        # Wait for the duration. During wait check for key presses.
        keypresses = event.waitKeys(maxWait=duration,
                                   timeStamped=clock)
        if keypresses:
            # Currently we support only one keypress at the time.
            key, time = keypresses[0]
            if key in ['escape', 'q']:
                core.quit()
            return key, time if target_presented else 0, not target_presented

    return None, 0, True


def run_block(folder, test_name, cond_vars, conditions, condition_stimuli,
              repeat, practice, randomize,
              fixation_stim, error_stim, correct_stim):
    """
    Runs one block of trials for the given parameters.
    """
    # Run test for (repeat x number of condition) trials
    # If randomized, randomize each condition subset
    trials = []
    for i in range(repeat):
        cond_blk = list(conditions)
        if randomize:
            random.shuffle(cond_blk)
        trials.extend(cond_blk)

    timestr = time.strftime("%Y%m%d-%H%M%S")
    fileName = '%s-%s%s.csv' % (test_name, "practice-"
                                if practice else "", timestr)
    csvfile = open(os.path.join(folder, fileName), 'wt')
    try:
        writer = csv.writer(csvfile)

        # Write header
        header = ['ord']
        header.extend(cond_vars)
        header.extend(['actual_response', 'RT', 'error'])
        writer.writerow(header)
        order = 0
        for trial in trials:
            order += 1
            condidx = trial['condidx'] - 1

            # Present fixation first
            key, rt, error = present_stimuli(fixation_stim)

            # If key is pressed during fixation it is an error condition.
            if key:
                error = True
                rt = 0
            else:
                # Present condition stimuli
                key, rt, error = present_stimuli(condition_stimuli[condidx])

                error = error or (key != trial['response'])

            # Write data
            data_row = [order]
            for var in header[1:-3]:
                data_row.append(trial[var])
            data_row.extend([key, rt * 1000, int(error)])
            writer.writerow(data_row)
            print('key:', key, rt)

            # If error response present error stimuli
            if error:
                present_stimuli(error_stim)
            else:
                present_stimuli(correct_stim)
    finally:
        csvfile.close()

# Run experiment
# Create folder for experiment results.
timestr = time.strftime("%Y%m%d-%H%M%S")
exp_folder = '{{m.name}}-%s' % timestr
os.mkdir(exp_folder)

{%- for e in m.structure.elements %}
    {%- if e._typename == "ScreenInstance" %}

present_stimuli(screen_{{e.type.name}})
    {%- elif e._typename == "TestInstance" %}

run_block(exp_folder, "{{e.type.name}}", {{e.type.name}}_varNames,
          {{e.type.name}}_conditions, {{e.type.name}}_condition_stimuli,
          {{e.trials}}, {{e.practice}}, {{e.randomize}},  # trials, practice, randomize
          {{e.type.name}}_fixation, {{e.type.name}}_error, {{e.type.name}}_correct)
    {%- endif %}
{%- endfor %}

win.close()
