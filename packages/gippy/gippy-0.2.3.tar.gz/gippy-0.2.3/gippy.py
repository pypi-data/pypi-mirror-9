# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gippy', [dirname(__file__)])
        except ImportError:
            import _gippy
            return _gippy
        if fp is not None:
            try:
                _mod = imp.load_module('_gippy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gippy = swig_import_helper()
    del swig_import_helper
else:
    import _gippy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def gip_gdalinit():
  """gip_gdalinit()"""
  return _gippy.gip_gdalinit()
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gippy.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _gippy.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _gippy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _gippy.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _gippy.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _gippy.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _gippy.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _gippy.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _gippy.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _gippy.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gippy.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _gippy.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _gippy.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gippy.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gippy.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gippy.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _gippy.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _gippy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectors(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectors self) -> SwigPyIterator"""
        return _gippy.vectors_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectors self) -> bool"""
        return _gippy.vectors___nonzero__(self)

    def __bool__(self):
        """__bool__(vectors self) -> bool"""
        return _gippy.vectors___bool__(self)

    def __len__(self):
        """__len__(vectors self) -> std::vector< std::string >::size_type"""
        return _gippy.vectors___len__(self)

    def pop(self):
        """pop(vectors self) -> std::vector< std::string >::value_type"""
        return _gippy.vectors_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vectors"""
        return _gippy.vectors___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, 
            vectors v=std::vector< std::string,std::allocator< std::string > >())
        __setslice__(vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        """
        return _gippy.vectors___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _gippy.vectors___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectors self, std::vector< std::string >::difference_type i)
        __delitem__(vectors self, PySliceObject * slice)
        """
        return _gippy.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectors self, PySliceObject * slice) -> vectors
        __getitem__(vectors self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _gippy.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectors self, PySliceObject * slice, vectors v)
        __setitem__(vectors self, PySliceObject * slice)
        __setitem__(vectors self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _gippy.vectors___setitem__(self, *args)

    def append(self, *args):
        """append(vectors self, std::vector< std::string >::value_type const & x)"""
        return _gippy.vectors_append(self, *args)

    def empty(self):
        """empty(vectors self) -> bool"""
        return _gippy.vectors_empty(self)

    def size(self):
        """size(vectors self) -> std::vector< std::string >::size_type"""
        return _gippy.vectors_size(self)

    def clear(self):
        """clear(vectors self)"""
        return _gippy.vectors_clear(self)

    def swap(self, *args):
        """swap(vectors self, vectors v)"""
        return _gippy.vectors_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectors self) -> std::vector< std::string >::allocator_type"""
        return _gippy.vectors_get_allocator(self)

    def begin(self):
        """begin(vectors self) -> std::vector< std::string >::iterator"""
        return _gippy.vectors_begin(self)

    def end(self):
        """end(vectors self) -> std::vector< std::string >::iterator"""
        return _gippy.vectors_end(self)

    def rbegin(self):
        """rbegin(vectors self) -> std::vector< std::string >::reverse_iterator"""
        return _gippy.vectors_rbegin(self)

    def rend(self):
        """rend(vectors self) -> std::vector< std::string >::reverse_iterator"""
        return _gippy.vectors_rend(self)

    def pop_back(self):
        """pop_back(vectors self)"""
        return _gippy.vectors_pop_back(self)

    def erase(self, *args):
        """
        erase(vectors self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vectors self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _gippy.vectors_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::string)> self) -> vectors
        __init__(std::vector<(std::string)> self, vectors arg2) -> vectors
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> vectors
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vectors
        """
        this = _gippy.new_vectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectors self, std::vector< std::string >::value_type const & x)"""
        return _gippy.vectors_push_back(self, *args)

    def front(self):
        """front(vectors self) -> std::vector< std::string >::value_type const &"""
        return _gippy.vectors_front(self)

    def back(self):
        """back(vectors self) -> std::vector< std::string >::value_type const &"""
        return _gippy.vectors_back(self)

    def assign(self, *args):
        """assign(vectors self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _gippy.vectors_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectors self, std::vector< std::string >::size_type new_size)
        resize(vectors self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _gippy.vectors_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectors self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vectors self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, 
            std::vector< std::string >::value_type const & x)
        """
        return _gippy.vectors_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectors self, std::vector< std::string >::size_type n)"""
        return _gippy.vectors_reserve(self, *args)

    def capacity(self):
        """capacity(vectors self) -> std::vector< std::string >::size_type"""
        return _gippy.vectors_capacity(self)

    __swig_destroy__ = _gippy.delete_vectors
    __del__ = lambda self : None;
vectors_swigregister = _gippy.vectors_swigregister
vectors_swigregister(vectors)

class vectori(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectori self) -> SwigPyIterator"""
        return _gippy.vectori_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectori self) -> bool"""
        return _gippy.vectori___nonzero__(self)

    def __bool__(self):
        """__bool__(vectori self) -> bool"""
        return _gippy.vectori___bool__(self)

    def __len__(self):
        """__len__(vectori self) -> std::vector< int >::size_type"""
        return _gippy.vectori___len__(self)

    def pop(self):
        """pop(vectori self) -> std::vector< int >::value_type"""
        return _gippy.vectori_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vectori"""
        return _gippy.vectori___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vectori v=std::vector< int,std::allocator< int > >())
        __setslice__(vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _gippy.vectori___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectori self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _gippy.vectori___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectori self, std::vector< int >::difference_type i)
        __delitem__(vectori self, PySliceObject * slice)
        """
        return _gippy.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectori self, PySliceObject * slice) -> vectori
        __getitem__(vectori self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _gippy.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectori self, PySliceObject * slice, vectori v)
        __setitem__(vectori self, PySliceObject * slice)
        __setitem__(vectori self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _gippy.vectori___setitem__(self, *args)

    def append(self, *args):
        """append(vectori self, std::vector< int >::value_type const & x)"""
        return _gippy.vectori_append(self, *args)

    def empty(self):
        """empty(vectori self) -> bool"""
        return _gippy.vectori_empty(self)

    def size(self):
        """size(vectori self) -> std::vector< int >::size_type"""
        return _gippy.vectori_size(self)

    def clear(self):
        """clear(vectori self)"""
        return _gippy.vectori_clear(self)

    def swap(self, *args):
        """swap(vectori self, vectori v)"""
        return _gippy.vectori_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectori self) -> std::vector< int >::allocator_type"""
        return _gippy.vectori_get_allocator(self)

    def begin(self):
        """begin(vectori self) -> std::vector< int >::iterator"""
        return _gippy.vectori_begin(self)

    def end(self):
        """end(vectori self) -> std::vector< int >::iterator"""
        return _gippy.vectori_end(self)

    def rbegin(self):
        """rbegin(vectori self) -> std::vector< int >::reverse_iterator"""
        return _gippy.vectori_rbegin(self)

    def rend(self):
        """rend(vectori self) -> std::vector< int >::reverse_iterator"""
        return _gippy.vectori_rend(self)

    def pop_back(self):
        """pop_back(vectori self)"""
        return _gippy.vectori_pop_back(self)

    def erase(self, *args):
        """
        erase(vectori self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vectori self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _gippy.vectori_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int)> self) -> vectori
        __init__(std::vector<(int)> self, vectori arg2) -> vectori
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> vectori
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vectori
        """
        this = _gippy.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectori self, std::vector< int >::value_type const & x)"""
        return _gippy.vectori_push_back(self, *args)

    def front(self):
        """front(vectori self) -> std::vector< int >::value_type const &"""
        return _gippy.vectori_front(self)

    def back(self):
        """back(vectori self) -> std::vector< int >::value_type const &"""
        return _gippy.vectori_back(self)

    def assign(self, *args):
        """assign(vectori self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _gippy.vectori_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectori self, std::vector< int >::size_type new_size)
        resize(vectori self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _gippy.vectori_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectori self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vectori self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _gippy.vectori_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectori self, std::vector< int >::size_type n)"""
        return _gippy.vectori_reserve(self, *args)

    def capacity(self):
        """capacity(vectori self) -> std::vector< int >::size_type"""
        return _gippy.vectori_capacity(self)

    __swig_destroy__ = _gippy.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _gippy.vectori_swigregister
vectori_swigregister(vectori)

class mapss(_object):
    """Proxy of C++ std::map<(std::string,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapss, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapss, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mapss self) -> SwigPyIterator"""
        return _gippy.mapss_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mapss self) -> bool"""
        return _gippy.mapss___nonzero__(self)

    def __bool__(self):
        """__bool__(mapss self) -> bool"""
        return _gippy.mapss___bool__(self)

    def __len__(self):
        """__len__(mapss self) -> std::map< std::string,std::string >::size_type"""
        return _gippy.mapss___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(mapss self, std::map< std::string,std::string >::key_type const & key) -> std::map< std::string,std::string >::mapped_type const &"""
        return _gippy.mapss___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(mapss self, std::map< std::string,std::string >::key_type const & key)"""
        return _gippy.mapss___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(mapss self, std::map< std::string,std::string >::key_type const & key) -> bool"""
        return _gippy.mapss_has_key(self, *args)

    def keys(self):
        """keys(mapss self) -> PyObject *"""
        return _gippy.mapss_keys(self)

    def values(self):
        """values(mapss self) -> PyObject *"""
        return _gippy.mapss_values(self)

    def items(self):
        """items(mapss self) -> PyObject *"""
        return _gippy.mapss_items(self)

    def __contains__(self, *args):
        """__contains__(mapss self, std::map< std::string,std::string >::key_type const & key) -> bool"""
        return _gippy.mapss___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(mapss self) -> SwigPyIterator"""
        return _gippy.mapss_key_iterator(self)

    def value_iterator(self):
        """value_iterator(mapss self) -> SwigPyIterator"""
        return _gippy.mapss_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(mapss self, std::map< std::string,std::string >::key_type const & key)
        __setitem__(mapss self, std::map< std::string,std::string >::key_type const & key, std::map< std::string,std::string >::mapped_type const & x)
        """
        return _gippy.mapss___setitem__(self, *args)

    def asdict(self):
        """asdict(mapss self) -> PyObject *"""
        return _gippy.mapss_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,std::string)> self, std::less< std::string > const & arg2) -> mapss
        __init__(std::map<(std::string,std::string)> self) -> mapss
        __init__(std::map<(std::string,std::string)> self, mapss arg2) -> mapss
        """
        this = _gippy.new_mapss(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(mapss self) -> bool"""
        return _gippy.mapss_empty(self)

    def size(self):
        """size(mapss self) -> std::map< std::string,std::string >::size_type"""
        return _gippy.mapss_size(self)

    def clear(self):
        """clear(mapss self)"""
        return _gippy.mapss_clear(self)

    def swap(self, *args):
        """swap(mapss self, mapss v)"""
        return _gippy.mapss_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mapss self) -> std::map< std::string,std::string >::allocator_type"""
        return _gippy.mapss_get_allocator(self)

    def begin(self):
        """begin(mapss self) -> std::map< std::string,std::string >::iterator"""
        return _gippy.mapss_begin(self)

    def end(self):
        """end(mapss self) -> std::map< std::string,std::string >::iterator"""
        return _gippy.mapss_end(self)

    def rbegin(self):
        """rbegin(mapss self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _gippy.mapss_rbegin(self)

    def rend(self):
        """rend(mapss self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _gippy.mapss_rend(self)

    def count(self, *args):
        """count(mapss self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type"""
        return _gippy.mapss_count(self, *args)

    def erase(self, *args):
        """
        erase(mapss self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type
        erase(mapss self, std::map< std::string,std::string >::iterator position)
        erase(mapss self, std::map< std::string,std::string >::iterator first, std::map< std::string,std::string >::iterator last)
        """
        return _gippy.mapss_erase(self, *args)

    def find(self, *args):
        """find(mapss self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _gippy.mapss_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(mapss self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _gippy.mapss_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(mapss self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _gippy.mapss_upper_bound(self, *args)

    __swig_destroy__ = _gippy.delete_mapss
    __del__ = lambda self : None;
mapss_swigregister = _gippy.mapss_swigregister
mapss_swigregister(mapss)

class GeoData(_object):
    """Proxy of C++ gip::GeoData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(gip::GeoData self) -> GeoData
        __init__(gip::GeoData self, std::string arg2, bool arg3=False) -> GeoData
        __init__(gip::GeoData self, std::string arg2) -> GeoData
        __init__(gip::GeoData self, int arg2, int arg3, int arg4, GDALDataType arg5, std::string arg6, mapss arg7=gip::dictionary()) -> GeoData
        __init__(gip::GeoData self, int arg2, int arg3, int arg4, GDALDataType arg5, std::string arg6) -> GeoData
        __init__(gip::GeoData self, GeoData arg2) -> GeoData
        """
        this = _gippy.new_GeoData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gippy.delete_GeoData
    __del__ = lambda self : None;
    def Path(self):
        """Path(GeoData self) -> boost::filesystem::path"""
        return _gippy.GeoData_Path(self)

    def Filename(self):
        """Filename(GeoData self) -> std::string"""
        return _gippy.GeoData_Filename(self)

    def Basename(self):
        """Basename(GeoData self) -> std::string"""
        return _gippy.GeoData_Basename(self)

    def Format(self):
        """Format(GeoData self) -> std::string"""
        return _gippy.GeoData_Format(self)

    def DataType(self):
        """DataType(GeoData self) -> GDALDataType"""
        return _gippy.GeoData_DataType(self)

    def GetGDALDataset(self):
        """GetGDALDataset(GeoData self) -> GDALDataset *"""
        return _gippy.GeoData_GetGDALDataset(self)

    def XSize(self):
        """XSize(GeoData self) -> unsigned int"""
        return _gippy.GeoData_XSize(self)

    def YSize(self):
        """YSize(GeoData self) -> unsigned int"""
        return _gippy.GeoData_YSize(self)

    def Size(self):
        """Size(GeoData self) -> unsigned long"""
        return _gippy.GeoData_Size(self)

    def GeoLoc(self, *args):
        """GeoLoc(GeoData self, float xloc, float yloc) -> gip::Point< double >"""
        return _gippy.GeoData_GeoLoc(self, *args)

    def TopLeft(self):
        """TopLeft(GeoData self) -> gip::Point< double >"""
        return _gippy.GeoData_TopLeft(self)

    def LowerLeft(self):
        """LowerLeft(GeoData self) -> gip::Point< double >"""
        return _gippy.GeoData_LowerLeft(self)

    def TopRight(self):
        """TopRight(GeoData self) -> gip::Point< double >"""
        return _gippy.GeoData_TopRight(self)

    def LowerRight(self):
        """LowerRight(GeoData self) -> gip::Point< double >"""
        return _gippy.GeoData_LowerRight(self)

    def MinXY(self):
        """MinXY(GeoData self) -> gip::Point< double >"""
        return _gippy.GeoData_MinXY(self)

    def MaxXY(self):
        """MaxXY(GeoData self) -> gip::Point< double >"""
        return _gippy.GeoData_MaxXY(self)

    def Projection(self):
        """Projection(GeoData self) -> std::string"""
        return _gippy.GeoData_Projection(self)

    def SRS(self):
        """SRS(GeoData self) -> OGRSpatialReference"""
        return _gippy.GeoData_SRS(self)

    def GetMeta(self, *args):
        """GetMeta(GeoData self, std::string key) -> std::string"""
        return _gippy.GeoData_GetMeta(self, *args)

    def GetMetaGroup(self, *args):
        """
        GetMetaGroup(GeoData self, std::string group, std::string filter="") -> vectors
        GetMetaGroup(GeoData self, std::string group) -> vectors
        """
        return _gippy.GeoData_GetMetaGroup(self, *args)

    def SetMeta(self, *args):
        """
        SetMeta(GeoData self, std::string key, std::string item) -> GeoData
        SetMeta(GeoData self, mapss items) -> GeoData
        """
        return _gippy.GeoData_SetMeta(self, *args)

    def CopyMeta(self, *args):
        """CopyMeta(GeoData self, GeoData img) -> GeoData"""
        return _gippy.GeoData_CopyMeta(self, *args)

    def CopyCoordinateSystem(self, *args):
        """CopyCoordinateSystem(GeoData self, GeoData arg2) -> GeoData"""
        return _gippy.GeoData_CopyCoordinateSystem(self, *args)

    def Chunk(self, arg2=0):
        """
        Chunk(GeoData self, unsigned int arg2=0) -> vectorRecti
        Chunk(GeoData self) -> vectorRecti
        """
        return _gippy.GeoData_Chunk(self, arg2)

    def NumChunks(self):
        """NumChunks(GeoData self) -> unsigned int"""
        return _gippy.GeoData_NumChunks(self)

    def Chunks(self):
        """Chunks(GeoData self) -> vectorRecti"""
        return _gippy.GeoData_Chunks(self)

    def PaddedChunks(self):
        """PaddedChunks(GeoData self) -> vectorRecti"""
        return _gippy.GeoData_PaddedChunks(self)

    def ChunkPadding(self):
        """ChunkPadding(GeoData self) -> unsigned int"""
        return _gippy.GeoData_ChunkPadding(self)

    def SetChunkPadding(self, pad=0):
        """
        SetChunkPadding(GeoData self, unsigned int pad=0)
        SetChunkPadding(GeoData self)
        """
        return _gippy.GeoData_SetChunkPadding(self, pad)

GeoData_swigregister = _gippy.GeoData_swigregister
GeoData_swigregister(GeoData)

class GeoRaster(GeoData):
    """Proxy of C++ gip::GeoRaster class"""
    __swig_setmethods__ = {}
    for _s in [GeoData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoRaster, name, value)
    __swig_getmethods__ = {}
    for _s in [GeoData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeoRaster, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(gip::GeoRaster self, GeoData geodata, int bandnum=1) -> GeoRaster
        __init__(gip::GeoRaster self, GeoData geodata) -> GeoRaster
        __init__(gip::GeoRaster self, GeoRaster image) -> GeoRaster
        __init__(gip::GeoRaster self, GeoRaster image, gip::GeoRaster::func f) -> GeoRaster
        """
        this = _gippy.new_GeoRaster(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gippy.delete_GeoRaster
    __del__ = lambda self : None;
    def Basename(self):
        """Basename(GeoRaster self) -> std::string"""
        return _gippy.GeoRaster_Basename(self)

    def XSize(self):
        """XSize(GeoRaster self) -> unsigned int"""
        return _gippy.GeoRaster_XSize(self)

    def YSize(self):
        """YSize(GeoRaster self) -> unsigned int"""
        return _gippy.GeoRaster_YSize(self)

    def DataType(self):
        """DataType(GeoRaster self) -> GDALDataType"""
        return _gippy.GeoRaster_DataType(self)

    def Info(self, showstats=False):
        """
        Info(GeoRaster self, bool showstats=False) -> std::string
        Info(GeoRaster self) -> std::string
        """
        return _gippy.GeoRaster_Info(self, showstats)

    def GetGDALRasterBand(self):
        """GetGDALRasterBand(GeoRaster self) -> GDALRasterBand *"""
        return _gippy.GeoRaster_GetGDALRasterBand(self)

    def Description(self):
        """Description(GeoRaster self) -> std::string"""
        return _gippy.GeoRaster_Description(self)

    def SetDescription(self, *args):
        """SetDescription(GeoRaster self, std::string desc)"""
        return _gippy.GeoRaster_SetDescription(self, *args)

    def SetColor(self, *args):
        """SetColor(GeoRaster self, std::string col)"""
        return _gippy.GeoRaster_SetColor(self, *args)

    def CopyCategoryNames(self, *args):
        """CopyCategoryNames(GeoRaster self, GeoRaster raster)"""
        return _gippy.GeoRaster_CopyCategoryNames(self, *args)

    def Units(self):
        """Units(GeoRaster self) -> std::string"""
        return _gippy.GeoRaster_Units(self)

    def Gain(self):
        """Gain(GeoRaster self) -> float"""
        return _gippy.GeoRaster_Gain(self)

    def Offset(self):
        """Offset(GeoRaster self) -> float"""
        return _gippy.GeoRaster_Offset(self)

    def SetUnits(self, *args):
        """SetUnits(GeoRaster self, std::string units) -> GeoRaster"""
        return _gippy.GeoRaster_SetUnits(self, *args)

    def SetGain(self, *args):
        """SetGain(GeoRaster self, float gain) -> GeoRaster"""
        return _gippy.GeoRaster_SetGain(self, *args)

    def SetOffset(self, *args):
        """SetOffset(GeoRaster self, float offset) -> GeoRaster"""
        return _gippy.GeoRaster_SetOffset(self, *args)

    def NoData(self):
        """NoData(GeoRaster self) -> bool"""
        return _gippy.GeoRaster_NoData(self)

    def NoDataValue(self):
        """NoDataValue(GeoRaster self) -> double"""
        return _gippy.GeoRaster_NoDataValue(self)

    def SetNoData(self, *args):
        """SetNoData(GeoRaster self, double val) -> GeoRaster"""
        return _gippy.GeoRaster_SetNoData(self, *args)

    def ClearNoData(self):
        """ClearNoData(GeoRaster self)"""
        return _gippy.GeoRaster_ClearNoData(self)

    def MaxValue(self):
        """MaxValue(GeoRaster self) -> double"""
        return _gippy.GeoRaster_MaxValue(self)

    def MinValue(self):
        """MinValue(GeoRaster self) -> double"""
        return _gippy.GeoRaster_MinValue(self)

    def CopyMeta(self, *args):
        """CopyMeta(GeoRaster self, GeoRaster img) -> GeoRaster"""
        return _gippy.GeoRaster_CopyMeta(self, *args)

    def SetDynamicRange(self, *args):
        """SetDynamicRange(GeoRaster self, int min, int max)"""
        return _gippy.GeoRaster_SetDynamicRange(self, *args)

    def AddMask(self, *args):
        """AddMask(GeoRaster self, GeoRaster band) -> GeoRaster"""
        return _gippy.GeoRaster_AddMask(self, *args)

    def ClearMasks(self):
        """ClearMasks(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_ClearMasks(self)

    def ApplyMask(self, *args):
        """
        ApplyMask(GeoRaster self, CImg< uint8_t > mask, int chunk=0) -> GeoRaster
        ApplyMask(GeoRaster self, CImg< uint8_t > mask) -> GeoRaster
        """
        return _gippy.GeoRaster_ApplyMask(self, *args)

    def AddFunction(self, *args):
        """AddFunction(GeoRaster self, gip::GeoRaster::func f) -> GeoRaster"""
        return _gippy.GeoRaster_AddFunction(self, *args)

    def ClearFunctions(self):
        """ClearFunctions(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_ClearFunctions(self)

    def __gt__(self, *args):
        """__gt__(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster___gt__(self, *args)

    def __ge__(self, *args):
        """__ge__(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster___ge__(self, *args)

    def __lt__(self, *args):
        """__lt__(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster___lt__(self, *args)

    def __le__(self, *args):
        """__le__(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster___le__(self, *args)

    def __eq__(self, *args):
        """__eq__(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster___eq__(self, *args)

    def BXOR(self, *args):
        """BXOR(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster_BXOR(self, *args)

    def __add__(self, *args):
        """__add__(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster___sub__(self, *args)

    def __mul__(self, *args):
        """__mul__(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster___mul__(self, *args)

    def __div__(self, *args):
        """__div__(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster___div__(self, *args)

    def max(self, *args):
        """max(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster_max(self, *args)

    def min(self, *args):
        """min(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster_min(self, *args)

    def pow(self, *args):
        """pow(GeoRaster self, double const & val) -> GeoRaster"""
        return _gippy.GeoRaster_pow(self, *args)

    def sqrt(self):
        """sqrt(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_sqrt(self)

    def log(self):
        """log(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_log(self)

    def log10(self):
        """log10(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_log10(self)

    def exp(self):
        """exp(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_exp(self)

    def abs(self):
        """abs(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_abs(self)

    def sign(self):
        """sign(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_sign(self)

    def cos(self):
        """cos(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_cos(self)

    def sin(self):
        """sin(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_sin(self)

    def tan(self):
        """tan(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_tan(self)

    def acos(self):
        """acos(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_acos(self)

    def asin(self):
        """asin(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_asin(self)

    def atan(self):
        """atan(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_atan(self)

    def cosh(self):
        """cosh(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_cosh(self)

    def sinh(self):
        """sinh(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_sinh(self)

    def tanh(self):
        """tanh(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_tanh(self)

    def sinc(self):
        """sinc(GeoRaster self) -> GeoRaster"""
        return _gippy.GeoRaster_sinc(self)

    def Stats(self):
        """Stats(GeoRaster self) -> CImg< float >"""
        return _gippy.GeoRaster_Stats(self)

    def Histogram(self, bins=100, cumulative=False):
        """
        Histogram(GeoRaster self, int bins=100, bool cumulative=False) -> CImg< float >
        Histogram(GeoRaster self, int bins=100) -> CImg< float >
        Histogram(GeoRaster self) -> CImg< float >
        """
        return _gippy.GeoRaster_Histogram(self, bins, cumulative)

    def Percentile(self, *args):
        """Percentile(GeoRaster self, float p) -> float"""
        return _gippy.GeoRaster_Percentile(self, *args)

    def SaturationMask(self, chunk=0):
        """
        SaturationMask(GeoRaster self, int chunk=0) -> CImg< unsigned char >
        SaturationMask(GeoRaster self) -> CImg< unsigned char >
        """
        return _gippy.GeoRaster_SaturationMask(self, chunk)

    def NoDataMask(self, chunk=0):
        """
        NoDataMask(GeoRaster self, int chunk=0) -> CImg< unsigned char >
        NoDataMask(GeoRaster self) -> CImg< unsigned char >
        """
        return _gippy.GeoRaster_NoDataMask(self, chunk)

    def DataMask(self, chunk=0):
        """
        DataMask(GeoRaster self, int chunk=0) -> CImg< unsigned char >
        DataMask(GeoRaster self) -> CImg< unsigned char >
        """
        return _gippy.GeoRaster_DataMask(self, chunk)

    def Smooth(self, *args):
        """Smooth(GeoRaster self, GeoRaster raster) -> GeoRaster"""
        return _gippy.GeoRaster_Smooth(self, *args)

    def Read(self, *args):
        """
        Read(GeoRaster self, int chunk=0) -> PyObject
        Read(GeoRaster self) -> PyObject
        Read(GeoRaster self, Recti chunk) -> PyObject *

        PyObject returned is a numpy.array.
        Enjoy!
         
        """
        return _gippy.GeoRaster_Read(self, *args)

    def Write(self, *args):
        """
        Write(GeoRaster self, PyObject * obj, int chunk=0) -> GeoRaster
        Write(GeoRaster self, PyObject * obj) -> GeoRaster

        PyObject passed in is a numpy.array.
        Comply!
         
        """
        return _gippy.GeoRaster_Write(self, *args)

    def Process(self, *args):
        """
        Process(GeoRaster self, GeoRaster raster) -> GeoRaster

        PyObject passed in is a numpy.array.
        Comply!
         
        """
        return _gippy.GeoRaster_Process(self, *args)

GeoRaster_swigregister = _gippy.GeoRaster_swigregister
GeoRaster_swigregister(GeoRaster)

class GeoImage(GeoData):
    """Proxy of C++ gip::GeoImage class"""
    __swig_setmethods__ = {}
    for _s in [GeoData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoImage, name, value)
    __swig_getmethods__ = {}
    for _s in [GeoData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeoImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(gip::GeoImage self) -> GeoImage
        __init__(gip::GeoImage self, std::string filename, bool update=False) -> GeoImage
        __init__(gip::GeoImage self, std::string filename) -> GeoImage
        __init__(gip::GeoImage self, vectors filenames) -> GeoImage
        __init__(gip::GeoImage self, std::string filename, int xsz, int ysz, int bsz, GDALDataType datatype=GDT_Byte) -> GeoImage
        __init__(gip::GeoImage self, std::string filename, int xsz, int ysz, int bsz) -> GeoImage
        __init__(gip::GeoImage self, std::string filename, GeoImage image, GDALDataType datatype, int bsz) -> GeoImage
        __init__(gip::GeoImage self, std::string filename, GeoImage image, GDALDataType datatype) -> GeoImage
        __init__(gip::GeoImage self, std::string filename, GeoImage image) -> GeoImage
        __init__(gip::GeoImage self, GeoImage image) -> GeoImage
        """
        this = _gippy.new_GeoImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gippy.delete_GeoImage
    __del__ = lambda self : None;
    def NumBands(self):
        """NumBands(GeoImage self) -> unsigned int"""
        return _gippy.GeoImage_NumBands(self)

    def DataType(self):
        """DataType(GeoImage self) -> GDALDataType"""
        return _gippy.GeoImage_DataType(self)

    def Info(self, arg2=True, arg3=False):
        """
        Info(GeoImage self, bool arg2=True, bool arg3=False) -> std::string
        Info(GeoImage self, bool arg2=True) -> std::string
        Info(GeoImage self) -> std::string
        """
        return _gippy.GeoImage_Info(self, arg2, arg3)

    def BandNames(self):
        """BandNames(GeoImage self) -> vectors"""
        return _gippy.GeoImage_BandNames(self)

    def SetBandName(self, *args):
        """SetBandName(GeoImage self, std::string desc, int bandnum)"""
        return _gippy.GeoImage_SetBandName(self, *args)

    def BandIndex(self, *args):
        """BandIndex(GeoImage self, std::string name) -> int"""
        return _gippy.GeoImage_BandIndex(self, *args)

    def BandExists(self, *args):
        """BandExists(GeoImage self, std::string desc) -> bool"""
        return _gippy.GeoImage_BandExists(self, *args)

    def BandsExist(self, *args):
        """BandsExist(GeoImage self, vectors desc) -> bool"""
        return _gippy.GeoImage_BandsExist(self, *args)

    def AddBand(self, *args):
        """AddBand(GeoImage self, GeoRaster band) -> GeoImage"""
        return _gippy.GeoImage_AddBand(self, *args)

    def RemoveBand(self, *args):
        """RemoveBand(GeoImage self, unsigned int bandnum) -> GeoImage"""
        return _gippy.GeoImage_RemoveBand(self, *args)

    def PruneBands(self, *args):
        """PruneBands(GeoImage self, vectors arg2) -> GeoImage"""
        return _gippy.GeoImage_PruneBands(self, *args)

    def PruneToRGB(self):
        """PruneToRGB(GeoImage self) -> GeoImage"""
        return _gippy.GeoImage_PruneToRGB(self)

    def CopyColorTable(self, *args):
        """CopyColorTable(GeoImage self, GeoImage raster)"""
        return _gippy.GeoImage_CopyColorTable(self, *args)

    def SetGain(self, *args):
        """SetGain(GeoImage self, float gain)"""
        return _gippy.GeoImage_SetGain(self, *args)

    def SetOffset(self, *args):
        """SetOffset(GeoImage self, float offset)"""
        return _gippy.GeoImage_SetOffset(self, *args)

    def SetUnits(self, *args):
        """SetUnits(GeoImage self, std::string units)"""
        return _gippy.GeoImage_SetUnits(self, *args)

    def SetNoData(self, *args):
        """SetNoData(GeoImage self, double val)"""
        return _gippy.GeoImage_SetNoData(self, *args)

    def ClearNoData(self):
        """ClearNoData(GeoImage self)"""
        return _gippy.GeoImage_ClearNoData(self)

    def AddMask(self, *args):
        """AddMask(GeoImage self, GeoRaster band) -> GeoImage"""
        return _gippy.GeoImage_AddMask(self, *args)

    def ClearMasks(self):
        """ClearMasks(GeoImage self)"""
        return _gippy.GeoImage_ClearMasks(self)

    def ApplyMask(self, *args):
        """
        ApplyMask(GeoImage self, CImg< uint8_t > mask, int chunk=0) -> GeoImage
        ApplyMask(GeoImage self, CImg< uint8_t > mask) -> GeoImage
        """
        return _gippy.GeoImage_ApplyMask(self, *args)

    def FixBadPixels(self):
        """FixBadPixels(GeoImage self) -> GeoImage"""
        return _gippy.GeoImage_FixBadPixels(self)

    def AddOverviews(self):
        """AddOverviews(GeoImage self) -> GeoData"""
        return _gippy.GeoImage_AddOverviews(self)

    def Chunk(self, numchunks=0):
        """
        Chunk(GeoImage self, unsigned int numchunks=0) -> vectorRecti
        Chunk(GeoImage self) -> vectorRecti
        """
        return _gippy.GeoImage_Chunk(self, numchunks)

    def SpectralStatistics(self, iChunk=0):
        """
        SpectralStatistics(GeoImage self, int iChunk=0) -> CImgList< double >
        SpectralStatistics(GeoImage self) -> CImgList< double >
        """
        return _gippy.GeoImage_SpectralStatistics(self, iChunk)

    def Mean(self, *args):
        """Mean(GeoImage self, GeoRaster raster) -> GeoRaster"""
        return _gippy.GeoImage_Mean(self, *args)

    def NoDataMask(self, *args):
        """
        NoDataMask(GeoImage self, int chunk=0, vectors bands=std::vector< std::string >()) -> CImg< uint8_t >
        NoDataMask(GeoImage self, int chunk=0) -> CImg< uint8_t >
        NoDataMask(GeoImage self) -> CImg< uint8_t >
        """
        return _gippy.GeoImage_NoDataMask(self, *args)

    def DataMask(self, *args):
        """
        DataMask(GeoImage self, int chunk=0, vectors bands=std::vector< std::string >()) -> CImg< unsigned char >
        DataMask(GeoImage self, int chunk=0) -> CImg< unsigned char >
        DataMask(GeoImage self) -> CImg< unsigned char >
        """
        return _gippy.GeoImage_DataMask(self, *args)

    def SaturationMask(self, *args):
        """
        SaturationMask(GeoImage self, int chunk=0, vectors bands=std::vector< std::string >()) -> CImg< unsigned char >
        SaturationMask(GeoImage self, int chunk=0) -> CImg< unsigned char >
        SaturationMask(GeoImage self) -> CImg< unsigned char >
        """
        return _gippy.GeoImage_SaturationMask(self, *args)

    def Whiteness(self, chunk=0):
        """
        Whiteness(GeoImage self, int chunk=0) -> CImg< float >
        Whiteness(GeoImage self) -> CImg< float >
        """
        return _gippy.GeoImage_Whiteness(self, chunk)

    def __getitem__(self, *args):
        """
        __getitem__(GeoImage self, std::string col) -> GeoRaster
        __getitem__(GeoImage self, int band) -> GeoRaster
        """
        return _gippy.GeoImage___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(GeoImage self, int band, GeoRaster raster) -> GeoRaster
        __setitem__(GeoImage self, std::string col, GeoRaster raster) -> GeoRaster
        """
        return _gippy.GeoImage___setitem__(self, *args)

    def Process(self, *args):
        """
        Process(GeoImage self, std::string filename, GDALDataType dtype=GDT_Unknown) -> GeoImage
        Process(GeoImage self, std::string filename) -> GeoImage
        Process(GeoImage self) -> GeoImage
        """
        return _gippy.GeoImage_Process(self, *args)

    def TimeSeries(self, *args):
        """
        TimeSeries(GeoImage self, CImg< double > C, Recti chunk) -> PyObject
        TimeSeries(GeoImage self, CImg< double > C, int chunknum=0) -> PyObject
        TimeSeries(GeoImage self, CImg< double > C) -> PyObject *
        """
        return _gippy.GeoImage_TimeSeries(self, *args)

    def Extract(self, *args):
        """Extract(GeoImage self, GeoRaster mask) -> PyObject *"""
        return _gippy.GeoImage_Extract(self, *args)

    def GetRandomPixels(self, *args):
        """GetRandomPixels(GeoImage self, int NumPixels) -> PyObject *"""
        return _gippy.GeoImage_GetRandomPixels(self, *args)

    def GetPixelClasses(self, *args):
        """GetPixelClasses(GeoImage self, int NumClasses) -> PyObject *"""
        return _gippy.GeoImage_GetPixelClasses(self, *args)

    def __deepcopy__(self, *args):
        """__deepcopy__(GeoImage self, GeoImage image) -> GeoImage"""
        return _gippy.GeoImage___deepcopy__(self, *args)

    def Read(self, chunk=0):
        """
        Read(GeoImage self, int chunk=0) -> PyObject
        Read(GeoImage self) -> PyObject *

        PyObject returned is a numpy.array.
        Enjoy!
         
        """
        return _gippy.GeoImage_Read(self, chunk)

GeoImage_swigregister = _gippy.GeoImage_swigregister
GeoImage_swigregister(GeoImage)


def ACCA(*args):
  """
    ACCA(GeoImage arg1, std::string arg2, float arg3, float arg4, int arg5=5, int arg6=10, 
        int arg7=4000, mapss arg8=gip::dictionary()) -> GeoImage
    ACCA(GeoImage arg1, std::string arg2, float arg3, float arg4, int arg5=5, int arg6=10, 
        int arg7=4000) -> GeoImage
    ACCA(GeoImage arg1, std::string arg2, float arg3, float arg4, int arg5=5, int arg6=10) -> GeoImage
    ACCA(GeoImage arg1, std::string arg2, float arg3, float arg4, int arg5=5) -> GeoImage
    ACCA(GeoImage arg1, std::string arg2, float arg3, float arg4) -> GeoImage
    """
  return _gippy.ACCA(*args)

def BrowseImage(*args):
  """
    BrowseImage(GeoImage arg1, int quality=75) -> std::string
    BrowseImage(GeoImage arg1) -> std::string
    """
  return _gippy.BrowseImage(*args)

def CookieCutter(*args):
  """
    CookieCutter(vectors arg1, std::string arg2, std::string arg3, float arg4=1.0, float arg5=1.0, 
        bool crop=False, mapss arg7=gip::dictionary()) -> GeoImage
    CookieCutter(vectors arg1, std::string arg2, std::string arg3, float arg4=1.0, float arg5=1.0, 
        bool crop=False) -> GeoImage
    CookieCutter(vectors arg1, std::string arg2, std::string arg3, float arg4=1.0, float arg5=1.0) -> GeoImage
    CookieCutter(vectors arg1, std::string arg2, std::string arg3, float arg4=1.0) -> GeoImage
    CookieCutter(vectors arg1, std::string arg2, std::string arg3) -> GeoImage
    """
  return _gippy.CookieCutter(*args)

def Fmask(*args):
  """
    Fmask(GeoImage arg1, std::string arg2, int arg3=3, int arg4=5, mapss arg5=gip::dictionary()) -> GeoImage
    Fmask(GeoImage arg1, std::string arg2, int arg3=3, int arg4=5) -> GeoImage
    Fmask(GeoImage arg1, std::string arg2, int arg3=3) -> GeoImage
    Fmask(GeoImage arg1, std::string arg2) -> GeoImage
    """
  return _gippy.Fmask(*args)

def Indices(*args):
  """
    Indices(GeoImage arg1, mapss arg2, mapss arg3=gip::dictionary()) -> mapss
    Indices(GeoImage arg1, mapss arg2) -> mapss
    """
  return _gippy.Indices(*args)

def LinearTransform(*args):
  """LinearTransform(GeoImage arg1, std::string filename, CImg< float > coef) -> GeoImage"""
  return _gippy.LinearTransform(*args)

def SpectralStatistics(*args):
  """SpectralStatistics(GeoImage arg1, std::string filename) -> GeoImage"""
  return _gippy.SpectralStatistics(*args)
GDT_Unknown = _gippy.GDT_Unknown
GDT_Byte = _gippy.GDT_Byte
GDT_UInt16 = _gippy.GDT_UInt16
GDT_Int16 = _gippy.GDT_Int16
GDT_UInt32 = _gippy.GDT_UInt32
GDT_Int32 = _gippy.GDT_Int32
GDT_Float32 = _gippy.GDT_Float32
GDT_Float64 = _gippy.GDT_Float64
class Recti(_object):
    """Proxy of C++ gip::Rect<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Recti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Recti, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(gip::Rect<(int)> self) -> Recti
        __init__(gip::Rect<(int)> self, int x, int y, int width, int height) -> Recti
        __init__(gip::Rect<(int)> self, gip::Point< int > p0, gip::Point< int > p1) -> Recti
        """
        this = _gippy.new_Recti(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gippy.delete_Recti
    __del__ = lambda self : None;
    def p0(self):
        """p0(Recti self) -> gip::Point< int >"""
        return _gippy.Recti_p0(self)

    def p1(self):
        """p1(Recti self) -> gip::Point< int >"""
        return _gippy.Recti_p1(self)

    def area(self):
        """area(Recti self) -> int"""
        return _gippy.Recti_area(self)

    def width(self):
        """width(Recti self) -> int"""
        return _gippy.Recti_width(self)

    def height(self):
        """height(Recti self) -> int"""
        return _gippy.Recti_height(self)

    def x0(self):
        """x0(Recti self) -> int"""
        return _gippy.Recti_x0(self)

    def y0(self):
        """y0(Recti self) -> int"""
        return _gippy.Recti_y0(self)

    def x1(self):
        """x1(Recti self) -> int"""
        return _gippy.Recti_x1(self)

    def y1(self):
        """y1(Recti self) -> int"""
        return _gippy.Recti_y1(self)

    def __eq__(self, *args):
        """__eq__(Recti self, Recti rect) -> bool"""
        return _gippy.Recti___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Recti self, Recti rect) -> bool"""
        return _gippy.Recti___ne__(self, *args)

    def Transform(self, *args):
        """Transform(Recti self, OGRSpatialReference src, OGRSpatialReference dst) -> Recti"""
        return _gippy.Recti_Transform(self, *args)

    def Pad(self, *args):
        """Pad(Recti self, int pad) -> Recti"""
        return _gippy.Recti_Pad(self, *args)

    def get_Pad(self, *args):
        """get_Pad(Recti self, int pad) -> Recti"""
        return _gippy.Recti_get_Pad(self, *args)

    def Intersect(self, *args):
        """Intersect(Recti self, Recti rect) -> Recti"""
        return _gippy.Recti_Intersect(self, *args)

    def get_Intersect(self, *args):
        """get_Intersect(Recti self, Recti rect) -> Recti"""
        return _gippy.Recti_get_Intersect(self, *args)

    def Union(self, *args):
        """Union(Recti self, Recti rect) -> Recti"""
        return _gippy.Recti_Union(self, *args)

    def get_Union(self, *args):
        """get_Union(Recti self, Recti rect) -> Recti"""
        return _gippy.Recti_get_Union(self, *args)

Recti_swigregister = _gippy.Recti_swigregister
Recti_swigregister(Recti)

class vectorRecti(_object):
    """Proxy of C++ std::vector<(gip::Rect<(int)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorRecti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorRecti, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorRecti self) -> SwigPyIterator"""
        return _gippy.vectorRecti_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectorRecti self) -> bool"""
        return _gippy.vectorRecti___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorRecti self) -> bool"""
        return _gippy.vectorRecti___bool__(self)

    def __len__(self):
        """__len__(vectorRecti self) -> std::vector< gip::Rect< int > >::size_type"""
        return _gippy.vectorRecti___len__(self)

    def pop(self):
        """pop(vectorRecti self) -> Recti"""
        return _gippy.vectorRecti_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorRecti self, std::vector< gip::Rect< int > >::difference_type i, std::vector< gip::Rect< int > >::difference_type j) -> vectorRecti"""
        return _gippy.vectorRecti___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorRecti self, std::vector< gip::Rect< int > >::difference_type i, std::vector< gip::Rect< int > >::difference_type j, 
            vectorRecti v=std::vector< gip::Rect< int >,std::allocator< gip::Rect< int > > >())
        __setslice__(vectorRecti self, std::vector< gip::Rect< int > >::difference_type i, std::vector< gip::Rect< int > >::difference_type j)
        """
        return _gippy.vectorRecti___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorRecti self, std::vector< gip::Rect< int > >::difference_type i, std::vector< gip::Rect< int > >::difference_type j)"""
        return _gippy.vectorRecti___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorRecti self, std::vector< gip::Rect< int > >::difference_type i)
        __delitem__(vectorRecti self, PySliceObject * slice)
        """
        return _gippy.vectorRecti___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorRecti self, PySliceObject * slice) -> vectorRecti
        __getitem__(vectorRecti self, std::vector< gip::Rect< int > >::difference_type i) -> Recti
        """
        return _gippy.vectorRecti___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorRecti self, PySliceObject * slice, vectorRecti v)
        __setitem__(vectorRecti self, PySliceObject * slice)
        __setitem__(vectorRecti self, std::vector< gip::Rect< int > >::difference_type i, Recti x)
        """
        return _gippy.vectorRecti___setitem__(self, *args)

    def append(self, *args):
        """append(vectorRecti self, Recti x)"""
        return _gippy.vectorRecti_append(self, *args)

    def empty(self):
        """empty(vectorRecti self) -> bool"""
        return _gippy.vectorRecti_empty(self)

    def size(self):
        """size(vectorRecti self) -> std::vector< gip::Rect< int > >::size_type"""
        return _gippy.vectorRecti_size(self)

    def clear(self):
        """clear(vectorRecti self)"""
        return _gippy.vectorRecti_clear(self)

    def swap(self, *args):
        """swap(vectorRecti self, vectorRecti v)"""
        return _gippy.vectorRecti_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorRecti self) -> std::vector< gip::Rect< int > >::allocator_type"""
        return _gippy.vectorRecti_get_allocator(self)

    def begin(self):
        """begin(vectorRecti self) -> std::vector< gip::Rect< int > >::iterator"""
        return _gippy.vectorRecti_begin(self)

    def end(self):
        """end(vectorRecti self) -> std::vector< gip::Rect< int > >::iterator"""
        return _gippy.vectorRecti_end(self)

    def rbegin(self):
        """rbegin(vectorRecti self) -> std::vector< gip::Rect< int > >::reverse_iterator"""
        return _gippy.vectorRecti_rbegin(self)

    def rend(self):
        """rend(vectorRecti self) -> std::vector< gip::Rect< int > >::reverse_iterator"""
        return _gippy.vectorRecti_rend(self)

    def pop_back(self):
        """pop_back(vectorRecti self)"""
        return _gippy.vectorRecti_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorRecti self, std::vector< gip::Rect< int > >::iterator pos) -> std::vector< gip::Rect< int > >::iterator
        erase(vectorRecti self, std::vector< gip::Rect< int > >::iterator first, std::vector< gip::Rect< int > >::iterator last) -> std::vector< gip::Rect< int > >::iterator
        """
        return _gippy.vectorRecti_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(gip::Rect<(int)>)> self) -> vectorRecti
        __init__(std::vector<(gip::Rect<(int)>)> self, vectorRecti arg2) -> vectorRecti
        __init__(std::vector<(gip::Rect<(int)>)> self, std::vector< gip::Rect< int > >::size_type size) -> vectorRecti
        __init__(std::vector<(gip::Rect<(int)>)> self, std::vector< gip::Rect< int > >::size_type size, Recti value) -> vectorRecti
        """
        this = _gippy.new_vectorRecti(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorRecti self, Recti x)"""
        return _gippy.vectorRecti_push_back(self, *args)

    def front(self):
        """front(vectorRecti self) -> Recti"""
        return _gippy.vectorRecti_front(self)

    def back(self):
        """back(vectorRecti self) -> Recti"""
        return _gippy.vectorRecti_back(self)

    def assign(self, *args):
        """assign(vectorRecti self, std::vector< gip::Rect< int > >::size_type n, Recti x)"""
        return _gippy.vectorRecti_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorRecti self, std::vector< gip::Rect< int > >::size_type new_size)
        resize(vectorRecti self, std::vector< gip::Rect< int > >::size_type new_size, Recti x)
        """
        return _gippy.vectorRecti_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorRecti self, std::vector< gip::Rect< int > >::iterator pos, Recti x) -> std::vector< gip::Rect< int > >::iterator
        insert(vectorRecti self, std::vector< gip::Rect< int > >::iterator pos, std::vector< gip::Rect< int > >::size_type n, 
            Recti x)
        """
        return _gippy.vectorRecti_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorRecti self, std::vector< gip::Rect< int > >::size_type n)"""
        return _gippy.vectorRecti_reserve(self, *args)

    def capacity(self):
        """capacity(vectorRecti self) -> std::vector< gip::Rect< int > >::size_type"""
        return _gippy.vectorRecti_capacity(self)

    __swig_destroy__ = _gippy.delete_vectorRecti
    __del__ = lambda self : None;
vectorRecti_swigregister = _gippy.vectorRecti_swigregister
vectorRecti_swigregister(vectorRecti)

class Options(_object):
    """Proxy of C++ gip::Options class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Options, name)
    __repr__ = _swig_repr
    def DefaultFormat():
        """DefaultFormat() -> std::string"""
        return _gippy.Options_DefaultFormat()

    if _newclass:DefaultFormat = staticmethod(DefaultFormat)
    __swig_getmethods__["DefaultFormat"] = lambda x: DefaultFormat
    def SetDefaultFormat(*args):
        """SetDefaultFormat(std::string format)"""
        return _gippy.Options_SetDefaultFormat(*args)

    if _newclass:SetDefaultFormat = staticmethod(SetDefaultFormat)
    __swig_getmethods__["SetDefaultFormat"] = lambda x: SetDefaultFormat
    def ChunkSize():
        """ChunkSize() -> float"""
        return _gippy.Options_ChunkSize()

    if _newclass:ChunkSize = staticmethod(ChunkSize)
    __swig_getmethods__["ChunkSize"] = lambda x: ChunkSize
    def SetChunkSize(*args):
        """SetChunkSize(float sz)"""
        return _gippy.Options_SetChunkSize(*args)

    if _newclass:SetChunkSize = staticmethod(SetChunkSize)
    __swig_getmethods__["SetChunkSize"] = lambda x: SetChunkSize
    def Verbose():
        """Verbose() -> int"""
        return _gippy.Options_Verbose()

    if _newclass:Verbose = staticmethod(Verbose)
    __swig_getmethods__["Verbose"] = lambda x: Verbose
    def SetVerbose(*args):
        """SetVerbose(int v)"""
        return _gippy.Options_SetVerbose(*args)

    if _newclass:SetVerbose = staticmethod(SetVerbose)
    __swig_getmethods__["SetVerbose"] = lambda x: SetVerbose
    def WorkDir():
        """WorkDir() -> std::string"""
        return _gippy.Options_WorkDir()

    if _newclass:WorkDir = staticmethod(WorkDir)
    __swig_getmethods__["WorkDir"] = lambda x: WorkDir
    def SetWorkDir(*args):
        """SetWorkDir(std::string workdir)"""
        return _gippy.Options_SetWorkDir(*args)

    if _newclass:SetWorkDir = staticmethod(SetWorkDir)
    __swig_getmethods__["SetWorkDir"] = lambda x: SetWorkDir
    def __init__(self): 
        """__init__(gip::Options self) -> Options"""
        this = _gippy.new_Options()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gippy.delete_Options
    __del__ = lambda self : None;
Options_swigregister = _gippy.Options_swigregister
Options_swigregister(Options)

def Options_DefaultFormat():
  """Options_DefaultFormat() -> std::string"""
  return _gippy.Options_DefaultFormat()

def Options_SetDefaultFormat(*args):
  """Options_SetDefaultFormat(std::string format)"""
  return _gippy.Options_SetDefaultFormat(*args)

def Options_ChunkSize():
  """Options_ChunkSize() -> float"""
  return _gippy.Options_ChunkSize()

def Options_SetChunkSize(*args):
  """Options_SetChunkSize(float sz)"""
  return _gippy.Options_SetChunkSize(*args)

def Options_Verbose():
  """Options_Verbose() -> int"""
  return _gippy.Options_Verbose()

def Options_SetVerbose(*args):
  """Options_SetVerbose(int v)"""
  return _gippy.Options_SetVerbose(*args)

def Options_WorkDir():
  """Options_WorkDir() -> std::string"""
  return _gippy.Options_WorkDir()

def Options_SetWorkDir(*args):
  """Options_SetWorkDir(std::string workdir)"""
  return _gippy.Options_SetWorkDir(*args)

# This file is compatible with both classic and new-style classes.


