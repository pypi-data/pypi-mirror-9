# $Id: publiforge.rnc a10a2129ea91 2014/11/11 19:16:07 Patrick $

start = publiforge


publiforge = element publiforge { publiforge.attributes, publiforge.content }

publiforge.attributes =
   version.attribute
version.attribute = attribute version { "1.0" }

publiforge.content =
   user
 | group
 | storage
 | indexer
 | project
 | project.pack
 | (users?, groups?, storages?, indexers?, projects?, packs?)
 | project.processing
 | processor
 | opener
 | build
 | variables


# =============================================================================
#                                      user
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ users ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

users = element users { users.content }

users.content =
   user+

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ user ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

user = element user { user.attributes, user.content }

user.attributes =
   user.login.attribute
 & user.status.attribute?
 & (created.attribute & updated.attribute?)?
user.login.attribute = attribute login { xsd:ID {minLength = "2"} }
user.status.attribute = attribute status { "draft" | "active" | "inactive" }
created.attribute = attribute created {
   xsd:token {pattern = "\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}"}
}
updated.attribute = attribute updated {
   xsd:token {pattern = "\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}"}
}

user.content =
   password?
 & name
 & email
 & language?
 & home?
 & page_size?
 & expiration?
 & ips?
 & permissions?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ password ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

password = element password { password.attributes, password.content }

password.attributes =
   hash.attribute?
hash.attribute = attribute hash { "true" }

password.content = xsd:token {minLength = "8"}

# ~~~~~~~~~~~~~~ name, email, language, home, page_size, expiration ~~~~~~~~~~~

name = element name { xsd:token {minLength = "2"} }

email = element email {
   xsd:token {pattern = "[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,4}" } }

language = element language { lang.enumeration }

home = element home { "storages" | "projects" | "site" }

page_size = element page_size { xsd:positiveInteger }

expiration = element expiration { xsd:date }

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ IP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ ips
ips = element ips { ips.content }

ips.content =
   ip+

# ~~~~~~ ip
ip = element ip { ip.content }

ip.content = xsd:token {pattern = "\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}"}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ permission ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ permissions
permissions = element permissions { permissions.content }

permissions.content =
   permission+

# ~~~~~~ permission
permission = element permission { permission.attributes, permission.content }

permission.attributes =
   scope.attribute
scope.attribute = attribute scope {
   "all" | "doc" | "usr" | "grp" | "stg" | "idx" | "prj" }

permission.content = "manager" | "editor" | "user"


# =============================================================================
#                                    group
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

groups = element groups { groups.content }

groups.content =
   group+

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ group ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

group = element group { group.attributes, group.content }

group.attributes =
   group.id.attribute
group.id.attribute = attribute xml:id { xsd:ID }
   
group.content =
   label,
   description?,
   permissions?,
   group.members?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ group.member ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~ group.members
group.members = element members { group.members.content }

group.members.content =
   group.member+

# ~~~~~ group.member
group.member = element member { member.content }

member.content = xsd:NCName


# =============================================================================
#                                   storage
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ storages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

storages = element storages { storages.content }

storages.content =
   storage+

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ storage ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

storage = element storage { storage.attributes, storage.content }

storage.attributes =
   storage.id.attribute
storage.id.attribute = attribute id { xsd:NMTOKEN }

storage.content =
   label,
   description?,
   vcs,
   access?,
   refresh?,
   reset?,
   indexed?,
   storage.openers?,
   storage.members?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ reset, access, refresh ~~~~~~~~~~~~~~~~~~~~~~~~~~

reset = element reset { xsd:boolean }
access = element access { "open" | "restricted" | "closed" }
refresh = element refresh { xsd:integer }

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ vcs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

vcs = element vcs {
   (  (attribute engine { "none" }, vcs.none.content)
    | (attribute engine { "local" }, vcs.local.content)
    | (attribute engine { "hg"|"svn"|"hgsvn" }, vcs.content) )
}
 
vcs.none.content =
   public?
vcs.local.content =
   public?
vcs.content =
   url,
   (vcs.user,  vcs.password?)?

# ~~~~~ public
public = element public { public.content }

public.content = xsd:anyURI

# ~~~~~ url
url = element url { url.content }

url.content = xsd:anyURI
   
# ~~~~~ vcs.user, vcs.password
vcs.user = element user { vcs.user.content }
vcs.password = element password {
   vcs.password.attributes, vcs.password.content }

vcs.password.attributes =
   encrypt.attribute?
encrypt.attribute = attribute encrypt { xsd:boolean }

vcs.user.content = xsd:NCName
vcs.password.content = xsd:token

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ storage.opener ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ storage.openers
storage.openers = element openers { storage.openers.content }

storage.openers.content =
   storage.opener+

# ~~~~~~ storage.opener
storage.opener = element opener { storage.opener.content }

storage.opener.content = xsd:NCName

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ storage.member ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~ storage.members
storage.members = element members { storage.members.content }

storage.members.content =
   (storage.member | storage.member-group)+

# ~~~~~ storage.member
storage.member = element member { storage.member.attributes, member.content }

storage.member.attributes =
   storage.permission.attribute?
 & in-menu.attribute?
 & (vcs-user.attribute, vcs-password.attribute?)?
storage.permission.attribute = attribute permission {
   "writer" | "reader" | "none" }
in-menu.attribute = attribute in-menu { xsd:boolean }
vcs-user.attribute = attribute vcs-user { vcs.user.content }
vcs-password.attribute = attribute vcs-password { vcs.password.content }

# ~~~~~ storage.member-group
storage.member-group = element member-group {
   storage.member-group.attributes, member-group.content }

storage.member-group.attributes =
   storage.permission.attribute?

member-group.content = xsd:NCName

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ indexed ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

indexed = element indexed { indexed.content }

indexed.content = text


# =============================================================================
#                                   indexer
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ indexers ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

indexers = element indexers { indexers.content }

indexers.content =
   indexer+

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ indexer ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

indexer = element indexer {
   indexer.attributes,
   (  (attribute value { "string"|"integer"|"date" }, indexer.content.string)
    | (attribute value { "select" }, indexer.content.select) )
}

indexer.attributes =
   indexer.id.attribute
indexer.id.attribute = attribute id { xsd:NMTOKEN }

indexer.content.string =
   localized.label+,
   extractors
indexer.content.select =
   localized.label+,
   option+,
   extractors

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ extractor ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ extractors
extractors = element extractors { extractors.content }

extractors.content =
   extractor+

# ~~~~~~ extractor
extractor = element extractor { extractor.attributes, extractor.content }

extractor.attributes =
   extractor.type.attribute
extractor.type.attribute = attribute type { "regex" | "xpath" | "iim" }

extractor.content =
   indexed,
   parameter

# ~~~~~~ parameter
parameter = element parameter { parameter.attributes, parameter.content }

parameter.attributes =
   limit.attribute?
limit.attribute = attribute limit { xsd:positiveInteger }
   
parameter.content = text


# =============================================================================
#                                    project
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ projects ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

projects = element projects { projects.content }

projects.content =
   project+

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ project ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

project = element project { project.attributes, project.content }

project.attributes =
   project.status.attribute
project.status.attribute = attribute status { "draft" | "active" | "archived" }

project.content =
   label,
   description?,
   deadline?,
   roles?,
   project.processings?,
   tasks?,
   packs?,
   project.members?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ deadline ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

deadline = element deadline { deadline.content }

deadline.content =
   xsd:date

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ role ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~ roles
roles = element roles { roles.content }

roles.content =
   role+

# ~~~~~ role
role = element role { role.attributes, role.content }

role.attributes =
   role.id.attribute
role.id.attribute = attribute xml:id { xsd:ID }

role.content =
   label,
   description?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ project.processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~ project.processings
project.processings = element processings { project.processings.content }

project.processings.content =
   project.processing+

# ~~~~~ project.processing
project.processing = element processing {
   project.processing.attributes, project.processing.content }

project.processing.attributes =
   processing.id.attribute?
processing.id.attribute = attribute xml:id { xsd:ID }

project.processing.content =
   label,
   description?,
   processing.processor,
   project.variables?,
   resources?,
   templates?,
   output?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ task ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~ tasks
tasks = element tasks { tasks.content }

tasks.content =
   task+

# ~~~~~ task
task = element task { task.attributes, task.content }

task.attributes =
   task.id.attribute
task.id.attribute = attribute xml:id { xsd:ID }

task.content =
   label,
   description?,
   deadline?,
   task.processings?,
   operator,
   links?

# ~~~~~ task.processings
task.processings = element processings { task.processings.content }

task.processings.content =
   task.processing+

# ~~~~~ task.processing
task.processing = element processing { task.processing.attributes }

task.processing.attributes =
   ref.attribute
ref.attribute = attribute ref { xsd:IDREF }

# ~~~~~~ operator
operator = element operator {
   (  (attribute type {"user" | "role"}, operator.human.attributes )
    | (attribute type {"auto"}) )
}

operator.human.attributes =
   operator.id.attribute
operator.id.attribute = attribute id { xsd:NCName }
   
# ~~~~~~ links
links = element links { links.content }

links.content =
   link+

# ~~~~~~ link
link = element link { link.attributes }

link.attributes =
   link.type.attribute?
 & task.attribute
link.type.attribute = attribute type { "normal" | "back" | "kept" | "redo" }
task.attribute = attribute task { xsd:IDREF }

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ project.member ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
# ~~~~~ project.members
project.members = element members { project.members.content }

project.members.content =
   (project.member | project.member-group)+

# ~~~~~ project.member
project.member = element member { project.member.attributes, member.content }

project.member.attributes =
   project.permission.attribute?
 & in-menu.attribute?
 & entries.attribute?
 & roles.attribute?
project.permission.attribute = attribute permission {
   "leader" | "packmaker" | "member" | "none" }
entries.attribute = attribute entries { 'all' | 'packs' | 'tasks' }
roles.attribute = attribute roles { xsd:IDREFS }
   
# ~~~~~ project.member-group
project.member-group = element member-group {
   project.member-group.attributes, member-group.content }

project.member-group.attributes =
   project.permission.attribute?


# =============================================================================
#                                     Packs
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ packs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ packs
packs = element packs { packs.content }

packs.content =
   project.pack+

# ~~~~~~ pack
project.pack = element pack { project.pack.attributes, project.pack.content }
build.pack = element pack { build.pack.attributes, build.pack.content }

project.pack.attributes =
   recursive.attribute?
 & (created.attribute & updated.attribute?)?
build.pack.attributes =
   recursive.attribute?
recursive.attribute = attribute recursive { xsd:boolean }

project.pack.content =
   label,
   description?,
   files?,
   resources?,
   templates?,
   note?,
   events?
build.pack.content =
   files,
   resources?,
   templates?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

note = element note { note.content }

note.content = text

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ events ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ events
events = element events { events.content }

events.content =
   event+

# ~~~~~~ event
event = element event { event.attributes }

event.attributes =
   begin.attribute?
 & event.task.attribute
 & event.operator.attribute
 & event.ref.attribute?
begin.attribute = attribute begin {
   xsd:token {pattern = "\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{1,6})?"}
}
event.task.attribute = attribute task { text }
event.operator.attribute = attribute operator { text }
event.ref.attribute = attribute ref {
   xsd:token {pattern = "[\w_\-\.]+ ((user|role) [\w_\-\.]+|auto)"}
}


# =============================================================================
#                                    processor
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ processor ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

processor = element processor { processor.content }

processor.content =
   localized.label+,
   localized.description*,
   module,
   ancestors?,
   processor.variables?,
   output?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ module ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

module = element module { module.content }

module.content = xsd:token {pattern = "[a-z.]+"}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ancestors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ ancestors
ancestors = element ancestors { ancestors.content }

ancestors.content =
   ancestor+

# ~~~~~~ ancestor
ancestor = element ancestor { ancestor.content }

ancestor.content = xsd:NCName

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ output ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

output = element output { output.attributes, output.content }

output.attributes =
   add2pack.attibute?
add2pack.attibute = attribute add2pack {
   "result2files" | "result2resources" | "result2templates"
 | "output2files" | "output2resources" | "output2templates"
 | "smart" }

output.content = text


# =============================================================================
#                                    opener
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ opener ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

opener = element opener { opener.content }

opener.content =
   localized.label+,
   localized.description*,
   module,
   ancestors?,
   imports?,
   seeds?,
   opener.variables?,
   opener.public?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ seeds ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ seeds
seeds = element seeds { seeds.content }

seeds.content =
   seed+

# ~~~~~~ seed
seed = element seed { seed.content }

seed.content =
   file,
   localized.label+

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ opener.public ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

opener.public = element public { opener.public.content }

opener.public.content = text


# =============================================================================
#                                     build
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ build ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

build = element build { build.attributes, build.content }

build.attributes =
   id.attribute
id.attribute = attribute id { xsd:NMTOKEN }

build.content =
   settings,
   build.processing,
   build.pack?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ settings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~ settings
settings = element settings { settings.content }

settings.content =
   element setting { attribute key { "storage.root" }, setting.content },
   element setting { attribute key { "build.root" }, setting.content },
   setting*

# ~~~~~ setting
setting = element setting { setting.attributes, setting.content }

setting.attributes =
   setting.key.attribute
setting.key.attribute = attribute key { xsd:NCName }

setting.content = text

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ build.processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

build.processing = element processing { build.processing.content }

build.processing.content =
   processing.processor,
   build.variables?,
   resources?,
   templates?

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ processing.processor ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

processing.processor = element processor { processing.processor.content }

processing.processor.content = xsd:NCName


# =============================================================================
#                                  Variables
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

variables = element variables { variables.content }
processor.variables = element variables { processor.variables.content }
opener.variables = element variables { opener.variables.content }
project.variables = element variables { project.variables.content }
build.variables = element variables { build.variables.content }

variables.content =
   var.group+
processor.variables.content =
   var.group-file+
 | var.group+
opener.variables.content =
   var.group-file
project.variables.content =
   project.var+
build.variables.content =
   build.var+

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ var.group ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

var.group = element group { var.group.attributes, var.group.content }

var.group.attributes =
   name.attribute?
name.attribute = attribute name { xsd:NMTOKEN }

var.group.content =
   localized.label+,
   localized.description*,
   var+

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ var.group-file ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

var.group-file = element group-file { var.group-file.content }

var.group-file.content =
   xsd:anyURI
 | xsd:token { pattern = "\s*[a-zA-Z0-9_]+:[a-zA-Z0-9/_\-\.]+\s*" }
   
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ var ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~ var
var = element var {
   var.attributes,
   (  (attribute type { "string" }, var.content.string)
    | (attribute type { "text" },
       attribute rows { xsd:positiveInteger }?, var.content.string)
    | (attribute type { "boolean" }, var.content.boolean)
    | (attribute type { "integer" }, var.content.integer)
    | (attribute type { "select" }, var.content.select)
    | (attribute type { "regex" }, var.content.regex)
    | (attribute type { "processing" }) ),
   var.content
}
project.var = element var { project.var.attributes, project.var.content }
build.var = element var { build.var.attributes, value.content }
   
var.attributes =
   name.attribute
 & visible.attribute?
 & class.attribute?
 & cast.attribute?
project.var.attributes =
   name.attribute
 & visible.attribute?
build.var.attributes =
   name.attribute
visible.attribute = attribute visible { xsd:boolean }
class.attribute = attribute class { xsd:NMTOKENS }
cast.attribute = attribute cast { xsd:NMTOKEN }

var.content.string =
   default.string?
var.content.boolean =
   default.boolean?
var.content.integer =
   default.integer?
var.content.select =
   default.select?,
   option+
var.content.regex =
   default.regex?,
   pattern
var.content =
   localized.label+,
   localized.description*
project.var.content =
   value*,
   default.string?

# ~~~~~ default
default.string = element default { text }
default.boolean = element default { xsd:boolean }
default.integer = element default { xsd:integer }
default.select = element default { text }
default.regex = element default { text }

# ~~~~~ value
value = element value { value.attributes, value.content }

value.attributes =
   user.attribute
user.attribute = attribute user { xsd:NCName }

value.content = text

# ~~~~~ option
option = element option { option.attributes, option.content }

option.attributes =
   value.attribute?
value.attribute = attribute value { text }

option.content = text

# ~~~~~ pattern
pattern = element pattern { pattern.content }

pattern.content = text


# =============================================================================
#                       Files, resources, templates, imports
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~ files
files = element files { files.content }

files.content =
   file+

# ~~~~~ file
file = element file { file.attributes, file.content }

file.attributes =
   visible.attribute?

file.content = xsd:anyURI


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ resources ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ resources
resources = element resources { resources.content }

resources.content =
   resource+

# ~~~~~~ resource
resource = element resource { resource.attributes, resource.content }

resource.attributes =
   visible.attribute?

resource.content = xsd:anyURI

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ templates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ templates
templates = element templates { templates.content }

templates.content =
   template+

# ~~~~~~ template
template = element template { template.attributes, template.content }

template.attributes =
   template.to.attribute
 & visible.attribute?
template.to.attribute = attribute to { xsd:anyURI }

template.content = xsd:anyURI

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ imports ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~ imports
imports = element imports { imports.content }

imports.content =
   import+

# ~~~~~~ import
import = element import { import.attributes, import.content }

import.attributes =
   import.to.attribute
import.to.attribute = attribute to { xsd:anyURI }

import.content =
   xsd:anyURI
 | xsd:token { pattern = "\s*[a-zA-Z0-9_]+:[a-zA-Z0-9/_\-\.]+\s*" }


# =============================================================================
#                               Localized elements
# =============================================================================

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ label ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

label = element label { label.content }
localized.label = element label { localized.label.attributes, label.content }

localized.label.attributes =
   lang.attribute
lang.attribute = attribute xml:lang { lang.enumeration }
lang.enumeration = "en" | "fr" | "es"

label.content = text

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ description ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

description = element description { description.content }
localized.description = element description {
   localized.description.attributes, description.content }

localized.description.attributes =
   lang.attribute

description.content = text
