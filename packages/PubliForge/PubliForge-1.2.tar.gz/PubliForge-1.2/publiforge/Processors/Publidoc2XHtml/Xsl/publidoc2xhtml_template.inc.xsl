<?xml version='1.0' encoding="utf-8"?>
<!-- $Id: publidoc2xhtml_template.inc.xsl 237c275a0588 2015/02/04 20:29:27 Patrick $ -->
<xsl:stylesheet version="1.1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:date="http://exslt.org/dates-and-times"
                extension-element-prefixes="date">

  <!--
      *************************************************************************
                                    CALLABLE TEMPLATES
      *************************************************************************
  -->
   <!--
      =========================================================================
      Template html_file
      =========================================================================
  -->
  <xsl:template name="html_file">
    <xsl:param name="name"/>
    <xsl:param name="title"/>
    <xsl:param name="nojs"/>
    <xsl:param name="body"/>
    <xsl:document href="{$path}{$name}{$html_ext}" method="xml"
                  encoding="utf-8" indent="yes"
                  doctype-public="-//W3C//DTD XHTML 1.1//EN"
                  doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
      <xsl:call-template name="html_frame">
        <xsl:with-param name="title" select="$title"/>
        <xsl:with-param name="nojs" select="$nojs"/>
        <xsl:with-param name="body" select="$body"/>
      </xsl:call-template>
    </xsl:document>
  </xsl:template>

  <!--
      =========================================================================
      Template html_frame
      =========================================================================
  -->
  <xsl:template name="html_frame">
    <xsl:param name="title"/>
    <xsl:param name="nojs"/>
    <xsl:param name="body"/>
    <xsl:comment> Generated by PubliForge, <xsl:value-of select="date:date-time()"/> </xsl:comment>
    <html>
      <xsl:attribute name="xml:lang"><xsl:value-of select="$lang"/></xsl:attribute>
      <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <meta http-equiv="Content-Language">
          <xsl:attribute name="content"><xsl:value-of select="$lang"/></xsl:attribute>
        </meta>
        <title><xsl:value-of select="$title"/></title>
        <xsl:choose>
          <xsl:when test="$minify">
            <link rel="StyleSheet" href="{$css_dir}styles.css" type="text/css"/>
            <xsl:if test="$js and (not($nojs) or $onefile)">
              <script src="{$js_dir}jquery.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <script src="{$js_dir}scripts.js" type="text/javascript"><xsl:text> </xsl:text></script>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <link rel="StyleSheet" href="{$css_dir}reset.css" type="text/css"/>
            <link rel="StyleSheet" href="{$css_dir}publidoc.css" type="text/css"/>
            <link rel="StyleSheet" href="{$css_dir}custom.css" type="text/css"/>
            <xsl:if test="$js and (name()='topic' or $onefile)">
              <script src="{$js_dir}jquery.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <script src="{$js_dir}publidoc.js" type="text/javascript"><xsl:text> </xsl:text></script>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </head>
      <xsl:copy-of select="$body"/>
    </html>
  </xsl:template>

  <!--
      =========================================================================
      Template minify_files
      =========================================================================
  -->
  <xsl:template name="minify_files">
    <xsl:if test="$minify">
      <xsl:document
          href="{$path}{$css_dir}styles.css" method="text" encoding="utf-8">
reset.css
publidoc.css
custom.css
      </xsl:document>
      <xsl:if test="$js">
        <xsl:document
            href="{$path}{$js_dir}scripts.js" method="text" encoding="utf-8">
publidoc.js
        </xsl:document>
      </xsl:if>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template division_toc_title
      =========================================================================
  -->
  <xsl:template name="division_toc_title">
    <xsl:choose>
      <xsl:when test="head/shorttitle">
        <xsl:apply-templates select="head/shorttitle" mode="link"/>
      </xsl:when>
      <xsl:when test="head/title">
        <xsl:apply-templates select="head/title" mode="link"/>
      </xsl:when>
    </xsl:choose>
    <xsl:for-each select="head/subtitle">
      <xsl:value-of select="$str_sep"/>
      <xsl:apply-templates mode="link"/>
    </xsl:for-each>
    <xsl:if test="$toc_with_abstract and head/abstract">
      <xsl:if test="head/title"><br/></xsl:if>
      <span class="pdocAbstract">
        <xsl:apply-templates select="head/abstract" mode="link"/>
      </span>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template topic_toc_title
      =========================================================================
  -->
  <xsl:template name="topic_toc_title">
    <xsl:choose>
      <xsl:when test="@type='title'">
        <xsl:value-of select="$i18n_title_page"/>
      </xsl:when>
      <xsl:when test="head/shorttitle">
        <xsl:apply-templates select="head/shorttitle" mode="link"/>
      </xsl:when>
      <xsl:when test="head/title">
        <xsl:apply-templates select="head/title" mode="link"/>
      </xsl:when>
      <xsl:when test="@type='copyright'">
        <xsl:value-of select="$i18n_copyright"/>
      </xsl:when>
      <xsl:when test="@type='dedication'">
        <xsl:value-of select="$i18n_dedication"/>
      </xsl:when>
      <xsl:when test="@type='inscription'">
        <xsl:value-of select="$i18n_inscription"/>
      </xsl:when>
    </xsl:choose>
    <xsl:if test="head/subtitle and (not(@type) or @type!='title')">
      <xsl:for-each select="head/subtitle">
        <xsl:value-of select="$str_sep"/>
        <xsl:apply-templates mode="link"/>
      </xsl:for-each>
    </xsl:if>
    <xsl:if test="$toc_with_abstract and head/abstract">
      <span class="pdocAbstract">
        <xsl:if test="head/title or @type='title' or @type='copyright'
                      or @type='dedication' or @type='inscription'">
          <br/>
        </xsl:if>
        <xsl:apply-templates select="head/abstract" mode="link"/>
      </span>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template section_toc_title
      =========================================================================
  -->
  <xsl:template name="section_toc_title">
    <xsl:choose>
      <xsl:when test="head/shorttitle">
        <xsl:apply-templates select="head/shorttitle" mode="link"/>
      </xsl:when>
      <xsl:when test="head/title">
        <xsl:apply-templates select="head/title" mode="link"/>
      </xsl:when>
    </xsl:choose>
    <xsl:for-each select="head/subtitle">
      <xsl:value-of select="$str_sep"/>
      <xsl:apply-templates mode="link"/>
    </xsl:for-each>
    <xsl:if test="$toc_with_abstract and head/abstract">
      <span class="pdocAbstract">
        <xsl:if test="head/title"><br/></xsl:if>
        <xsl:apply-templates select="head/abstract" mode="link"/>
      </span>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template has_toc_children
      =========================================================================
  -->
  <xsl:template name="has_toc_children">
    <xsl:if test=".//division[head/title or ($toc_with_abstract and head/abstract)]
                  or .//topic[head/title or @type='title' or @type='copyright'
                    or @type='dedication' or @type='inscription'
                    or ($toc_with_abstract and head/abstract)]
                  or .//section[$toc_section_depth&gt;count(ancestor::section)
                    and (head/title or ($toc_with_abstract and head/abstract))]
                  or ($toc_section_depth&gt;0 and .//bibliography)">1</xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template title
      =========================================================================
  -->
  <xsl:template name="title">
    <xsl:apply-templates select="head/title"/>
  </xsl:template>

  <!--
      =========================================================================
      Template subtitle
      =========================================================================
  -->
  <xsl:template name="subtitle">
    <xsl:param name="nodes" select="head/subtitle"/>
    <xsl:choose>
      <xsl:when test="count($nodes)&gt;1">
        <xsl:for-each select="$nodes">
          <span class="pdocSubtitle{position()}"><xsl:apply-templates/></span><br/>
        </xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="$nodes"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template lead
      =========================================================================
  -->
  <xsl:template name="lead">
    <xsl:if test="not(preceding-sibling::topic)
                  and (not($toc_division_depth) or count(ancestor::division)&gt;1)
                  and (parent::division/head/title or parent::division/front)">
      <xsl:for-each select="ancestor::division">
        <xsl:if test="not($toc_division_depth) or count(ancestor::division)">
          <xsl:apply-templates select="." mode="lead"/>
        </xsl:if>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template media_type_attribute
      =========================================================================
  -->
  <xsl:template name="media_type_attribute">
    <xsl:param name="media"/>
    <xsl:param name="ext"/>
    <xsl:attribute name="media-type">
      <xsl:value-of select="$media"/>
      <xsl:text>/</xsl:text>
      <xsl:choose>
        <xsl:when test="$ext='.jpg'">jpeg</xsl:when>
        <xsl:when test="$ext='.svg'">svg+xml</xsl:when>
        <xsl:when test="$ext='.svg+.png' or $ext='.svg+.jpg'">svg+xml</xsl:when>
        <xsl:when test="$ext='.mp3' or $ext='.m4a'">mpeg</xsl:when>
        <xsl:when test="$ext='.ogv'">ogg</xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="substring-after($ext, '.')"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:attribute>
  </xsl:template>

  <!--
      =========================================================================
      Template image_extension
      =========================================================================
  -->
  <xsl:template name="image_extension">
    <xsl:choose>
      <xsl:when test="processing-instruction('tune')[
                      contains(., 'target=&quot;html&quot;')
                      and contains(., 'format=')]">
        <xsl:text>.</xsl:text>
        <xsl:apply-templates select="processing-instruction('tune')"
                             mode="tune">
          <xsl:with-param name="argument">format</xsl:with-param>
        </xsl:apply-templates>
      </xsl:when>
      <xsl:when test="ancestor::cover">
        <xsl:value-of select="$img_ext_cover"/>
      </xsl:when>
      <xsl:when test="@type='animation'">.gif</xsl:when>
      <xsl:when test="ancestor::hotspot">.png</xsl:when>
      <xsl:when test="ancestor::dropzone">.png</xsl:when>
      <xsl:when test="@type='icon' or not(ancestor::media)">
        <xsl:value-of select="$img_ext_icon"/>
      </xsl:when>
      <xsl:when test="contains($img_ext, '+')">
        <xsl:value-of select="substring-before($img_ext, '+')"/>
      </xsl:when>
      <xsl:otherwise><xsl:value-of select="$img_ext"/></xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template image_size
      =========================================================================
  -->
  <xsl:template name="image_size">
    <xsl:choose>
      <xsl:when test="processing-instruction('tune')[
                      contains(., 'target=&quot;html&quot;')
                      and contains(., 'size=')]">
        <xsl:apply-templates select="processing-instruction('tune')" mode="tune">
          <xsl:with-param name="argument">size</xsl:with-param>
        </xsl:apply-templates>
      </xsl:when>
      <xsl:when test="@type='thumbnail' or ancestor::match
                      or ancestor::right or ancestor::wrong
                      or (ancestor::item and not(ancestor::list))">
        <xsl:value-of select="$img_size_thumbnail"/>
      </xsl:when>
      <xsl:when test="@type='cover' or ancestor::cover">
        <xsl:value-of select="$img_size_cover"/>
      </xsl:when>
      <xsl:when test="ancestor::header or ancestor::footer">
        <xsl:value-of select="$img_size_header"/>
      </xsl:when>
      <xsl:when test="ancestor::pip and not(ancestor::dropzone)">
        <xsl:value-of select="$img_size"/>
      </xsl:when>
      <xsl:when test="ancestor::pip">
        <xsl:value-of select="$img_size_thumbnail"/>
      </xsl:when>
      <xsl:when test="@type='icon' or not(ancestor::media)">
        <xsl:value-of select="$img_size_icon"/>
      </xsl:when>
      <xsl:otherwise><xsl:value-of select="$img_size"/></xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template image_alt
      =========================================================================
  -->
  <xsl:template name="image_alt">
    <xsl:attribute name="alt">
      <xsl:choose>
        <xsl:when test="@alt">
          <xsl:value-of select="@alt"/>
        </xsl:when>
        <xsl:when test="../head/title">
          <xsl:apply-templates select="../head/title" mode="text"/>
        </xsl:when>
        <xsl:otherwise><xsl:value-of select="@id"/></xsl:otherwise>
      </xsl:choose>
    </xsl:attribute>
  </xsl:template>

  <!--
      =========================================================================
      Template image_img
      =========================================================================
  -->
  <xsl:template name="image_img">
    <xsl:call-template name="mid_image"/>
    <img>
      <xsl:attribute name="src">
        <xsl:value-of select="concat($img_dir, @id)"/>
        <xsl:call-template name="image_extension"/>
      </xsl:attribute>
      <xsl:call-template name="image_alt"/>
    </img>
  </xsl:template>

  <!--
      =========================================================================
      Template audio & audio_symbol
      =========================================================================
  -->
  <xsl:template name="audio">
    <xsl:param name="id" select="@id"/>
    <xsl:param name="controls" select="1"/>
    <xsl:param name="autoplay" select="0"/>
    <xsl:if test="$controls">
      <span>
        <xsl:attribute name="class">
          <xsl:text>pdocAudio</xsl:text>
          <xsl:if test="name()='audio' and @type"> pdocAudio-<xsl:value-of select="@type"/></xsl:if>
        </xsl:attribute>
        <a href="{$aud_dir}{$id}{$aud_ext}">
          <xsl:call-template name="audio_symbol">
            <xsl:with-param name="id" select="$id"/>
          </xsl:call-template>
        </a>
      </span>
    </xsl:if>
  </xsl:template>

  <xsl:template name="audio_symbol">
    <xsl:param name="id" select="@id"/>
    <img src="{concat($img_dir, 'audio.png')}" alt="{$id}"/>
  </xsl:template>

  <!--
      =========================================================================
      Template video & video_symbol
      =========================================================================
  -->
  <xsl:template name="video">
    <xsl:param name="id" select="@id"/>
    <xsl:param name="controls" select="1"/>
    <xsl:param name="autoplay" select="0"/>
    <xsl:param name="width"/>
    <xsl:if test="$controls">
      <div>
        <xsl:attribute name="class">
          <xsl:text>pdocVideo</xsl:text>
          <xsl:if test="name()='video' and @type"> pdocVideo-<xsl:value-of select="@type"/></xsl:if>
        </xsl:attribute>
        <a href="{$vid_dir}{$id}{$vid_ext}">
          <xsl:choose>
            <xsl:when test="../image">
              <span class="pdocVideoIcon">
                <xsl:call-template name="video_symbol">
                  <xsl:with-param name="id" select="$id"/>
                </xsl:call-template>
              </span>
              <xsl:apply-templates select="../image"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:call-template name="video_symbol">
                <xsl:with-param name="id" select="$id"/>
              </xsl:call-template>
            </xsl:otherwise>
          </xsl:choose>
        </a>
      </div>
    </xsl:if>
  </xsl:template>

  <xsl:template name="video_symbol">
    <xsl:param name="id" select="@id"/>
    <img src="{concat($img_dir, 'video.png')}" alt="{$id}"/>
  </xsl:template>

  <!--
      =========================================================================
      Template math, math_package
      =========================================================================
  -->
  <xsl:template name="math">
    <xsl:choose>
      <!-- LaTeX -->
      <xsl:when test="$math and latex">
        <xsl:variable name="math_id"
                      select="concat($fid, '-tex-', count(preceding::math)+1)"/>
        <img title="${{{$math_id}}}" src="{concat($math_dir, $math_id, '.png')}"
             alt="{normalize-space()}"/>

        <xsl:document href="{$path}{$fid}-tex{count(preceding::math)+1}.tmp.tex"
                      method="text" encoding="ISO-8859-15">%
% math_id = <xsl:value-of select="$math_id"/>
%
\documentclass[10pt,fleqn]{article}
\usepackage[active]{preview}
\usepackage{amsmath,amssymb,amsfonts,txfonts}
\usepackage{eurosym}
<xsl:call-template name="math_package"/>
\begin{document}
\begin{preview}
\setlength{\mathindent}{0pt}
<xsl:choose>
  <xsl:when test="latex/@plain='true'">
    <xsl:value-of select="latex"/>
  </xsl:when>
  <xsl:when test="@display">
    <xsl:text>\[</xsl:text><xsl:value-of select="latex"/><xsl:text>\]</xsl:text>
  </xsl:when>
  <xsl:otherwise>\(<xsl:value-of select="latex"/>\)</xsl:otherwise>
</xsl:choose>
\end{preview}
\end{document}
        </xsl:document>
      </xsl:when>

      <!-- Other -->
      <xsl:otherwise><xsl:apply-templates/></xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="math_package"/>

  <!--
      =========================================================================
      Template navigation
      =========================================================================
  -->
  <xsl:template name="navigation">
    <xsl:param name="bottom"/>
    <xsl:if test="not($nonav)">
      <xsl:variable name="previous"
                    select="preceding::topic
                            |ancestor::division[$toc_division_depth&gt;count(ancestor::division)]
                            |preceding::division[$toc_division_depth&gt;count(ancestor::division)]"/>
      <div class="pdocNavBar col111">
        <xsl:if test="$bottom"><hr/></xsl:if>
        <div class="colFirst">
          <xsl:choose>
            <xsl:when test="$previous">
              <xsl:choose>
                <xsl:when test="name($previous[last()])='topic'">
                  <a href="{$fid}-tpc-{count(preceding::topic)}{$html_ext}">
                    <img src="{$img_dir}go_previous.png" alt="Previous"/>
                  </a>
                </xsl:when>
                <xsl:otherwise>
                  <a href="{$fid}-div-{count($previous[last()]/preceding::division
                           |$previous[last()]/ancestor::division)+1}{$html_ext}">
                    <img src="{$img_dir}go_previous.png" alt="Previous"/>
                  </a>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise> </xsl:otherwise>
          </xsl:choose>
        </div>

        <div class="col">
          <a href="{$fid}{$html_ext}">
            <img src="{$img_dir}go_up.png" alt="up"/>
          </a>
        </div>

        <div class="colLast">
          <xsl:choose>
            <xsl:when test="name()='division' and division
                            and $toc_division_depth&gt;count(ancestor::division)+1">
              <a href="{$fid}-div-{count(preceding::division|ancestor::division)+2}{$html_ext}">
                <img src="{$img_dir}go_next.png" alt="Next"/>
              </a>
            </xsl:when>
            <xsl:when test="name()='division'">
              <a href="{$fid}-tpc-{count(preceding::topic)+1}{$html_ext}">
                <img src="{$img_dir}go_next.png" alt="Next"/>
              </a>
            </xsl:when>
            <xsl:when test="name(following::*[1])='division'
                            and $toc_division_depth&gt;count(following::*[1]/ancestor::division)">
              <a href="{$fid}-div-{count(following::*[1]/preceding::division|following::*[1]/ancestor::division)+1}{$html_ext}">
                <img src="{$img_dir}go_next.png" alt="Next"/>
              </a>
            </xsl:when>
            <xsl:when test="count(following::topic)">
              <a href="{$fid}-tpc-{count(preceding::topic)+2}{$html_ext}">
                <img src="{$img_dir}go_next.png" alt="Next"/>
              </a>
            </xsl:when>
            <xsl:otherwise> </xsl:otherwise>
          </xsl:choose>
        </div>
        <xsl:if test="not($bottom)"><hr/></xsl:if>
      </div>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template index_file
      =========================================================================
  -->
  <xsl:template name="index_file">
    <xsl:call-template name="html_file">
      <xsl:with-param name="name" select="concat($fid, '-index')"/>
      <xsl:with-param name="title" select="$i18n_index"/>
      <xsl:with-param name="nojs" select="1"/>
      <xsl:with-param name="body">
        <body class="pdocIndex">
          <xsl:call-template name="navigation"/>
          <xsl:call-template name="index"/>
          <xsl:call-template name="navigation">
            <xsl:with-param name="bottom" select="1"/>
          </xsl:call-template>
        </body>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <!--
      =========================================================================
      Template index
      =========================================================================
  -->
  <xsl:template name="index">
    <xsl:variable name="indexes" select=".//index"/>
    <xsl:choose>
      <xsl:when test="$onefile">
        <h2 class="pdocTitle"><xsl:value-of select="$i18n_index"/></h2>
      </xsl:when>
      <xsl:otherwise>
        <h1 class="pdocTitle"><xsl:value-of select="$i18n_index"/></h1>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:call-template name="index_symbols">
      <xsl:with-param name="indexes" select="$indexes"/>
    </xsl:call-template>
    <xsl:call-template name="index_letters">
      <xsl:with-param name="indexes" select="$indexes"/>
    </xsl:call-template>
  </xsl:template>

  <!--
      =========================================================================
      Template index_symbols
      =========================================================================
  -->
  <xsl:template name="index_symbols">
    <xsl:param name="indexes"/>
    <xsl:if
        test="$indexes[translate(substring(normalize-space(*[1]), 1, 1),
              'aàâäæbcçdeéèêëfghiîïjklmnoôöœpqrstuùûüvwxyzAÀÂÄÆBCÇDEÉÈÊËFGHIÎÏJKLMNOÔÖŒPQRSTUÙÛÜVWXYZ', '')]">
      <ul>
        <xsl:for-each
            select="$indexes[translate(substring(normalize-space(*[1]), 1, 1),
                    'aàâäæbcçdeéèêëfghiîïjklmnoôöœpqrstuùûüvwxyzAÀÂÄÆBCÇDEÉÈÊËFGHIÎÏJKLMNOÔÖŒPQRSTUÙÛÜVWXYZ', '')]">
          <xsl:sort select="normalize-space(*[1])"/>
          <xsl:if test="not(preceding::index[
                        normalize-space(*[1])=normalize-space(current()/*[1])])">
            <li>
              <xsl:apply-templates select="*[1]"/>
              <xsl:call-template name="index_refs">
                <xsl:with-param name="indexes" select="$indexes"/>
              </xsl:call-template>
            </li>
          </xsl:if>
        </xsl:for-each>
      </ul>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template index_letters
      =========================================================================
  -->
  <xsl:template name="index_letters">
    <xsl:param name="indexes"/>
    <xsl:param name="shift" select="1"/>
    <xsl:variable name="letter"
                  select="substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ', $shift, 1)"/>

    <xsl:if test="$indexes[translate(substring(normalize-space(*[1]), 1, 1),
                  'aàâäæbcçdeéèêëfghiîïjklmnoôöœpqrstuùûüvwxyz',
                  'AAAAABCCDEEEEEFGHIIIJKLMNOOOOPQRSTUUUUVWXYZ')=$letter]">
      <h3><xsl:value-of select="$letter"/></h3>
      <ul>
        <xsl:for-each
            select="$indexes[translate(substring(normalize-space(*[1]), 1, 1),
                    'aàâäæbcçdeéèêëfghiîïjklmnoôöœpqrstuùûüvwxyz',
                    'AAAAABCCDEEEEEFGHIIIJKLMNOOOOPQRSTUUUUVWXYZ')=$letter]">
          <xsl:sort select="translate(normalize-space(*[1]),
                            'aàâäæbcçdeéèêëfghiîïjklmnoôöœpqrstuùûüvwxyz -',
                            'AAAAABCCDEEEEEFGHIIIJKLMNOOOOPQRSTUUUUVWXYZ')"/>
          <xsl:if test="not(preceding::index[
                        normalize-space(*[1])=normalize-space(current()/*[1])])">
            <li>
              <xsl:apply-templates select="*[1]"/>
              <xsl:call-template name="index_refs">
                <xsl:with-param name="indexes" select="$indexes"/>
              </xsl:call-template>
              <xsl:if test="$indexes[normalize-space(*[1])=normalize-space(current()/*[1])
                            and count(*)&gt;1]">
                <ul>
                  <xsl:for-each
                      select="$indexes[normalize-space(*[1])=normalize-space(current()/*[1])
                              and count(*)&gt;1]">
                    <xsl:sort select="translate(normalize-space(*[2]),
                                      'aàâäæbcçdeéèêëfghiîïjklmnoôöœpqrstuùûüvwxyz -',
                                      'AAAAABCCDEEEEEFGHIIIJKLMNOOOOPQRSTUUUUVWXYZ')"/>
                    <li>
                      <xsl:apply-templates select="*[2]"/>
                      <xsl:call-template name="index_refs">
                        <xsl:with-param name="indexes" select="$indexes"/>
                        <xsl:with-param name="depth" select="2"/>
                      </xsl:call-template>
                    </li>
                  </xsl:for-each>
                </ul>
              </xsl:if>
            </li>
          </xsl:if>
        </xsl:for-each>
      </ul>
    </xsl:if>

    <xsl:if test="$shift &lt; 26">
      <xsl:call-template name="index_letters">
        <xsl:with-param name="indexes" select="$indexes"/>
        <xsl:with-param name="shift" select="$shift+1"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template index_refs
      =========================================================================
  -->
  <xsl:template name="index_refs">
    <xsl:param name="indexes"/>
    <xsl:param name="depth" select="1"/>
    <xsl:choose>
      <xsl:when test="$depth=1">
        <xsl:for-each
            select="$indexes[
                    normalize-space(*[1])=normalize-space(current()/*[1])
                    and count(*)=1]">
          <xsl:apply-templates select="." mode="ref">
            <xsl:with-param name="position" select="position()"/>
          </xsl:apply-templates>
        </xsl:for-each>
      </xsl:when>
      <xsl:when test="$depth=2">
        <xsl:for-each
            select="$indexes[
                    normalize-space(*[1])=normalize-space(current()/*[1])
                    and normalize-space(*[2])=normalize-space(current()/*[2])]">
          <xsl:apply-templates select="." mode="ref">
            <xsl:with-param name="position" select="position()"/>
          </xsl:apply-templates>
        </xsl:for-each>
      </xsl:when>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template index_symbol
      =========================================================================
  -->
  <xsl:template name="index_symbol">
    <xsl:param name="position"/>
    <xsl:text> ※ </xsl:text>
  </xsl:template>

  <!--
      =========================================================================
      Template tokenize
      =========================================================================
  -->
  <xsl:template name="tokenize">
    <xsl:param name="text"/>
    <xsl:value-of select="translate($text,
                          'àâäæçéèêëîïôöœùûüÀÂÄÆÇÉÈÊËÎÏÔÖŒÙÛÜ ',
                          'aaaaceeeeiiooouuuAAAACEEEEIIOOOUUU_')"/>
  </xsl:template>

  <!--
      =========================================================================
      Templates make_lowercase, make_uppercase
      =========================================================================
  -->
  <xsl:template name="make_lowercase">
    <xsl:param name="text"/>
    <xsl:value-of select="translate($text,
                          'AÀÂÄÆBCÇDEÉÈÊËFGHIÎÏJKLMNOÔÖŒPQRSTUÙÛÜVWXYZ',
                          'aàâäæbcçdeéèêëfghiîïjklmnoôöœpqrstuùûüvwxyz')"/>
  </xsl:template>

  <xsl:template name="make_uppercase">
    <xsl:param name="text"/>
    <xsl:value-of select="translate($text,
                          'aàâäæbcçdeéèêëfghiîïjklmnoôöœpqrstuùûüvwxyz',
                          'AÀÂÄÆBCÇDEÉÈÊËFGHIÎÏJKLMNOÔÖŒPQRSTUÙÛÜVWXYZ')"/>
  </xsl:template>

  <!--
      =========================================================================
      Templates mid (Maestro ID)
      =========================================================================
  -->
  <xsl:template name="mid_section"/>
  <xsl:template name="mid_image"/>


  <!--
      *************************************************************************
                                PROCESSING INSTRUCTIONS
      *************************************************************************
  -->
  <!--
      =========================================================================
      PI tune
      =========================================================================
  -->
  <xsl:template match="processing-instruction('tune')" mode="tune">
    <xsl:param name="argument"/>
    <xsl:if test="contains(., 'target=&quot;html&quot;')
                  and contains(., concat($argument, '='))">
      <xsl:value-of
          select="substring-before(
                  substring-after(., concat($argument, '=&quot;')), '&quot;')"/>
    </xsl:if>
  </xsl:template>

</xsl:stylesheet>
