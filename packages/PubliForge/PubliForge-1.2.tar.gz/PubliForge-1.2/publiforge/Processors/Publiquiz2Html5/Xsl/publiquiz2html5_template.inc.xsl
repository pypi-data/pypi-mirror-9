<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: publiquiz2html5_template.inc.xsl ee9da323210e 2015/02/13 16:10:39 Patrick $ -->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:date="http://exslt.org/dates-and-times"
                xmlns:pf="http://publiforge.org/functions"
                extension-element-prefixes="date pf">

  <!--
      =========================================================================
      Template html_frame
      =========================================================================
  -->
  <xsl:template name="html_frame">
    <xsl:param name="title"/>
    <xsl:param name="nojs"/>
    <xsl:param name="body"/>
    <xsl:text disable-output-escaping="yes">&lt;!DOCTYPE html&gt;
</xsl:text>
    <xsl:comment> Generated by PubliForge, <xsl:value-of select="date:date-time()"/> </xsl:comment>
    <html>
      <xsl:attribute name="xml:lang"><xsl:value-of select="$lang"/></xsl:attribute>
      <xsl:attribute name="lang"><xsl:value-of select="$lang"/></xsl:attribute>
      <head>
        <meta charset="utf-8"/>
        <title><xsl:value-of select="$title"/></title>
        <xsl:choose>
          <xsl:when test="$minify">
            <link rel="StyleSheet" href="{$css_dir}styles.css" type="text/css"/>
            <xsl:if test="not($nojs) or $onefile">
              <script src="{$js_dir}jquery.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <script src="{$js_dir}scripts.js" type="text/javascript"><xsl:text> </xsl:text></script>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <link rel="stylesheet" href="{$css_dir}reset.css" type="text/css"/>
            <link rel="stylesheet" href="{$css_dir}publidoc.css" type="text/css"/>
            <link rel="stylesheet" href="{$css_dir}publiquiz.css" type="text/css"/>
            <link rel="stylesheet" href="{$css_dir}custom.css" type="text/css"/>
            <xsl:if test="not($nojs) or $onefile">
              <script src="{$js_dir}jquery.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <script src="{$js_dir}publidoc.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <script src="{$js_dir}publiquiz.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <script src="{$js_dir}publiquiz_basics.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <xsl:if test="$matching_link">
                <script src="{$js_dir}publiquiz_matching_link.js" type="text/javascript"><xsl:text> </xsl:text></script>
              </xsl:if>
              <xsl:if test="$pip">
                <script src="{$js_dir}publiquiz_pip.js" type="text/javascript"><xsl:text> </xsl:text></script>
              </xsl:if>
              <script src="{$js_dir}publiquiz_loader.js" type="text/javascript"><xsl:text> </xsl:text></script>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </head>
      <xsl:copy-of select="$body"/>
    </html>
  </xsl:template>

  <!--
      =========================================================================
      Template minify_files
      =========================================================================
  -->
  <xsl:template name="minify_files">
    <xsl:if test="$minify">
      <xsl:document
          href="{$path}{$css_dir}styles.css" method="text" encoding="utf-8">
reset.css
publidoc.css
publiquiz.css
custom.css
      </xsl:document>
      <xsl:if test="$js">
        <xsl:document
            href="{$path}{$js_dir}scripts.js" method="text" encoding="utf-8">
publidoc.js
publiquiz.js
publiquiz_basics.js
<xsl:if test="$matching_link">
publiquiz_matching_link.js
</xsl:if>
<xsl:if test="$pip">
publiquiz_pip.js
</xsl:if>
publiquiz_loader.js
        </xsl:document>
      </xsl:if>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template has_toc_children
      =========================================================================
  -->
  <xsl:template name="has_toc_children">
    <xsl:if test=".//division[head/title or ($toc_with_abstract and head/abstract)]
                  or .//topic[head/title or @type='title' or @type='copyright'
                    or @type='dedication' or @type='inscription'
                    or ($toc_with_abstract and head/abstract)]
                  or .//quiz[head/title]
                  or .//section[$toc_section_depth&gt;count(ancestor::section)
                    and (head/title or ($toc_with_abstract and head/abstract))]
                  or ($toc_section_depth&gt;0 and .//bibliography)">1</xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template anchor_levels
      =========================================================================
  -->
  <xsl:template name="anchor_levels"/>

  <!--
      =========================================================================
      Template navigation
      =========================================================================
  -->
  <xsl:template name="navigation">
    <xsl:param name="bottom"/>
    <xsl:if test="not($nonav)">
      <xsl:variable name="previous"
                    select="preceding::topic|preceding::quiz
                            |ancestor::division[$toc_division_depth&gt;count(ancestor::division)]
                            |preceding::division[$toc_division_depth&gt;count(ancestor::division)]"/>
      <div class="pdocNavBar col111">
        <xsl:if test="$bottom"><hr/></xsl:if>
        <div class="colFirst">
          <xsl:choose>
            <xsl:when test="$previous">
              <xsl:choose>
                <xsl:when test="name($previous[last()])='topic'">
                  <a href="{$fid}-tpc-{count(preceding::topic)}{$html_ext}">
                    <img src="{$img_dir}go_previous.png" alt="Previous"/>
                  </a>
                </xsl:when>
                <xsl:when test="name($previous[last()])='quiz'">
                  <a href="{$fid}-quz-{count(preceding::quiz)}{$html_ext}">
                    <img src="{$img_dir}go_previous.png" alt="Previous"/>
                  </a>
                </xsl:when>
                <xsl:otherwise>
                  <a href="{$fid}-div-{count($previous[last()]/preceding::division
                           |$previous[last()]/ancestor::division)+1}{$html_ext}">
                    <img src="{$img_dir}go_previous.png" alt="Previous"/>
                  </a>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise> </xsl:otherwise>
          </xsl:choose>
        </div>

        <div class="col">
          <a href="{$fid}{$html_ext}">
            <img src="{$img_dir}go_up.png" alt="up"/>
          </a>
        </div>

        <div class="colLast">
          <xsl:choose>
            <xsl:when test="name()='division' and division
                            and $toc_division_depth&gt;count(ancestor::division)+1">
              <a href="{$fid}-div-{count(preceding::division|ancestor::division)+2}{$html_ext}">
                <img src="{$img_dir}go_next.png" alt="Next"/>
              </a>
            </xsl:when>
            <xsl:when test="name()='division'">
              <xsl:choose>
                <xsl:when test="name(.//*[name()='topic' or name()='quiz'])='quiz'">
                  <a href="{$fid}-quz-{count(preceding::quiz)+1}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:when>
                <xsl:otherwise>
                  <a href="{$fid}-tpc-{count(preceding::topic)+1}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:when test="name(following::*[1])='division'
                            and $toc_division_depth&gt;count(following::*[1]/ancestor::division)">
              <a href="{$fid}-div-{count(following::*[1]/preceding::division|following::*[1]/ancestor::division)+1}{$html_ext}">
                <img src="{$img_dir}go_next.png" alt="Next"/>
              </a>
            </xsl:when>
            <xsl:when test="name(following::*[name()='topic' or name()='quiz'])='topic'">
              <xsl:choose>
                <xsl:when test="name()='topic'">
                  <a href="{$fid}-tpc-{count(preceding::topic)+2}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:when>
                <xsl:otherwise>
                  <a href="{$fid}-tpc-{count(preceding::topic)+1}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:when test="name(following::*[name()='topic' or name()='quiz'])='quiz'">
              <xsl:choose>
                <xsl:when test="name()='quiz'">
                  <a href="{$fid}-quz-{count(preceding::quiz)+2}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:when>
                <xsl:otherwise>
                  <a href="{$fid}-quz-{count(preceding::quiz)+1}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise> </xsl:otherwise>
          </xsl:choose>
        </div>
        <xsl:if test="not($bottom)"><hr/></xsl:if>
      </div>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_toc_title
      =========================================================================
  -->
  <xsl:template name="quiz_toc_title">
    <xsl:choose>
      <xsl:when test="head/shorttitle">
        <xsl:apply-templates select="head/shorttitle"/>
      </xsl:when>
      <xsl:when test="head/title">
        <xsl:apply-templates select="head/title"/>
      </xsl:when>
    </xsl:choose>
    <xsl:for-each select="head/subtitle">
      <xsl:value-of select="$str_sep"/>
      <xsl:apply-templates mode="link"/>
    </xsl:for-each>
    <xsl:if test="$toc_with_abstract and head/abstract">
      <span class="pdocAbstract">
        <br/><xsl:apply-templates select="head/abstract" mode="link"/>
      </span>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template lead
      =========================================================================
  -->
  <xsl:template name="lead">
    <xsl:if test="not(preceding-sibling::topic) and not(preceding-sibling::quiz)
                  and (not($toc_division_depth) or count(ancestor::division)&gt;1)
                  and (parent::division/head/title or parent::division/front)">
      <xsl:for-each select="ancestor::division">
        <xsl:if test="not($toc_division_depth) or count(ancestor::division)">
          <xsl:apply-templates select="." mode="lead"/>
        </xsl:if>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_id
      =========================================================================
  -->
  <xsl:template name="quiz_id">
    <xsl:choose>
      <xsl:when test="ancestor::composite and name()='subquiz'">
        <xsl:value-of
            select="concat($fid, '-',
                    count(ancestor::composite/ancestor::quiz/preceding::quiz)+1,
                    '-', count(preceding-sibling::subquiz)+1)"/>
      </xsl:when>
      <xsl:when test="ancestor::composite">
        <xsl:value-of
            select="concat($fid, '-',
                    count(ancestor::composite/ancestor::quiz/preceding::quiz)+1,
                    '-', count(ancestor::subquiz/preceding-sibling::subquiz)+1)"/>
      </xsl:when>
      <xsl:when test="name()='quiz'">
        <xsl:value-of select="concat($fid, '-', count(preceding::quiz)+1)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of
            select="concat($fid, '-', count(ancestor::quiz/preceding::quiz)+1)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_engine
      =========================================================================
  -->
  <xsl:template name="quiz_engine">
    <xsl:param name="node" select="."/>
    <xsl:choose>
      <xsl:when test="$node/choices-radio">choices-radio</xsl:when>
      <xsl:when test="$node/choices-check">choices-check</xsl:when>
      <xsl:when test="$node/blanks-fill">blanks-fill</xsl:when>
      <xsl:when test="$node/blanks-select">blanks-select</xsl:when>
      <xsl:when test="$node/blanks-char">blanks-char</xsl:when>
      <xsl:when test="$node/pointing">pointing</xsl:when>
      <xsl:when test="$node/pointing-categories">pointing-categories</xsl:when>
      <xsl:when test="$node/matching">matching</xsl:when>
      <xsl:when test="$node/sort">sort</xsl:when>
      <xsl:when test="$node/categories">categories</xsl:when>
      <xsl:when test="$node/pip">pip</xsl:when>
      <xsl:when test="$node/production">production</xsl:when>
      <xsl:when test="$node/composite">composite</xsl:when>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_engine_options
      =========================================================================
  -->
  <xsl:template name="quiz_engine_options">
    <xsl:if test="(choices-check and $mode_choices_check='radio')
                  or pointing/@type='radio'">radio </xsl:if>

    <xsl:if test="choices-radio/@shuffle='true' or choices-check/@shuffle='true'
                  or sort/@shuffle='true'">shuffle </xsl:if>

    <xsl:if test="blanks-fill/@strict='true'">strict total </xsl:if>

    <xsl:if test="blanks-select/@multiple='true' or categories/@multiple='true'
                  or matching/@multiple='true' or pip/@multiple='true'"
            >multiple </xsl:if>

    <xsl:if test="matching and
                  ((not(processing-instruction('argument')) and $mode_matching='link')
                  or processing-instruction('argument')='link')">link </xsl:if>

    <xsl:if test="categories and
                  ((not(processing-instruction('argument')) and $mode_categories='color')
                  or processing-instruction('argument')='color')">color </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_messages
      =========================================================================
  -->
  <xsl:template name="quiz_messages">
    <xsl:call-template name="quiz_message">
      <xsl:with-param name="msg" select="$i18n_congratulate1"/>
    </xsl:call-template>
    <xsl:call-template name="quiz_message">
      <xsl:with-param name="msg" select="$i18n_congratulate2"/>
    </xsl:call-template>
    <xsl:call-template name="quiz_message">
      <xsl:with-param name="msg" select="$i18n_congratulate3"/>
    </xsl:call-template>
    <xsl:call-template name="quiz_message">
      <xsl:with-param name="msg" select="$i18n_congratulate4"/>
    </xsl:call-template>
    <xsl:call-template name="quiz_message">
      <xsl:with-param name="msg" select="$i18n_congratulate5"/>
    </xsl:call-template>
    <xsl:call-template name="quiz_message">
      <xsl:with-param name="msg" select="$i18n_congratulate6"/>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="quiz_message">
    <xsl:param name="msg"/>
    <xsl:if test="$msg and contains($msg, ']')">
      <div class="pquizMessage hidden"
           data-score-range="{substring-after(substring-before($msg, ']'), '[')}">
        <xsl:value-of select="substring-after($msg, ']')"/>
      </div>
    </xsl:if>
  </xsl:template>
  
  <!--
      =========================================================================
      Template quiz_submit
      =========================================================================
  -->
  <xsl:template name="quiz_submit">
    <div class="pquizSubmit">
      <div id="pquizGlobalScore" class="pquizScore hidden">
        <xsl:text> </xsl:text>
      </div>
      <input type="submit" id="submit" class="pquizButton"
             value="{$i18n_validate}"/>
      <xsl:if test="$max_retry">
        <a class="pquizButton hidden" id="pquizRetry">
          <xsl:value-of select="$i18n_retry"/>
        </a>
      </xsl:if>
      <a class="pquizButton hidden" id="pquizRightAnswer">
        <xsl:value-of select="$i18n_right_answer"/>
      </a>
      <a class="pquizButton hidden" id="pquizUserAnswer">
        <xsl:value-of select="$i18n_user_answer"/>
      </a>
    </div>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_configuration
      =========================================================================
  -->
  <xsl:template name="quiz_configuration">
    <xsl:if test="$max_retry">
      <div id="quiz_nb_retry" class="hidden">
        <xsl:value-of select="$max_retry"/>
      </div>
    </xsl:if>
    <xsl:if test="$base_score">
      <div id="quiz_base_score" class="hidden">
        <xsl:value-of select="$base_score"/>
      </div>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template make_id
      =========================================================================
  -->
  <xsl:template name="make_id">
    <xsl:param name="item"/>
    <xsl:choose>
      <xsl:when test="$item/video">
        <xsl:value-of
            select="translate(
                    pf:make_id(string($item/video/@id), 'class'), '.', '')"/>
      </xsl:when>
      <xsl:when test="$item/audio">
        <xsl:value-of
            select="translate(
                    pf:make_id(string($item/audio/@id), 'class'), '.', '')"/>
      </xsl:when>
      <xsl:when test="$item/image">
        <xsl:value-of
            select="translate(
                    pf:make_id(string($item/image/@id), 'class'), '.', '')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of
            select="translate(
                    pf:make_id(normalize-space($item), 'class'), '.', '')"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template blank_num, blank_separator
      =========================================================================
  -->
  <xsl:template name="blank_num">
    <xsl:choose>
      <xsl:when test="ancestor::composite">
        <xsl:value-of
            select="format-number(count(preceding::blank)
                    -count(ancestor::subquiz/preceding::blank)+1, '000')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of
            select="format-number(count(preceding::blank)
                    -count(ancestor::quiz/preceding::blank)+1, '000')"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="blank_separator">
    <xsl:choose>
      <xsl:when test="ancestor::composite">
        <xsl:if test="count(following::blank)-count(ancestor::subquiz/following::blank)"
                >::</xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:if test="count(following::blank)-count(ancestor::quiz/following::blank)"
                >::</xsl:if>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template point_num, point_separator
      =========================================================================
  -->
  <xsl:template name="point_num">
    <xsl:choose>
      <xsl:when test="ancestor::composite">
        <xsl:value-of select="format-number(
                              count(preceding::point)
                              -count(ancestor::subquiz/preceding::point)+1,
                              '000')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="format-number(
                              count(preceding::point)
                              -count(ancestor::quiz/preceding::point)+1,
                              '000')"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="point_separator">
    <xsl:choose>
      <xsl:when test="ancestor::composite">
        <xsl:if test="count(following::point[@ref])
                      -count(ancestor::subquiz/following::point[@ref])">::</xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:if test="count(following::point[@ref])
                      -count(ancestor::quiz/following::point[@ref])">::</xsl:if>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>
