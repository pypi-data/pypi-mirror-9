<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: publidoc2epub3_opf.inc.xsl 5545df3f5bd2 2015/02/03 22:44:36 Patrick $ -->
<xsl:stylesheet version="1.1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns="http://www.idpf.org/2007/opf"
                xmlns:date="http://exslt.org/dates-and-times"
                extension-element-prefixes="date">

  <!--
      =========================================================================
      Template package_opf
      =========================================================================
  -->
  <xsl:template name="package_opf">
    <xsl:document href="{$path}package.opf" method="xml"
                  encoding="utf-8" indent="yes">
      <xsl:comment> Generated by PubliForge, <xsl:value-of select="date:date-time()"/> </xsl:comment>
      <package version="3.0" unique-identifier="uid"
               prefix="rendition: http://www.idpf.org/vocab/rendition/#">
        <xsl:attribute name="xml:lang">
          <xsl:value-of select="$lang"/>
        </xsl:attribute>
        <xsl:call-template name="metadata"/>
        <xsl:call-template name="manifest"/>
        <xsl:call-template name="spine"/>
        <xsl:call-template name="guide"/>
      </package>
    </xsl:document>
  </xsl:template>


  <!--
      *************************************************************************
                                      METADATA
      *************************************************************************
  -->
  <!--
      =========================================================================
      Template metadata, metadata_extra
      =========================================================================
  -->
  <xsl:template name="metadata">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/"
              xmlns:dcterms="http://purl.org/dc/terms/"
              xmlns:opf="http://www.idpf.org/2007/opf">
      <!-- ean/identifier -->
      <xsl:call-template name="metadata_identifier"/>
      <!-- title -->
      <dc:title id="title">
        <xsl:apply-templates select="head/title" mode="text"/>
      </dc:title>
      <meta refines="#title" property="title-type">main</meta>
      <!-- language -->
      <dc:language><xsl:value-of select="$lang"/></dc:language>
      <!-- writing mode -->
      <xsl:call-template name="writing_mode"/>
      <!-- creators/contributors -->
      <xsl:apply-templates select="head/contributors" mode="metadata"/>
      <!-- publisher -->
      <xsl:choose>
        <xsl:when test="head/contributors/contributor[role='publisher']/label">
          <dc:publisher>
            <xsl:value-of select="head/contributors/contributor[role='publisher']/label"/>
          </dc:publisher>
        </xsl:when>
        <xsl:when test="$publisher_label">
          <dc:publisher><xsl:value-of select="$publisher_label"/></dc:publisher>
        </xsl:when>
      </xsl:choose>
      <!-- date -->
      <xsl:if test="head/date">
        <dc:date><xsl:value-of select="head/date/@value"/></dc:date>
      </xsl:if>
      <!-- copyright -->
      <xsl:choose>
        <xsl:when test="head/copyright">
          <xsl:apply-templates select="head/copyright" mode="metadata"/>
        </xsl:when>
        <xsl:when test="$publisher_label">
          <dc:rights>Copyright <xsl:value-of select="$publisher_label"/></dc:rights>
        </xsl:when>
        <xsl:when test="head/contributors/contributor[role='publisher']/label">
          <dc:rights>Copyright <xsl:value-of select="head/contributors/contributor[role='publisher']/label"/></dc:rights>
        </xsl:when>
      </xsl:choose>
      <!-- subject, keyword -->
      <xsl:apply-templates select="head/subjectset/subject" mode="metadata"/>
      <xsl:apply-templates select="head/keywordset/keyword" mode="metadata"/>
      <!-- abstract -->
      <xsl:if test="head/abstract">
        <dc:description>
          <xsl:apply-templates select="head/abstract/p" mode="text"/>
        </dc:description>
      </xsl:if>
      <!-- cover -->
      <xsl:choose>
        <xsl:when test="$cover and not($cover='=')">
          <meta name="cover" content="i_{translate($fid, ' ', '_')}_cover"/>
        </xsl:when>
        <xsl:when test="head/cover and ($img or $cover='=')">
          <meta name="cover" content="i_{translate(head/cover/image/@id, ' ', '_')}"/>
        </xsl:when>
      </xsl:choose>
      <!-- extra metadata -->
      <xsl:call-template name="metadata_extra"/>
      <!-- modified -->
      <meta property="dcterms:modified">
        <xsl:value-of select="concat(substring-before(date:date-time(), '+'), 'Z')"/>
      </meta>
    </metadata>
  </xsl:template>

  <xsl:template name="metadata_extra">
    <meta property="rendition:layout">reflowable</meta>

    <xsl:if test="$aud and .//topic[.//smil[@audio]
                  or (.//section/head/audio[@type='smil'] and .//smil)]">
      <meta property="media:active-class">-epub-media-overlay-active</meta>
      <meta property="media:duration">00:00:08</meta>
      <xsl:for-each select=".//topic[.//smil[@audio]
                            or (.//section/head/audio[@type='smil'] and .//smil)]">
        <meta property="media:duration"
              refines="#s_{$fid}-tpc-{count(preceding::topic)+1}">00:00:08</meta>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template metadata_identifier
      =========================================================================
  -->
  <xsl:template name="metadata_identifier"
                xmlns:dc="http://purl.org/dc/elements/1.1/">
    <xsl:choose>
      <xsl:when test="$ean or head/identifier[
                      @type='ean' and (@for='epub' or @for='epub3' or not(@for))]">
        <dc:identifier id="uid">
          <xsl:call-template name="identifier"/>
        </dc:identifier>
        <meta property="identifier-type" refines="#uid" scheme="onix:codelist5">15</meta>
      </xsl:when>
      <xsl:otherwise>
        <dc:identifier id="uid">
          <xsl:call-template name="identifier"/>
        </dc:identifier>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template writing_mode
      =========================================================================
  -->
  <xsl:template name="writing_mode">
    <meta name="primary-writing-mode" content="{$writing_mode}"/>
  </xsl:template>

  <!--
      =========================================================================
      contributor(s) mode metadata
      =========================================================================
  -->
  <xsl:template match="contributors" mode="metadata">
    <xsl:apply-templates select="contributor" mode="metadata"/>
  </xsl:template>

  <xsl:template match="contributor" mode="metadata"
                xmlns:dc="http://purl.org/dc/elements/1.1/"
                xmlns:opf="http://www.idpf.org/2007/opf">
    <xsl:for-each select="role">
      <xsl:choose>
        <xsl:when test=".='publisher'"/>
        <!-- contributor -->
        <xsl:when test=".='packager'">
          <dc:contributor id="contributor{count(preceding::contributor)}">
            <xsl:if test="../firstname">
              <xsl:apply-templates select="../firstname" mode="text"/>
              <xsl:text> </xsl:text>
            </xsl:if>
            <xsl:apply-templates select="../lastname|../label" mode="text"/>
          </dc:contributor>
          <meta property="role" refines="#contributor{count(preceding::contributor)}"
                scheme="marc:relators">mrk</meta>
        </xsl:when>
        <!-- creator -->
        <xsl:otherwise>
          <dc:creator id="creator{count(preceding::contributor)}">
            <xsl:if test="../firstname">
              <xsl:apply-templates select="../firstname" mode="text"/>
              <xsl:text> </xsl:text>
            </xsl:if>
            <xsl:apply-templates select="../lastname|../label" mode="text"/>
          </dc:creator>
          <meta property="role" refines="#creator{count(preceding::contributor)}"
                scheme="marc:relators">
            <xsl:choose>
              <xsl:when test=".='illustrator'">ill</xsl:when>
              <xsl:otherwise>aut</xsl:otherwise>
            </xsl:choose>
          </meta>
          <meta property="file-as" refines="#creator{count(preceding::owner)}">
            <xsl:apply-templates select="../lastname|../label" mode="text"/>
            <xsl:if test="../firstname">
              <xsl:text>, </xsl:text>
              <xsl:apply-templates select="../firstname" mode="text"/>
            </xsl:if>
          </meta>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>

  <!--
      =========================================================================
      copyright mode metadata
      =========================================================================
  -->
  <xsl:template match="copyright" mode="metadata"
                xmlns:dc="http://purl.org/dc/elements/1.1/">
    <dc:rights>Copyright <xsl:value-of select="normalize-space()"/></dc:rights>
  </xsl:template>

  <!--
      =========================================================================
      subject, keyword mode metadata
      =========================================================================
  -->
  <xsl:template match="subject" mode="metadata"
                xmlns:dc="http://purl.org/dc/elements/1.1/">
    <dc:subject><xsl:value-of select="."/></dc:subject>
  </xsl:template>

  <xsl:template match="keyword" mode="metadata"/>


  <!--
      *************************************************************************
                                       MANIFEST
      *************************************************************************
  -->
  <!--
      =========================================================================
      Template manifest, manifest_extra
      =========================================================================
  -->
  <xsl:template name="manifest">
    <manifest>
      <item id="ncx" href="toc.ncx" media-type="application/x-dtbncx+xml"/>
      <!-- XHTML -->
      <item id="h_{translate($fid, ' ', '_')}-nav"
            href="{$fid}-nav{$html_ext}" media-type="application/xhtml+xml"
            properties="nav"/>
      <xsl:if test="head/cover or ($cover and not($cover='='))">
        <item id="h_{translate($fid, ' ', '_')}-cover"
              href="{$fid}-cover{$html_ext}" media-type="application/xhtml+xml"/>
      </xsl:if>
      <xsl:if test="$toc">
        <item id="h_{translate($fid, ' ', '_')}-toc"
              href="{$fid}-toc{$html_ext}" media-type="application/xhtml+xml"/>
      </xsl:if>
      <xsl:apply-templates select="//division|//topic|//quiz" mode="manifest"/>
      <xsl:if test="$index and .//index">
        <item id="h_{translate($fid, ' ', '_')}-index"
              href="{$fid}-index{$html_ext}" media-type="application/xhtml+xml"/>
      </xsl:if>
      <xsl:if test=".//note">
        <item id="h_{translate($fid, ' ', '_')}-not"
              href="{$fid}-not{$html_ext}" media-type="application/xhtml+xml"/>
        <xsl:apply-templates select=".//note" mode="manifest"/>
      </xsl:if>
      <!-- Images -->
      <xsl:choose>
        <xsl:when test="$cover and not($cover='=')">
          <item id="i_{translate($fid, ' ', '_')}_cover" href="{$img_dir}{$cover}"
                properties="cover-image">
            <xsl:call-template name="media_type_attribute">
              <xsl:with-param name="media">image</xsl:with-param>
              <xsl:with-param name="ext" select="concat('.', substring-after($cover, '.'))"/>
            </xsl:call-template>
          </item>
        </xsl:when>
        <xsl:when test="head/cover and ($img or $cover='=')">
          <xsl:apply-templates select="head/cover/image" mode="manifest"/>
        </xsl:when>
      </xsl:choose>
      <xsl:if test="$img">
        <xsl:apply-templates select=".//image[name(..)!='cover']" mode="manifest"/>
      </xsl:if>
      <xsl:if test="$js">
        <item id="i_pulse" href="Images/pulse.gif" media-type="image/gif"/>
      </xsl:if>
      <!-- Math -->
      <xsl:if test="$math">
        <xsl:apply-templates select=".//math[latex]" mode="manifest"/>
      </xsl:if>
      <!-- Audios -->
      <xsl:if test="$aud">
        <xsl:apply-templates select=".//audio" mode="manifest"/>
      </xsl:if>
      <!-- Video -->
      <xsl:if test="$vid">
        <xsl:apply-templates select=".//video" mode="manifest"/>
      </xsl:if>
      <!-- CSS -->
      <xsl:call-template name="css_manifest"/>
      <!-- JavaScript -->
      <xsl:call-template name="js_manifest"/>
      <!-- Extra -->
      <xsl:call-template name="manifest_extra"/>
    </manifest>
  </xsl:template>

  <xsl:template name="manifest_extra"/>

  <!--
      =========================================================================
      division, topic, quiz, note mode manifest
      =========================================================================
  -->
  <xsl:template match="division" mode="manifest">
    <xsl:if test="$toc_division_depth&gt;count(ancestor::division)">
    <item id="h_{translate($fid, ' ', '_')}-div-{count(preceding::division|ancestor::division)+1}"
          href="{$fid}-div-{count(preceding::division|ancestor::division)+1}{$html_ext}"
          media-type="application/xhtml+xml"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="topic" mode="manifest">
    <item id="h_{translate($fid, ' ', '_')}-tpc-{count(preceding::topic)+1}"
          href="{$fid}-tpc-{count(preceding::topic)+1}{$html_ext}"
          media-type="application/xhtml+xml">
      <xsl:if test="$js or ($img_ext='.svg' and .//media/image)
                    or .//image/processing-instruction('tune')[
                    contains(., 'target=&quot;html&quot;')
                    and contains(., 'format=&quot;svg&quot;')]">
        <xsl:attribute name="properties">
          <xsl:if test="$js">scripted</xsl:if>
          <xsl:if test="($img_ext='.svg' and .//media/image)
                        or .//image/processing-instruction('tune')[
                        contains(., 'target=&quot;html&quot;')
                        and contains(., 'format=&quot;svg&quot;')]">
            <xsl:if test="$js"><xsl:text> </xsl:text></xsl:if>
            <xsl:text>svg</xsl:text>
          </xsl:if>
        </xsl:attribute>
      </xsl:if>
      <xsl:if test="$aud and
                    (.//smil[@audio] or (.//section/head/audio[@type='smil'] and .//smil))">
        <xsl:attribute name="media-overlay">
          <xsl:value-of select="concat('s_', translate($fid, ' ', '_'),
                                '-tpc-', count(preceding::topic)+1)"/>
        </xsl:attribute>
      </xsl:if>
    </item>
    <xsl:if test="$aud and
                  (.//smil[@audio] or (.//section/head/audio[@type='smil'] and .//smil))">
      <item id="s_{translate($fid, ' ', '_')}-tpc-{count(preceding::topic)+1}"
            href="{$fid}-tpc-{count(preceding::topic)+1}.smil"
            media-type="application/smil+xml"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="quiz" mode="manifest">
    <item id="h_{translate($fid, ' ', '_')}-quz-{count(preceding::quiz)+1}"
          href="{$fid}-quz-{count(preceding::quiz)+1}{$html_ext}"
          media-type="application/xhtml+xml">
      <xsl:attribute name="properties">scripted</xsl:attribute>
    </item>
  </xsl:template>

  <xsl:template match="note" mode="manifest">
    <item id="h_{translate($fid, ' ', '_')}-not-{count(preceding::note)+1}"
          href="{$fid}-not-{count(preceding::note)+1}{$html_ext}"
          media-type="application/xhtml+xml"/>
  </xsl:template>

  <!--
      =========================================================================
      image mode manifest
      =========================================================================
  -->
  <xsl:template match="image" mode="manifest">
    <xsl:if test="count(preceding::image[@id=current()/@id])=0">
      <item id="i_{translate(@id, ' ', '_')}">
        <xsl:attribute name="href">
          <xsl:value-of select="concat($img_dir, @id)"/>
          <xsl:call-template name="image_extension"/>
        </xsl:attribute>
        <xsl:call-template name="media_type_attribute">
          <xsl:with-param name="media">image</xsl:with-param>
          <xsl:with-param name="ext">
            <xsl:call-template name="image_extension"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:if test="ancestor::cover">
          <xsl:attribute name="properties">cover-image</xsl:attribute>
        </xsl:if>
      </item>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      math mode manifest
      =========================================================================
  -->
  <xsl:template match="math" mode="manifest">
    <item id="i_tex{count(preceding::math)+1}">
      <xsl:attribute name="href">
        <xsl:value-of
            select="concat($math_dir, $fid, '-tex-', count(preceding::math)+1,
                    '.png')"/>
      </xsl:attribute>
      <xsl:attribute name="media-type">image/png</xsl:attribute>
    </item>
  </xsl:template>

  <!--
      =========================================================================
      audio mode manifest
      =========================================================================
  -->
  <xsl:template match="audio" mode="manifest">
    <xsl:if test="$aud and count(preceding::audio[@id=current()/@id])=0">
      <item id="a_{translate(@id, ' ', '_')}1" href="{$aud_dir}{@id}{$aud_ext1}">
        <xsl:call-template name="media_type_attribute">
          <xsl:with-param name="media">audio</xsl:with-param>
          <xsl:with-param name="ext" select="$aud_ext1"/>
        </xsl:call-template>
      </item>
      <xsl:if test="$aud_ext2!='-' and $aud_ext1!=$aud_ext2">
        <item id="a_{translate(@id, ' ', '_')}2" href="{$aud_dir}{@id}{$aud_ext2}">
        <xsl:call-template name="media_type_attribute">
          <xsl:with-param name="media">audio</xsl:with-param>
          <xsl:with-param name="ext" select="$aud_ext2"/>
        </xsl:call-template>
        </item>
      </xsl:if>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      video mode manifest
      =========================================================================
  -->
  <xsl:template match="video" mode="manifest">
    <xsl:if test="$vid and count(preceding::video[@id=current()/@id])=0">
      <item id="v_{translate(@id, ' ', '_')}1" href="{$vid_dir}{@id}{$vid_ext1}">
        <xsl:call-template name="media_type_attribute">
          <xsl:with-param name="media">video</xsl:with-param>
          <xsl:with-param name="ext" select="$vid_ext1"/>
        </xsl:call-template>
      </item>
      <xsl:if test="$vid_ext2!='-' and $aud_ext1!=$vid_ext2">
        <item id="v_{translate(@id, ' ', '_')}2" href="{$vid_dir}{@id}{$vid_ext2}">
          <xsl:call-template name="media_type_attribute">
            <xsl:with-param name="media">video</xsl:with-param>
            <xsl:with-param name="ext" select="$vid_ext2"/>
          </xsl:call-template>
        </item>
      </xsl:if>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template css_manifest
      =========================================================================
  -->
  <xsl:template name="css_manifest">
    <xsl:choose>
      <xsl:when test="$minify">
        <item id="c_styles" href="{$css_dir}styles.css" media-type="text/css"/>
      </xsl:when>
      <xsl:otherwise>
        <item id="c_publidoc" href="{$css_dir}publidoc.css" media-type="text/css"/>
        <item id="c_custom" href="{$css_dir}custom.css" media-type="text/css"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template js_manifest
      =========================================================================
  -->
  <xsl:template name="js_manifest">
    <xsl:if test="$js">
      <xsl:choose>
        <xsl:when test="$minify">
          <item id="j_jquery" href="{$js_dir}jquery.js" media-type="application/javascript"/>
          <item id="j_scripts" href="{$js_dir}scripts.js" media-type="application/javascript"/>
        </xsl:when>
        <xsl:otherwise>
          <item id="j_jquery" href="{$js_dir}jquery.js" media-type="application/javascript"/>
          <item id="j_publidoc" href="{$js_dir}publidoc.js" media-type="application/javascript"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>


  <!--
      *************************************************************************
                                        SPINE
      *************************************************************************
  -->
  <!--
      =========================================================================
      Template spine
      =========================================================================
  -->
  <xsl:template name="spine">
    <spine toc="ncx">
      <xsl:attribute name="page-progression-direction">
        <xsl:choose>
          <xsl:when test="$writing_mode='horizontal-rl'
                          or $writing_mode='vertical-rl'">rtl</xsl:when>
          <xsl:otherwise>ltr</xsl:otherwise>
        </xsl:choose>
      </xsl:attribute>
      <xsl:if test="head/cover or ($cover and not($cover='='))">
        <itemref idref="h_{translate($fid, ' ', '_')}-cover" linear="no"/>
      </xsl:if>
      <!-- <itemref idref="h_{translate($fid, ' ', '_')}-nav" linear="no"/> -->
      <xsl:if test="$toc">
        <itemref idref="h_{translate($fid, ' ', '_')}-toc"/>
      </xsl:if>
      <xsl:apply-templates select="../topic|division|topic" mode="spine"/>
      <xsl:if test="$index and .//index">
        <itemref idref="h_{translate($fid, ' ', '_')}-index"/>
      </xsl:if>
      <xsl:if test=".//note">
        <itemref idref="h_{translate($fid, ' ', '_')}-not"/>  <!-- linear="no" -->
        <xsl:apply-templates select=".//note" mode="spine"/>
      </xsl:if>
    </spine>
  </xsl:template>

  <!--
      =========================================================================
      division, topic, quiz, note mode spine
      =========================================================================
  -->
  <xsl:template match="division" mode="spine">
    <xsl:if test="$toc_division_depth&gt;count(ancestor::division)">
      <itemref idref="h_{translate($fid, ' ', '_')}-div-{count(preceding::division|ancestor::division)+1}"/>
    </xsl:if>
    <xsl:apply-templates select="division|topic|quiz" mode="spine"/>
  </xsl:template>

  <xsl:template match="topic" mode="spine">
    <itemref idref="h_{translate($fid, ' ', '_')}-tpc-{count(preceding::topic)+1}"/>
  </xsl:template>

  <xsl:template match="note" mode="spine">
    <itemref idref="h_{translate($fid, ' ', '_')}-not-{count(preceding::note)+1}"/>  <!-- linear="no" -->
  </xsl:template>


  <!--
      *************************************************************************
                                       GUIDE
      *************************************************************************
  -->
  <!--
      =========================================================================
      Template guide
      =========================================================================
  -->
  <xsl:template name="guide">
    <guide>
      <xsl:if test="head/cover or ($cover and not($cover='='))">
        <reference type="cover" href="{$fid}-cover{$html_ext}" title="{$i18n_cover}"/>
      </xsl:if>
      <xsl:choose>
        <xsl:when test="$toc">
          <reference type="toc" href="{$fid}-toc{$html_ext}" title="{$i18n_toc}"/>
        </xsl:when>
        <xsl:otherwise>
          <reference type="toc" href="{$fid}-nav{$html_ext}" title="{$i18n_toc}"/>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select=".//topic" mode="guide"/>
      <!-- <xsl:choose> -->
      <!--   <xsl:when test=".//topic[@type='title' and count(preceding::topic)=0] -->
      <!--                   and .//topic[@type='copyright' and count(preceding::topic)=1] -->
      <!--                   and count(.//topic)&gt;2"> -->
      <!--     <reference type="text" href="{$fid}-tpc-3{$html_ext}" title="{$i18n_text}"/> -->
      <!--   </xsl:when> -->
      <!--   <xsl:when test=".//topic[@type='title' and count(preceding::topic)=0] -->
      <!--                   and count(.//topic)&gt;1"> -->
      <!--     <reference type="text" href="{$fid}-tpc-2{$html_ext}" title="{$i18n_text}"/> -->
      <!--   </xsl:when> -->
      <!--   <xsl:when test="//topic"> -->
      <!--     <reference type="text" href="{$fid}-tpc-1{$html_ext}" title="{$i18n_text}"/> -->
      <!--   </xsl:when> -->
      <!--   <xsl:when test="//quiz"> -->
      <!--     <reference type="text" href="{$fid}-quz-1{$html_ext}" title="{$i18n_text}"/> -->
      <!--   </xsl:when> -->
      <!-- </xsl:choose> -->
      <reference type="text" href="{$fid}-tpc-1{$html_ext}" title="{$i18n_text}"/>
      <xsl:if test="$index and .//index">
        <reference type="index" href="{$fid}-index{$html_ext}" title="{$i18n_index}"/>
      </xsl:if>
    </guide>
  </xsl:template>

  <!--
      =========================================================================
      topic mode guide
      =========================================================================
  -->
  <xsl:template match="topic" mode="guide">
    <xsl:choose>
      <xsl:when test="@type='title' and not(head/title)
                      and not(preceding::topic[@type='title'])">
        <reference type="{@type}" href="{$fid}-tpc-{count(preceding::topic)+1}{$html_ext}"
                   title="{$i18n_title_page}"/>
      </xsl:when>
      <xsl:when test="@type='title' and not(preceding::topic[@type='title'])">
        <reference type="{@type}" href="{$fid}-tpc-{count(preceding::topic)+1}{$html_ext}"
                   title="{head/title}"/>
      </xsl:when>
      <xsl:when test="@type='copyright' and not(head/title)">
        <reference type="{@type}" href="{$fid}-tpc-{count(preceding::topic)+1}{$html_ext}"
                   title="{$i18n_copyright}"/>
      </xsl:when>
      <xsl:when test="@type='copyright'">
        <reference type="{@type}" href="{$fid}-tpc-{count(preceding::topic)+1}{$html_ext}"
                   title="{head/title}"/>
      </xsl:when>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>
