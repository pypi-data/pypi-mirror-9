# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("ryan-desktop", "password"),
               BuildSlave("young", "password")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

#from buildbot.changes.gitpoller import GitPoller
#c['change_source'] = GitPoller(
#        'git://microfluidics.utoronto.ca/microdrop.git',
#        workdir='gitpoller-workdir', branch='master',
#        pollinterval=300)
from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["Win7,Py2.7", "WinXP,Py2.7"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.python import PyLint

factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='git://microfluidics.utoronto.ca/microdrop.git', mode='copy', submodules=True))
factory.addStep(ShellCommand(command=["python microdrop/tests/update_dmf_control_board.py"]))
factory.addStep(ShellCommand(command=["cd microdrop/plugins/dmf_control_board & scons"]))
factory.addStep(ShellCommand(command=["nosetests", "--with-path=microdrop", "-vv"]))
factory.addStep(ShellCommand(command=["python install_dependencies.py"]))
factory.addStep(ShellCommand(command=["scons", "--wix-sval"]))
factory.addStep(PyLint(command=["pylint", "--output-format=parseable", "microdrop"], flunkOnFailure=False))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="Win7,Py2.7",
      slavenames=["ryan-desktop"],
      factory=factory))
c['builders'].append(
    BuilderConfig(name="WinXP,Py2.7",
      slavenames=["young"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Microdrop"
c['titleURL'] = "http://microfluidics.utoronto.ca/microdrop"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http:///microfluidics.utoronto.ca/buildbot/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

from buildbot.status.mail import MailNotifier
mn = MailNotifier(mode='failing',
                  fromaddr='wheeler.lab.server@gmail.com',
                  sendToInterestedUsers=True,
                  extraRecipients=['microdrop-dev@googlegroups.com'],
                  useTls=True, relayhost="smtp.gmail.com", smtpPort=587,
                  smtpUser="wheeler.lab.server@gmail.com", smtpPassword='password')
c['status'].append(mn)
