\select@language {english}
\contentsline {chapter}{\numberline {1}Start Here:}{1}{chapter.1}
\contentsline {section}{\numberline {1.1}Installation}{1}{section.1.1}
\contentsline {subsection}{\numberline {1.1.1}The easy way}{1}{subsection.1.1.1}
\contentsline {subsection}{\numberline {1.1.2}The most up-to-date code:}{1}{subsection.1.1.2}
\contentsline {subsection}{\numberline {1.1.3}Prequisites}{1}{subsection.1.1.3}
\contentsline {subsection}{\numberline {1.1.4}Installing easy\_install}{1}{subsection.1.1.4}
\contentsline {subsection}{\numberline {1.1.5}Installing pip}{2}{subsection.1.1.5}
\contentsline {subsection}{\numberline {1.1.6}Graphical flowcharts The most up-to-date code:}{2}{subsection.1.1.6}
\contentsline {section}{\numberline {1.2}\textbf {Ruffus} Manual: List of Chapters and Example code}{2}{section.1.2}
\contentsline {section}{\numberline {1.3}\textbf {Chapter 1}: An introduction to basic \emph {Ruffus} syntax}{4}{section.1.3}
\contentsline {subsection}{\numberline {1.3.1}Overview}{4}{subsection.1.3.1}
\contentsline {subsection}{\numberline {1.3.2}Importing \emph {Ruffus}}{4}{subsection.1.3.2}
\contentsline {subsection}{\numberline {1.3.3}\emph {Ruffus} decorators}{4}{subsection.1.3.3}
\contentsline {subsection}{\numberline {1.3.4}Your first \emph {Ruffus} pipeline}{5}{subsection.1.3.4}
\contentsline {subsubsection}{1. Write down the file names}{5}{subsubsection*.4}
\contentsline {subsubsection}{2. Write the python functions for each stage}{6}{subsubsection*.5}
\contentsline {subsubsection}{3. Link the python functions into a pipeline}{7}{subsubsection*.6}
\contentsline {subsubsection}{4. @transform syntax}{8}{subsubsection*.7}
\contentsline {subsubsection}{5. Run the pipeline!}{8}{subsubsection*.8}
\contentsline {section}{\numberline {1.4}\textbf {Chapter 2}: Transforming data in a pipeline with \emph {@transform}}{9}{section.1.4}
\contentsline {subsection}{\numberline {1.4.1}Review}{9}{subsection.1.4.1}
\contentsline {subsection}{\numberline {1.4.2}Task functions as recipes}{9}{subsection.1.4.2}
\contentsline {subsection}{\numberline {1.4.3}\emph {@transform} is a 1 to 1 operation}{10}{subsection.1.4.3}
\contentsline {subsubsection}{A pair of files as the \textbf {Input}}{10}{subsubsection*.9}
\contentsline {subsection}{\numberline {1.4.4}\textbf {Input} and \textbf {Output} parameters}{11}{subsection.1.4.4}
\contentsline {section}{\numberline {1.5}\textbf {Chapter 3}: More on \texttt {@transform}-ing data}{11}{section.1.5}
\contentsline {subsection}{\numberline {1.5.1}Review}{12}{subsection.1.5.1}
\contentsline {subsection}{\numberline {1.5.2}Running pipelines in parallel}{12}{subsection.1.5.2}
\contentsline {subsection}{\numberline {1.5.3}Up-to-date jobs are not re-run unnecessarily}{12}{subsection.1.5.3}
\contentsline {subsection}{\numberline {1.5.4}Defining pipeline tasks out of order}{13}{subsection.1.5.4}
\contentsline {subsection}{\numberline {1.5.5}Multiple dependencies}{14}{subsection.1.5.5}
\contentsline {subsection}{\numberline {1.5.6}\emph {@follows}}{15}{subsection.1.5.6}
\contentsline {subsection}{\numberline {1.5.7}Making directories automatically with \emph {@follows} and \emph {mkdir}}{15}{subsection.1.5.7}
\contentsline {subsection}{\numberline {1.5.8}Globs in the \textbf {Input} parameter}{16}{subsection.1.5.8}
\contentsline {subsection}{\numberline {1.5.9}Mixing Tasks and Globs in the \textbf {Input} parameter}{16}{subsection.1.5.9}
\contentsline {section}{\numberline {1.6}\textbf {Chapter 4}: Creating files with \texttt {@originate}}{16}{section.1.6}
\contentsline {subsection}{\numberline {1.6.1}Simplifying our example with \emph {@originate}}{17}{subsection.1.6.1}
\contentsline {section}{\numberline {1.7}\textbf {Chapter 5}: Understanding how your pipeline works with \emph {pipeline\_printout(...)}}{18}{section.1.7}
\contentsline {subsection}{\numberline {1.7.1}Printing out which jobs will be run}{18}{subsection.1.7.1}
\contentsline {subsection}{\numberline {1.7.2}Determining which jobs are out-of-date or not}{18}{subsection.1.7.2}
\contentsline {subsection}{\numberline {1.7.3}Verbosity levels}{19}{subsection.1.7.3}
\contentsline {subsection}{\numberline {1.7.4}Abbreviating long file paths with \texttt {verbose\_abbreviated\_path}}{20}{subsection.1.7.4}
\contentsline {subsection}{\numberline {1.7.5}Getting a list of all tasks in a pipeline}{20}{subsection.1.7.5}
\contentsline {section}{\numberline {1.8}\textbf {Chapter 6}: Running \emph {Ruffus} from the command line with ruffus.cmdline}{21}{section.1.8}
\contentsline {subsection}{\numberline {1.8.1}Template for argparse}{21}{subsection.1.8.1}
\contentsline {subsection}{\numberline {1.8.2}Command Line Arguments}{21}{subsection.1.8.2}
\contentsline {subsection}{\numberline {1.8.3}1) Logging}{22}{subsection.1.8.3}
\contentsline {subsubsection}{A) Only to the log file:}{22}{subsubsection*.12}
\contentsline {subsubsection}{B) Only to the display:}{22}{subsubsection*.13}
\contentsline {subsubsection}{C) To both simultaneously:}{22}{subsubsection*.14}
\contentsline {subsection}{\numberline {1.8.4}2) Tracing pipeline progress}{23}{subsection.1.8.4}
\contentsline {subsection}{\numberline {1.8.5}3) Printing a flowchart}{23}{subsection.1.8.5}
\contentsline {subsection}{\numberline {1.8.6}4) Running in parallel on multiple processors}{23}{subsection.1.8.6}
\contentsline {subsection}{\numberline {1.8.7}5) Setup checkpointing so that \emph {Ruffus} knows which files are out of date}{23}{subsection.1.8.7}
\contentsline {subsubsection}{Recreating checkpoints}{24}{subsubsection*.15}
\contentsline {subsubsection}{Touch files}{24}{subsubsection*.16}
\contentsline {subsection}{\numberline {1.8.8}6) Skipping specified options}{24}{subsection.1.8.8}
\contentsline {subsection}{\numberline {1.8.9}7) Specifying verbosity and abbreviating long paths}{24}{subsection.1.8.9}
\contentsline {subsection}{\numberline {1.8.10}8) Displaying the version}{25}{subsection.1.8.10}
\contentsline {subsection}{\numberline {1.8.11}Template for optparse}{25}{subsection.1.8.11}
\contentsline {section}{\numberline {1.9}\textbf {Chapter 7}: Displaying the pipeline visually with \emph {pipeline\_printout\_graph(...)}}{25}{section.1.9}
\contentsline {subsection}{\numberline {1.9.1}Printing out a flowchart of our pipeline}{25}{subsection.1.9.1}
\contentsline {subsection}{\numberline {1.9.2}Command line options made easier with \texttt {ruffus.cmdline}}{26}{subsection.1.9.2}
\contentsline {subsection}{\numberline {1.9.3}Horribly complicated pipelines!}{27}{subsection.1.9.3}
\contentsline {subsection}{\numberline {1.9.4}Circular dependency errors in pipelines!}{27}{subsection.1.9.4}
\contentsline {subsection}{\numberline {1.9.5}\texttt {@graphviz}: Customising the appearance of each task}{28}{subsection.1.9.5}
\contentsline {section}{\numberline {1.10}\textbf {Chapter 8}: Specifying output file names with \emph {formatter()} and \emph {regex()}}{29}{section.1.10}
\contentsline {subsection}{\numberline {1.10.1}Review}{29}{subsection.1.10.1}
\contentsline {subsection}{\numberline {1.10.2}A different file name \emph {suffix()} for each pipeline stage}{30}{subsection.1.10.2}
\contentsline {subsection}{\numberline {1.10.3}\emph {formatter()} manipulates pathnames and regular expression}{31}{subsection.1.10.3}
\contentsline {subsubsection}{Path name components}{32}{subsubsection*.17}
\contentsline {subsubsection}{Filter and parse using regular expressions}{33}{subsubsection*.18}
\contentsline {subsubsection}{Using \emph {@transform()} with \emph {formatter()}}{33}{subsubsection*.19}
\contentsline {subsubsection}{string substitution for ``extra'' arguments}{34}{subsubsection*.20}
\contentsline {subsubsection}{Changing directories using \emph {formatter()} in a zoo...}{35}{subsubsection*.21}
\contentsline {subsection}{\numberline {1.10.4}\emph {regex()} manipulates via regular expressions}{36}{subsection.1.10.4}
\contentsline {section}{\numberline {1.11}\textbf {Chapter 9}: Preparing directories for output with \emph {@mkdir()}}{37}{section.1.11}
\contentsline {subsection}{\numberline {1.11.1}Overview}{37}{subsection.1.11.1}
\contentsline {subsection}{\numberline {1.11.2}Creating directories after string substitution in a zoo...}{38}{subsection.1.11.2}
\contentsline {subsubsection}{using \emph {formatter()}}{38}{subsubsection*.22}
\contentsline {subsubsection}{using \emph {regex()}}{39}{subsubsection*.23}
\contentsline {section}{\numberline {1.12}\textbf {Chapter 10}: Checkpointing: Interrupted Pipelines and Exceptions}{39}{section.1.12}
\contentsline {subsection}{\numberline {1.12.1}Overview}{40}{subsection.1.12.1}
\contentsline {subsection}{\numberline {1.12.2}Interrupting tasks}{40}{subsection.1.12.2}
\contentsline {subsection}{\numberline {1.12.3}Checkpointing: only log completed jobs}{41}{subsection.1.12.3}
\contentsline {subsection}{\numberline {1.12.4}Do not share the same checkpoint file across for multiple pipelines!}{41}{subsection.1.12.4}
\contentsline {subsection}{\numberline {1.12.5}Setting checkpoint file names}{41}{subsection.1.12.5}
\contentsline {subsubsection}{environment variable \texttt {DEFAULT\_RUFFUS\_HISTORY\_FILE}}{42}{subsubsection*.24}
\contentsline {subsubsection}{Setting the checkpoint file name manually}{42}{subsubsection*.25}
\contentsline {subsection}{\numberline {1.12.6}Useful checkpoint file name policies \texttt {DEFAULT\_RUFFUS\_HISTORY\_FILE}}{42}{subsection.1.12.6}
\contentsline {subsubsection}{Example 1: same directory, different name}{42}{subsubsection*.26}
\contentsline {subsubsection}{Example 2: Different directory, same name}{42}{subsubsection*.27}
\contentsline {subsubsection}{Example 2: Different directory, same name but keep one level of subdirectory to disambiguate}{43}{subsubsection*.28}
\contentsline {subsubsection}{Example 2: nested in common directory}{43}{subsubsection*.29}
\contentsline {subsection}{\numberline {1.12.7}Regenerating the checkpoint file}{43}{subsection.1.12.7}
\contentsline {subsection}{\numberline {1.12.8}Rules for determining if files are up to date}{43}{subsection.1.12.8}
\contentsline {subsection}{\numberline {1.12.9}Missing files generate exceptions}{44}{subsection.1.12.9}
\contentsline {subsection}{\numberline {1.12.10}Caveats: Coarse Timestamp resolution}{44}{subsection.1.12.10}
\contentsline {subsection}{\numberline {1.12.11}Flag files: Checkpointing for the paranoid}{44}{subsection.1.12.11}
\contentsline {section}{\numberline {1.13}\textbf {Chapter 11}: Pipeline topologies and a compendium of \emph {Ruffus} decorators}{44}{section.1.13}
\contentsline {subsection}{\numberline {1.13.1}Overview}{44}{subsection.1.13.1}
\contentsline {subsection}{\numberline {1.13.2}\emph {@transform}}{45}{subsection.1.13.2}
\contentsline {subsection}{\numberline {1.13.3}A bestiary of \emph {Ruffus} decorators}{45}{subsection.1.13.3}
\contentsline {subsection}{\numberline {1.13.4}\emph {@originate}}{45}{subsection.1.13.4}
\contentsline {subsection}{\numberline {1.13.5}\emph {@merge}}{45}{subsection.1.13.5}
\contentsline {subsection}{\numberline {1.13.6}\emph {@split}}{45}{subsection.1.13.6}
\contentsline {subsection}{\numberline {1.13.7}\emph {@subdivide}}{46}{subsection.1.13.7}
\contentsline {subsection}{\numberline {1.13.8}\emph {@collate}}{46}{subsection.1.13.8}
\contentsline {subsection}{\numberline {1.13.9}Combinatorics}{46}{subsection.1.13.9}
\contentsline {subsection}{\numberline {1.13.10}\emph {@product}}{47}{subsection.1.13.10}
\contentsline {subsection}{\numberline {1.13.11}\emph {@combinations}}{47}{subsection.1.13.11}
\contentsline {subsection}{\numberline {1.13.12}\emph {@combinations\_with\_replacement}}{47}{subsection.1.13.12}
\contentsline {subsection}{\numberline {1.13.13}\emph {@permutations}}{47}{subsection.1.13.13}
\contentsline {section}{\numberline {1.14}\textbf {Chapter 12}: Splitting up large tasks / files with \textbf {@split}}{47}{section.1.14}
\contentsline {subsection}{\numberline {1.14.1}Overview}{48}{subsection.1.14.1}
\contentsline {subsection}{\numberline {1.14.2}Example: Calculate variance for a large list of numbers in parallel}{48}{subsection.1.14.2}
\contentsline {subsection}{\numberline {1.14.3}Output files for \emph {@split}}{48}{subsection.1.14.3}
\contentsline {subsection}{\numberline {1.14.4}Be careful in specifying \textbf {Output} globs}{49}{subsection.1.14.4}
\contentsline {subsection}{\numberline {1.14.5}Clean up previous pipeline runs}{49}{subsection.1.14.5}
\contentsline {subsection}{\numberline {1.14.6}1 to many}{49}{subsection.1.14.6}
\contentsline {subsection}{\numberline {1.14.7}Nothing to many}{50}{subsection.1.14.7}
\contentsline {section}{\numberline {1.15}\textbf {Chapter 13}: \texttt {@merge} multiple input into a single result}{51}{section.1.15}
\contentsline {subsection}{\numberline {1.15.1}Overview of \emph {@merge}}{51}{subsection.1.15.1}
\contentsline {subsection}{\numberline {1.15.2}\emph {@merge} is a many to one operator}{51}{subsection.1.15.2}
\contentsline {subsection}{\numberline {1.15.3}Example: Combining partial solutions: Calculating variances}{51}{subsection.1.15.3}
\contentsline {section}{\numberline {1.16}\textbf {Chapter 14}: Multiprocessing, \texttt {drmaa} and Computation Clusters}{53}{section.1.16}
\contentsline {subsection}{\numberline {1.16.1}Overview}{53}{subsection.1.16.1}
\contentsline {subsubsection}{Multi Processing}{53}{subsubsection*.30}
\contentsline {subsubsection}{Data sharing}{53}{subsubsection*.31}
\contentsline {subsection}{\numberline {1.16.2}Restricting parallelism with \emph {@jobs\_limit}}{53}{subsection.1.16.2}
\contentsline {subsection}{\numberline {1.16.3}Using \texttt {drmaa} to dispatch work to Computational Clusters or Grid engines from Ruffus jobs}{54}{subsection.1.16.3}
\contentsline {subsubsection}{1) Use a shared drmaa session:}{54}{subsubsection*.32}
\contentsline {subsubsection}{2) import \texttt {ruffus.drmaa\_wrapper}}{54}{subsubsection*.33}
\contentsline {subsubsection}{3) call \emph {drmaa\_wrapper.run\_job()}}{54}{subsubsection*.34}
\contentsline {subsubsection}{4) Use multithread: \emph {pipeline\_run(multithread = NNN)}}{55}{subsubsection*.35}
\contentsline {subsubsection}{5) Develop locally}{55}{subsubsection*.36}
\contentsline {subsection}{\numberline {1.16.4}Forcing a pipeline to appear up to date}{56}{subsection.1.16.4}
\contentsline {section}{\numberline {1.17}\textbf {Chapter 15}: Logging progress through a pipeline}{56}{section.1.17}
\contentsline {subsection}{\numberline {1.17.1}Overview}{56}{subsection.1.17.1}
\contentsline {subsection}{\numberline {1.17.2}Logging task/job completion}{57}{subsection.1.17.2}
\contentsline {subsubsection}{Controlling logging verbosity}{57}{subsubsection*.37}
\contentsline {subsection}{\numberline {1.17.3}Use \emph {ruffus.cmdline}}{57}{subsection.1.17.3}
\contentsline {subsection}{\numberline {1.17.4}Customising logging}{57}{subsection.1.17.4}
\contentsline {subsection}{\numberline {1.17.5}Log your own messages}{58}{subsection.1.17.5}
\contentsline {subsubsection}{1. Set up logging}{58}{subsubsection*.38}
\contentsline {subsubsection}{2. Share the proxy}{58}{subsubsection*.39}
\contentsline {section}{\numberline {1.18}\textbf {Chapter 16}: \emph {@subdivide} tasks to run efficiently and regroup with \emph {@collate}}{59}{section.1.18}
\contentsline {subsection}{\numberline {1.18.1}Overview}{59}{subsection.1.18.1}
\contentsline {subsection}{\numberline {1.18.2}\emph {@subdivide} in parallel}{59}{subsection.1.18.2}
\contentsline {subsection}{\numberline {1.18.3}Grouping using \emph {@collate}}{61}{subsection.1.18.3}
\contentsline {section}{\numberline {1.19}\textbf {Chapter 17}: \emph {@combinations}, \emph {@permutations} and all versus all \emph {@product}}{62}{section.1.19}
\contentsline {subsection}{\numberline {1.19.1}Overview}{62}{subsection.1.19.1}
\contentsline {subsection}{\numberline {1.19.2}Generating output with \emph {formatter()}}{63}{subsection.1.19.2}
\contentsline {subsection}{\numberline {1.19.3}All vs all comparisons with \emph {@product}}{63}{subsection.1.19.3}
\contentsline {subsection}{\numberline {1.19.4}Permute all k-tuple orderings of inputs without repeats using \emph {@permutations}}{65}{subsection.1.19.4}
\contentsline {subsection}{\numberline {1.19.5}Select unordered k-tuples within inputs excluding repeated elements using \emph {@combinations}}{66}{subsection.1.19.5}
\contentsline {subsection}{\numberline {1.19.6}Select unordered k-tuples within inputs \emph {including} repeated elements with \emph {@combinations\_with\_replacement}}{67}{subsection.1.19.6}
\contentsline {section}{\numberline {1.20}\textbf {Chapter 18}: Turning parts of the pipeline on and off at runtime with \emph {@active\_if}}{69}{section.1.20}
\contentsline {subsection}{\numberline {1.20.1}Overview}{69}{subsection.1.20.1}
\contentsline {subsection}{\numberline {1.20.2}\emph {@active\_if} controls the state of tasks}{69}{subsection.1.20.2}
\contentsline {section}{\numberline {1.21}\textbf {Chapter 19}: Signal the completion of each stage of our pipeline with \emph {@posttask}}{71}{section.1.21}
\contentsline {subsection}{\numberline {1.21.1}Overview}{71}{subsection.1.21.1}
\contentsline {subsubsection}{\textbf {@posttask}}{71}{subsubsection*.40}
\contentsline {subsubsection}{\emph {touch\_file}}{72}{subsubsection*.41}
\contentsline {subsubsection}{Adding several post task actions}{72}{subsubsection*.42}
\contentsline {section}{\numberline {1.22}\textbf {Chapter 20}: Manipulating task inputs via string substitution using \emph {inputs()} and \emph {add\_inputs()}}{72}{section.1.22}
\contentsline {subsection}{\numberline {1.22.1}Overview}{72}{subsection.1.22.1}
\contentsline {subsection}{\numberline {1.22.2}Adding additional \emph {input} prerequisites per job with \emph {add\_inputs()}}{73}{subsection.1.22.2}
\contentsline {subsubsection}{1. Example: compiling c++ code}{73}{subsubsection*.43}
\contentsline {subsubsection}{2. Example: Adding a common header file with \emph {add\_inputs()}}{73}{subsubsection*.44}
\contentsline {subsubsection}{3. Example: Additional \emph {Input} can be tasks}{74}{subsubsection*.45}
\contentsline {subsubsection}{4. Example: Add corresponding files using \emph {add\_inputs()} with \emph {formatter} or \emph {regex}}{74}{subsubsection*.46}
\contentsline {subsection}{\numberline {1.22.3}Replacing all input parameters with \emph {inputs()}}{75}{subsection.1.22.3}
\contentsline {subsubsection}{5. Example: Running matching python scripts using \emph {inputs()}}{75}{subsubsection*.47}
\contentsline {section}{\numberline {1.23}\textbf {Chapter 21}: Esoteric: Generating parameters on the fly with \emph {@files}}{75}{section.1.23}
\contentsline {subsection}{\numberline {1.23.1}Overview}{76}{subsection.1.23.1}
\contentsline {subsection}{\numberline {1.23.2}\emph {@files} syntax}{76}{subsection.1.23.2}
\contentsline {subsection}{\numberline {1.23.3}A Cartesian Product, all vs all example}{77}{subsection.1.23.3}
\contentsline {section}{\numberline {1.24}\textbf {Chapter 22}: Esoteric: Running jobs in parallel without files using \emph {@parallel}}{78}{section.1.24}
\contentsline {subsection}{\numberline {1.24.1}\textbf {@parallel}}{78}{subsection.1.24.1}
\contentsline {section}{\numberline {1.25}\textbf {Chapter 23}: Esoteric: Writing custom functions to decide which jobs are up to date with \emph {@check\_if\_uptodate}}{79}{section.1.25}
\contentsline {subsection}{\numberline {1.25.1}\textbf {@check\_if\_uptodate} : Manual dependency checking}{79}{subsection.1.25.1}
\contentsline {section}{\numberline {1.26}\textbf {Appendix 1}: Flow Chart Colours with \emph {pipeline\_printout\_graph(...)}}{80}{section.1.26}
\contentsline {subsection}{\numberline {1.26.1}Flowchart colours}{80}{subsection.1.26.1}
\contentsline {section}{\numberline {1.27}\textbf {Appendix 2}: How dependency is checked}{81}{section.1.27}
\contentsline {subsection}{\numberline {1.27.1}Overview}{81}{subsection.1.27.1}
\contentsline {subsubsection}{Running all out-of-date tasks and dependents}{81}{subsubsection*.48}
\contentsline {subsubsection}{Forced Reruns}{82}{subsubsection*.50}
\contentsline {subsubsection}{Esoteric option: Minimal Reruns}{82}{subsubsection*.51}
\contentsline {section}{\numberline {1.28}\textbf {Appendix 3}: Exceptions thrown inside pipelines}{83}{section.1.28}
\contentsline {subsection}{\numberline {1.28.1}Overview}{83}{subsection.1.28.1}
\contentsline {subsection}{\numberline {1.28.2}Pipelines running in parallel accumulate Exceptions}{84}{subsection.1.28.2}
\contentsline {subsection}{\numberline {1.28.3}Terminate pipeline immediately upon Exceptions}{84}{subsection.1.28.3}
\contentsline {subsubsection}{Set \emph {pipeline\_run(exceptions\_terminate\_immediately = True)}}{84}{subsubsection*.53}
\contentsline {subsubsection}{raise \texttt {Ruffus.JobSignalledBreak}}{84}{subsubsection*.54}
\contentsline {subsection}{\numberline {1.28.4}Display exceptions as they occur}{85}{subsection.1.28.4}
\contentsline {section}{\numberline {1.29}\textbf {Appendix 4}: Names exported from Ruffus}{85}{section.1.29}
\contentsline {subsection}{\numberline {1.29.1}Ruffus Names}{85}{subsection.1.29.1}
\contentsline {section}{\numberline {1.30}\textbf {Appendix 5}: \textbf {@files}: Deprecated syntax}{87}{section.1.30}
\contentsline {subsection}{\numberline {1.30.1}Overview}{87}{subsection.1.30.1}
\contentsline {subsection}{\numberline {1.30.2}\textbf {@files}}{87}{subsection.1.30.2}
\contentsline {subsection}{\numberline {1.30.3}Running the same code on different parameters in parallel}{88}{subsection.1.30.3}
\contentsline {subsubsection}{Checking if jobs are up to date}{89}{subsubsection*.56}
\contentsline {section}{\numberline {1.31}\textbf {Appendix 6}: \textbf {@files\_re}: Deprecated \emph {syntax using regular expressions}}{90}{section.1.31}
\contentsline {subsection}{\numberline {1.31.1}Overview}{90}{subsection.1.31.1}
\contentsline {subsubsection}{Transforming input and output filenames}{90}{subsubsection*.57}
\contentsline {subsubsection}{Collating many \emph {inputs} into a single \emph {output}}{91}{subsubsection*.59}
\contentsline {subsubsection}{Generating \emph {input} and \emph {output} parameter using regular expresssions}{91}{subsubsection*.60}
\contentsline {section}{\numberline {1.32}\textbf {Chapter 1}: Python Code for An introduction to basic Ruffus syntax}{92}{section.1.32}
\contentsline {subsection}{\numberline {1.32.1}Your first Ruffus script}{92}{subsection.1.32.1}
\contentsline {subsection}{\numberline {1.32.2}Resulting Output}{93}{subsection.1.32.2}
\contentsline {section}{\numberline {1.33}\textbf {Chapter 1}: Python Code for Transforming data in a pipeline with \texttt {@transform}}{93}{section.1.33}
\contentsline {subsection}{\numberline {1.33.1}Your first Ruffus script}{93}{subsection.1.33.1}
\contentsline {subsection}{\numberline {1.33.2}Resulting Output}{94}{subsection.1.33.2}
\contentsline {section}{\numberline {1.34}\textbf {Chapter 3}: Python Code for More on \texttt {@transform}-ing data}{95}{section.1.34}
\contentsline {subsection}{\numberline {1.34.1}Producing several items / files per job}{95}{subsection.1.34.1}
\contentsline {subsubsection}{Resulting Output}{96}{subsubsection*.61}
\contentsline {subsection}{\numberline {1.34.2}Defining tasks function out of order}{96}{subsection.1.34.2}
\contentsline {subsubsection}{Resulting Output}{97}{subsubsection*.62}
\contentsline {subsection}{\numberline {1.34.3}Multiple dependencies}{97}{subsection.1.34.3}
\contentsline {subsubsection}{Resulting Output}{98}{subsubsection*.63}
\contentsline {subsection}{\numberline {1.34.4}Multiple dependencies after @follows}{99}{subsection.1.34.4}
\contentsline {subsubsection}{Resulting Output: \texttt {first\_task} completes before \texttt {second\_task}}{100}{subsubsection*.64}
\contentsline {section}{\numberline {1.35}\textbf {Chapter 4}: Python Code for Creating files with \texttt {@originate}}{100}{section.1.35}
\contentsline {subsection}{\numberline {1.35.1}Using \texttt {@originate}}{101}{subsection.1.35.1}
\contentsline {subsection}{\numberline {1.35.2}Resulting Output}{101}{subsection.1.35.2}
\contentsline {section}{\numberline {1.36}\textbf {Chapter 5}: Python Code for Understanding how your pipeline works with \emph {pipeline\_printout(...)}}{101}{section.1.36}
\contentsline {subsection}{\numberline {1.36.1}Display the initial state of the pipeline}{102}{subsection.1.36.1}
\contentsline {subsection}{\numberline {1.36.2}Normal Output}{102}{subsection.1.36.2}
\contentsline {subsection}{\numberline {1.36.3}High Verbosity Output}{102}{subsection.1.36.3}
\contentsline {subsection}{\numberline {1.36.4}Display the partially up-to-date pipeline}{103}{subsection.1.36.4}
\contentsline {section}{\numberline {1.37}\textbf {Chapter 7}: Python Code for Displaying the pipeline visually with \emph {pipeline\_printout\_graph(...)}}{105}{section.1.37}
\contentsline {subsection}{\numberline {1.37.1}Code}{105}{subsection.1.37.1}
\contentsline {subsection}{\numberline {1.37.2}Resulting Flowcharts}{106}{subsection.1.37.2}
\contentsline {section}{\numberline {1.38}\textbf {Chapter 8}: Python Code for Specifying output file names with \emph {formatter()} and \emph {regex()}}{107}{section.1.38}
\contentsline {subsection}{\numberline {1.38.1}Example Code for \emph {suffix()}}{107}{subsection.1.38.1}
\contentsline {subsection}{\numberline {1.38.2}Example Code for \emph {formatter()}}{107}{subsection.1.38.2}
\contentsline {subsection}{\numberline {1.38.3}Example Code for \emph {formatter()} with replacements in \emph {extra} arguments}{108}{subsection.1.38.3}
\contentsline {subsection}{\numberline {1.38.4}Example Code for \emph {formatter()} in Zoos}{109}{subsection.1.38.4}
\contentsline {subsection}{\numberline {1.38.5}Example Code for \emph {regex()} in zoos}{110}{subsection.1.38.5}
\contentsline {section}{\numberline {1.39}\textbf {Chapter 9}: Python Code for Preparing directories for output with \emph {@mkdir()}}{110}{section.1.39}
\contentsline {subsection}{\numberline {1.39.1}Code for \emph {formatter()} Zoo example}{111}{subsection.1.39.1}
\contentsline {subsection}{\numberline {1.39.2}Code for \emph {regex()} Zoo example}{111}{subsection.1.39.2}
\contentsline {section}{\numberline {1.40}\textbf {Chapter 10}: Python Code for Checkpointing: Interrupted Pipelines and Exceptions}{112}{section.1.40}
\contentsline {subsection}{\numberline {1.40.1}Code for the ``Interrupting tasks'' example}{112}{subsection.1.40.1}
\contentsline {section}{\numberline {1.41}\textbf {Chapter 12}: Python Code for Splitting up large tasks / files with \textbf {@split}}{113}{section.1.41}
\contentsline {subsection}{\numberline {1.41.1}Splitting large jobs}{113}{subsection.1.41.1}
\contentsline {subsection}{\numberline {1.41.2}Resulting Output}{114}{subsection.1.41.2}
\contentsline {section}{\numberline {1.42}\textbf {Chapter 13}: Python Code for \texttt {@merge} multiple input into a single result}{115}{section.1.42}
\contentsline {subsection}{\numberline {1.42.1}Splitting large jobs}{115}{subsection.1.42.1}
\contentsline {subsection}{\numberline {1.42.2}Resulting Output}{117}{subsection.1.42.2}
\contentsline {section}{\numberline {1.43}\textbf {Chapter 14}: Python Code for Multiprocessing, \texttt {drmaa} and Computation Clusters}{117}{section.1.43}
\contentsline {subsection}{\numberline {1.43.1}\emph {@jobs\_limit}}{117}{subsection.1.43.1}
\contentsline {subsection}{\numberline {1.43.2}Using \texttt {ruffus.drmaa\_wrapper}}{119}{subsection.1.43.2}
\contentsline {section}{\numberline {1.44}\textbf {Chapter 15}: Python Code for Logging progress through a pipeline}{120}{section.1.44}
\contentsline {subsection}{\numberline {1.44.1}Rotating set of file logs}{120}{subsection.1.44.1}
\contentsline {section}{\numberline {1.45}\textbf {Chapter 16}: Python Code for \emph {@subdivide} tasks to run efficiently and regroup with \emph {@collate}}{121}{section.1.45}
\contentsline {subsection}{\numberline {1.45.1}\emph {@subdivide} and regroup with \emph {@collate} example}{121}{subsection.1.45.1}
\contentsline {section}{\numberline {1.46}\textbf {Chapter 17}: Python Code for \emph {@combinations}, \emph {@permutations} and all versus all \emph {@product}}{124}{section.1.46}
\contentsline {subsection}{\numberline {1.46.1}Example code for \emph {@product}}{124}{subsection.1.46.1}
\contentsline {subsection}{\numberline {1.46.2}Example code for \emph {@permutations}}{125}{subsection.1.46.2}
\contentsline {subsection}{\numberline {1.46.3}Example code for \emph {@combinations}}{126}{subsection.1.46.3}
\contentsline {subsection}{\numberline {1.46.4}Example code for \emph {@combinations\_with\_replacement}}{127}{subsection.1.46.4}
\contentsline {section}{\numberline {1.47}\textbf {Chapter 20}: Python Code for Manipulating task inputs via string substitution using \emph {inputs()} and \emph {add\_inputs()}}{128}{section.1.47}
\contentsline {subsection}{\numberline {1.47.1}Example code for adding additional \emph {input} prerequisites per job with \emph {add\_inputs()}}{129}{subsection.1.47.1}
\contentsline {subsubsection}{1. Example: compiling c++ code}{129}{subsubsection*.65}
\contentsline {subsubsection}{2. Example: Adding a common header file with \emph {add\_inputs()}}{129}{subsubsection*.66}
\contentsline {subsubsection}{3. Example: Additional \emph {Input} can be tasks}{130}{subsubsection*.67}
\contentsline {subsubsection}{4. Example: Add corresponding files using \emph {add\_inputs()} with \emph {formatter} or \emph {regex}}{130}{subsubsection*.68}
\contentsline {subsection}{\numberline {1.47.2}Example code for replacing all input parameters with \emph {inputs()}}{131}{subsection.1.47.2}
\contentsline {subsubsection}{5. Example: Running matching python scripts using \emph {inputs()}}{131}{subsubsection*.69}
\contentsline {section}{\numberline {1.48}\textbf {Chapter 21}: Esoteric: Python Code for Generating parameters on the fly with \emph {@files}}{132}{section.1.48}
\contentsline {subsection}{\numberline {1.48.1}Introduction}{132}{subsection.1.48.1}
\contentsline {subsection}{\numberline {1.48.2}Code}{132}{subsection.1.48.2}
\contentsline {subsection}{\numberline {1.48.3}Resulting Output}{137}{subsection.1.48.3}
\contentsline {section}{\numberline {1.49}\textbf {Appendix 1}: Python code for Flow Chart Colours with \emph {pipeline\_printout\_graph(...)}}{137}{section.1.49}
\contentsline {subsection}{\numberline {1.49.1}Code}{137}{subsection.1.49.1}
\contentsline {chapter}{\numberline {2}Overview:}{143}{chapter.2}
\contentsline {section}{\numberline {2.1}Cheat Sheet}{143}{section.2.1}
\contentsline {subsection}{\numberline {2.1.1}1. Annotate functions with \textbf {Ruffus} decorators}{144}{subsection.2.1.1}
\contentsline {subsubsection}{Core}{144}{subsubsection*.70}
\contentsline {subsubsection}{See \emph {Decorators} for a complete list of decorators}{144}{subsubsection*.71}
\contentsline {subsection}{\numberline {2.1.2}2. Print dependency graph if necessary}{144}{subsection.2.1.2}
\contentsline {subsection}{\numberline {2.1.3}3. Run the pipeline}{144}{subsection.2.1.3}
\contentsline {section}{\numberline {2.2}Pipeline functions}{145}{section.2.2}
\contentsline {subsection}{\numberline {2.2.1}\emph {pipeline\_run}}{145}{subsection.2.2.1}
\contentsline {subsection}{\numberline {2.2.2}\emph {pipeline\_printout}}{147}{subsection.2.2.2}
\contentsline {subsection}{\numberline {2.2.3}\emph {pipeline\_printout\_graph}}{148}{subsection.2.2.3}
\contentsline {subsection}{\numberline {2.2.4}\emph {pipeline\_get\_task\_names}}{151}{subsection.2.2.4}
\contentsline {section}{\numberline {2.3}drmaa functions}{151}{section.2.3}
\contentsline {subsection}{\numberline {2.3.1}\emph {run\_job}}{151}{subsection.2.3.1}
\contentsline {section}{\numberline {2.4}Installation}{154}{section.2.4}
\contentsline {subsection}{\numberline {2.4.1}The easy way}{154}{subsection.2.4.1}
\contentsline {subsection}{\numberline {2.4.2}The most up-to-date code:}{154}{subsection.2.4.2}
\contentsline {subsection}{\numberline {2.4.3}Prequisites}{154}{subsection.2.4.3}
\contentsline {subsection}{\numberline {2.4.4}Installing easy\_install}{154}{subsection.2.4.4}
\contentsline {subsection}{\numberline {2.4.5}Installing pip}{155}{subsection.2.4.5}
\contentsline {subsection}{\numberline {2.4.6}Graphical flowcharts The most up-to-date code:}{155}{subsection.2.4.6}
\contentsline {section}{\numberline {2.5}Design \& Architecture}{155}{section.2.5}
\contentsline {subsection}{\numberline {2.5.1}\emph {GNU Make}}{155}{subsection.2.5.1}
\contentsline {subsubsection}{Deficiencies of \emph {make} / \emph {gmake}}{156}{subsubsection*.253}
\contentsline {subsection}{\numberline {2.5.2}\emph {Scons}, \emph {Rake} and other \emph {Make} alternatives}{156}{subsection.2.5.2}
\contentsline {subsubsection}{Implicit dependencies: disadvantages of \emph {make} / \emph {scons} / \emph {rake}}{156}{subsubsection*.254}
\contentsline {subsubsection}{Explicit dependencies in \emph {Ruffus}}{157}{subsubsection*.255}
\contentsline {subsubsection}{Static dependencies: What \emph {make} / \emph {scons} / \emph {rake} can't do (easily)}{157}{subsubsection*.256}
\contentsline {subsection}{\numberline {2.5.3}Managing pipelines stage-by-stage using \textbf {Ruffus}}{157}{subsection.2.5.3}
\contentsline {subsubsection}{Disadvantages of the Ruffus design}{158}{subsubsection*.257}
\contentsline {subsection}{\numberline {2.5.4}Alternatives to \textbf {Ruffus}}{159}{subsection.2.5.4}
\contentsline {subsubsection}{Acknowledgements}{159}{subsubsection*.258}
\contentsline {section}{\numberline {2.6}Major Features added to Ruffus}{160}{section.2.6}
\contentsline {subsection}{\numberline {2.6.1}version 2.6}{160}{subsection.2.6.1}
\contentsline {subsubsection}{1) Bug fixes}{160}{subsubsection*.259}
\contentsline {subsubsection}{2) \emph {@transform {}`(..., suffix(``xxx''),} {\def ,.{red}\def {red}\def {}\par } \emph {= ``/new/output/path'')}}{160}{subsubsection*.260}
\contentsline {subsubsection}{2) Named parameters}{161}{subsubsection*.261}
\contentsline {subsubsection}{3) New object orientated syntax for Ruffus}{162}{subsubsection*.262}
\contentsline {subsection}{\numberline {2.6.2}version 2.5}{162}{subsection.2.6.2}
\contentsline {subsubsection}{1) Python3 compatability (but at least python 2.6 is now required)}{162}{subsubsection*.263}
\contentsline {subsubsection}{2) Ctrl-C interrupts}{163}{subsubsection*.264}
\contentsline {subsubsection}{3) Customising flowcharts in pipeline\_printout\_graph() with \texttt {@graphviz}}{163}{subsubsection*.265}
\contentsline {subsubsection}{4. Consistent verbosity levels}{164}{subsubsection*.266}
\contentsline {subsubsection}{5. Allow abbreviated paths from \texttt {pipeline\_run} or \texttt {pipeline\_printout}}{164}{subsubsection*.267}
\contentsline {subsubsection}{Other changes}{165}{subsubsection*.268}
\contentsline {subsection}{\numberline {2.6.3}version 2.4.1}{165}{subsection.2.6.3}
\contentsline {subsection}{\numberline {2.6.4}version 2.4}{165}{subsection.2.6.4}
\contentsline {subsubsection}{Additions to \texttt {ruffus} namespace}{166}{subsubsection*.269}
\contentsline {subsubsection}{Installation: use pip}{166}{subsubsection*.270}
\contentsline {subsubsection}{1) Command Line support}{166}{subsubsection*.271}
\contentsline {subsubsection}{2) Check pointing}{166}{subsubsection*.272}
\contentsline {subsubsection}{3) \emph {subdivide()} (\emph {syntax})}{166}{subsubsection*.273}
\contentsline {subsubsection}{4) \emph {mkdir()} (\emph {syntax}) with \emph {formatter()}, \emph {suffix()} and \emph {regex()}}{167}{subsubsection*.274}
\contentsline {subsubsection}{5) \emph {originate()} (\emph {syntax})}{167}{subsubsection*.275}
\contentsline {subsubsection}{6) New flexible \emph {formatter()} (\emph {syntax}) alternative to \emph {regex()} \& \emph {suffix()}}{167}{subsubsection*.276}
\contentsline {subsubsection}{7) Combinatorics (all vs. all decorators)}{167}{subsubsection*.277}
\contentsline {subsubsection}{8) drmaa support and multithreading:}{167}{subsubsection*.278}
\contentsline {subsubsection}{9) \texttt {pipeline\_run(...)} and exceptions}{168}{subsubsection*.279}
\contentsline {subsubsection}{10) Miscellaneous}{168}{subsubsection*.280}
\contentsline {subsection}{\numberline {2.6.5}version 2.3}{168}{subsection.2.6.5}
\contentsline {subsection}{\numberline {2.6.6}version 2.2}{169}{subsection.2.6.6}
\contentsline {subsection}{\numberline {2.6.7}version 2.1.1}{171}{subsection.2.6.7}
\contentsline {subsection}{\numberline {2.6.8}version 2.1.0}{171}{subsection.2.6.8}
\contentsline {subsection}{\numberline {2.6.9}version 2.0.10}{171}{subsection.2.6.9}
\contentsline {subsection}{\numberline {2.6.10}version 2.0.9}{172}{subsection.2.6.10}
\contentsline {subsection}{\numberline {2.6.11}version 2.0.8}{173}{subsection.2.6.11}
\contentsline {subsection}{\numberline {2.6.12}version 2.0.2}{173}{subsection.2.6.12}
\contentsline {subsection}{\numberline {2.6.13}version 2.0}{173}{subsection.2.6.13}
\contentsline {subsection}{\numberline {2.6.14}version 1.1.4}{174}{subsection.2.6.14}
\contentsline {subsection}{\numberline {2.6.15}version 1.0.7}{174}{subsection.2.6.15}
\contentsline {subsection}{\numberline {2.6.16}version 1.0}{174}{subsection.2.6.16}
\contentsline {section}{\numberline {2.7}Fixed Bugs}{174}{section.2.7}
\contentsline {section}{\numberline {2.8}New Object orientated syntax for Ruffus in Version 2.6}{174}{section.2.8}
\contentsline {subsection}{\numberline {2.8.1}Syntax}{174}{subsection.2.8.1}
\contentsline {subsection}{\numberline {2.8.2}Advantages}{175}{subsection.2.8.2}
\contentsline {subsection}{\numberline {2.8.3}Compatability}{176}{subsection.2.8.3}
\contentsline {subsection}{\numberline {2.8.4}Class methods}{177}{subsection.2.8.4}
\contentsline {subsection}{\numberline {2.8.5}Call chaining}{177}{subsection.2.8.5}
\contentsline {subsection}{\numberline {2.8.6}Referring to Tasks}{177}{subsection.2.8.6}
\contentsline {subsubsection}{1) Python function}{178}{subsubsection*.281}
\contentsline {subsubsection}{2) Python function name (using \emph {output\_from})}{178}{subsubsection*.282}
\contentsline {subsubsection}{3) Task object}{178}{subsubsection*.283}
\contentsline {subsubsection}{4) Task name (using \emph {output\_from})}{178}{subsubsection*.284}
\contentsline {subsubsection}{5) Pipeline}{178}{subsubsection*.285}
\contentsline {subsubsection}{6) Lookup Task via the Pipeline}{179}{subsubsection*.286}
\contentsline {section}{\numberline {2.9}Worked Example for New Object orientated syntax for Ruffus in Version 2.6}{179}{section.2.9}
\contentsline {subsection}{\numberline {2.9.1}Worked example}{179}{subsection.2.9.1}
\contentsline {subsubsection}{Pipeline factory}{180}{subsubsection*.287}
\contentsline {subsubsection}{Three different ways of referring to input Tasks}{181}{subsubsection*.288}
\contentsline {subsubsection}{Head and Tail Tasks}{181}{subsubsection*.289}
\contentsline {subsubsection}{Another Pipeline factory}{181}{subsubsection*.290}
\contentsline {subsubsection}{Creating multiple copies of a pipeline}{182}{subsubsection*.291}
\contentsline {subsubsection}{Connecting pipelines together}{182}{subsubsection*.292}
\contentsline {subsubsection}{Running a composite pipeline}{183}{subsubsection*.293}
\contentsline {section}{\numberline {2.10}Python Code for: New Object orientated syntax for Ruffus in Version 2.6}{183}{section.2.10}
\contentsline {section}{\numberline {2.11}Where I see Ruffus going}{187}{section.2.11}
\contentsline {section}{\numberline {2.12}In up coming release:}{187}{section.2.12}
\contentsline {subsection}{\numberline {2.12.1}Todo: document \texttt {output\_from()}}{187}{subsection.2.12.1}
\contentsline {subsection}{\numberline {2.12.2}Todo: document new syntax}{187}{subsection.2.12.2}
\contentsline {subsection}{\numberline {2.12.3}Todo: Log the progress through the pipeline in a machine parsable format}{187}{subsection.2.12.3}
\contentsline {subsection}{\numberline {2.12.4}Todo: either\_or: Prevent failed jobs from propagating further}{188}{subsection.2.12.4}
\contentsline {subsection}{\numberline {2.12.5}Todo: (bug fix) pipeline\_printout\_graph should print inactive tasks}{188}{subsection.2.12.5}
\contentsline {subsection}{\numberline {2.12.6}Todo: Mark input strings as non-file names, and add support for dynamically returned parameters}{188}{subsection.2.12.6}
\contentsline {section}{\numberline {2.13}Future Changes to Ruffus}{188}{section.2.13}
\contentsline {subsection}{\numberline {2.13.1}Todo: Replacements for formatter(), suffix(), regex()}{189}{subsection.2.13.1}
\contentsline {subsection}{\numberline {2.13.2}Todo: Allow ``extra'' parameters to be used in output substitution}{189}{subsection.2.13.2}
\contentsline {subsection}{\numberline {2.13.3}Todo: Extra signalling before and after each task and job}{189}{subsection.2.13.3}
\contentsline {subsection}{\numberline {2.13.4}Todo: \texttt {@split} / \texttt {@subdivide} returns the actual output created}{190}{subsection.2.13.4}
\contentsline {subsubsection}{Checkpointing}{190}{subsubsection*.294}
\contentsline {subsection}{\numberline {2.13.5}Todo: New decorators}{190}{subsection.2.13.5}
\contentsline {subsubsection}{Todo: \texttt {@originate}}{190}{subsubsection*.295}
\contentsline {subsubsection}{Todo: \texttt {@recombine}}{190}{subsubsection*.296}
\contentsline {subsection}{\numberline {2.13.6}Todo: Bioinformatics example to end all examples}{190}{subsection.2.13.6}
\contentsline {subsection}{\numberline {2.13.7}Todo: Allow the next task to start before all jobs in the previous task have finished}{191}{subsection.2.13.7}
\contentsline {subsubsection}{Converting to per-job rather than per task dependencies}{191}{subsubsection*.297}
\contentsline {subsubsection}{Implementation}{192}{subsubsection*.298}
\contentsline {subsection}{\numberline {2.13.8}Todo: Allow checkpoint files to be moved}{192}{subsection.2.13.8}
\contentsline {subsection}{\numberline {2.13.9}Todo: Remove intermediate files}{192}{subsection.2.13.9}
\contentsline {section}{\numberline {2.14}Planned Improvements to Ruffus}{193}{section.2.14}
\contentsline {subsection}{\numberline {2.14.1}Planned: Running python code (task functions) transparently on remote cluster nodes}{193}{subsection.2.14.1}
\contentsline {subsection}{\numberline {2.14.2}Planned: Custom parameter generator}{194}{subsection.2.14.2}
\contentsline {subsection}{\numberline {2.14.3}Planned: Ruffus GUI interface.}{194}{subsection.2.14.3}
\contentsline {subsection}{\numberline {2.14.4}Planned: Non-decorator / Function interface to Ruffus}{194}{subsection.2.14.4}
\contentsline {subsection}{\numberline {2.14.5}Planned: @retry\_on\_error(NUM\_OF\_RETRIES)}{194}{subsection.2.14.5}
\contentsline {subsection}{\numberline {2.14.6}Planned: Clean up}{194}{subsection.2.14.6}
\contentsline {section}{\numberline {2.15}Implementation Tips}{195}{section.2.15}
\contentsline {subsection}{\numberline {2.15.1}Items remaining for current release}{195}{subsection.2.15.1}
\contentsline {subsubsection}{Code}{195}{subsubsection*.301}
\contentsline {subsubsection}{Unit tests}{195}{subsubsection*.302}
\contentsline {subsection}{\numberline {2.15.2}Release}{196}{subsection.2.15.2}
\contentsline {subsection}{\numberline {2.15.3}blogger}{196}{subsection.2.15.3}
\contentsline {subsection}{\numberline {2.15.4}dbdict.py}{196}{subsection.2.15.4}
\contentsline {subsection}{\numberline {2.15.5}how to write new decorators}{197}{subsection.2.15.5}
\contentsline {section}{\numberline {2.16}Implementation notes}{197}{section.2.16}
\contentsline {subsection}{\numberline {2.16.1}\texttt {Ctrl-C} handling}{197}{subsection.2.16.1}
\contentsline {subsection}{\numberline {2.16.2}Python3 compatability}{198}{subsection.2.16.2}
\contentsline {subsection}{\numberline {2.16.3}Refactoring: parameter handling}{199}{subsection.2.16.3}
\contentsline {subsection}{\numberline {2.16.4}\texttt {formatter}}{199}{subsection.2.16.4}
\contentsline {subsubsection}{\texttt {formatter()}: \texttt {regex()} and \texttt {suffix()}}{200}{subsubsection*.303}
\contentsline {subsection}{\numberline {2.16.5}@product()}{200}{subsection.2.16.5}
\contentsline {subsection}{\numberline {2.16.6}\texttt {@permutations(...),} \texttt {@combinations(...),} \texttt {@combinations\_with\_replacement(...)}}{201}{subsection.2.16.6}
\contentsline {subsection}{\numberline {2.16.7}drmaa alternatives}{201}{subsection.2.16.7}
\contentsline {subsection}{\numberline {2.16.8}Task completion monitoring}{202}{subsection.2.16.8}
\contentsline {subsubsection}{How easy is it to abstract out the database?}{202}{subsubsection*.304}
\contentsline {subsubsection}{Can we query the database, get Job history / stats?}{202}{subsubsection*.305}
\contentsline {subsubsection}{What are the run time performance implications?}{202}{subsubsection*.306}
\contentsline {subsubsection}{Avoid pauses between tasks}{202}{subsubsection*.307}
\contentsline {subsection}{\numberline {2.16.9}\texttt {@mkdir(...),}}{202}{subsection.2.16.9}
\contentsline {subsection}{\numberline {2.16.10}Parameter handling}{203}{subsection.2.16.10}
\contentsline {subsubsection}{Current design}{203}{subsubsection*.308}
\contentsline {subsubsection}{Handling file names}{204}{subsubsection*.309}
\contentsline {subsubsection}{Refactor to handle input parameter objects with ruffus\_params() functions}{205}{subsubsection*.310}
\contentsline {subsubsection}{Refactor to handle formatter() replacement with ``\{EXTRAS{[}0{]}{[}1{]}{[}3{]}\}'' and ``{[}INPUTS{[}1{]}{[}2{]}{]}''}{205}{subsubsection*.311}
\contentsline {subsubsection}{Refactor to handle alternative outputs with either\_or(...,...)}{206}{subsubsection*.312}
\contentsline {subsection}{\numberline {2.16.11}Add Object Orientated interface}{206}{subsection.2.16.11}
\contentsline {subsubsection}{Passed Unit tests}{206}{subsubsection*.313}
\contentsline {subsubsection}{Pipeline and Task creation}{207}{subsubsection*.314}
\contentsline {subsubsection}{Connecting Task into a DAG}{208}{subsubsection*.315}
\contentsline {section}{\numberline {2.17}FAQ}{208}{section.2.17}
\contentsline {subsection}{\numberline {2.17.1}Citations}{208}{subsection.2.17.1}
\contentsline {subsubsection}{Q. How should \emph {Ruffus} be cited in academic publications?}{208}{subsubsection*.316}
\contentsline {subsection}{\numberline {2.17.2}Good practices}{209}{subsection.2.17.2}
\contentsline {subsubsection}{Q. What is the best way of keeping my data and workings separate?}{209}{subsubsection*.317}
\contentsline {subsubsection}{Q. What is the best way of handling data in file pairs (or triplets etc.)}{210}{subsubsection*.318}
\contentsline {subsection}{\numberline {2.17.3}General}{210}{subsection.2.17.3}
\contentsline {subsubsection}{Q. \emph {Ruffus} won't create dependency graphs}{210}{subsubsection*.319}
\contentsline {subsubsection}{Q. \emph {Ruffus} seems to be hanging in the same place}{210}{subsubsection*.320}
\contentsline {subsubsection}{Q. Regular expression substitutions don't work}{211}{subsubsection*.321}
\contentsline {subsubsection}{Q. How to force a pipeline to appear up to date?}{211}{subsubsection*.322}
\contentsline {subsubsection}{Q. How can I use my own decorators with Ruffus?}{211}{subsubsection*.323}
\contentsline {paragraph}{1. Use @wraps from \texttt {functools} or Michele Simionato's decorator module}{211}{paragraph*.324}
\contentsline {paragraph}{2. Always call Ruffus decorators first before your own decorators.}{211}{paragraph*.325}
\contentsline {paragraph}{Example decorator:}{212}{paragraph*.326}
\contentsline {paragraph}{1. Using functools @wraps}{213}{paragraph*.327}
\contentsline {paragraph}{2. Using Michele Simionato's decorator module}{213}{paragraph*.328}
\contentsline {paragraph}{2. By hand, using a callable object}{213}{paragraph*.329}
\contentsline {subsubsection}{Q. Can a task function in a \emph {Ruffus} pipeline be called normally outside of Ruffus?}{213}{subsubsection*.330}
\contentsline {subsubsection}{Q. My \emph {Ruffus} tasks create two files at a time. Why is the second one ignored in successive stages of my pipeline?}{213}{subsubsection*.331}
\contentsline {subsubsection}{Q. How can a \emph {Ruffus} task produce output which goes off in different directions?}{215}{subsubsection*.332}
\contentsline {subsubsection}{Q. Can I call extra code before each job?}{215}{subsubsection*.333}
\contentsline {subsubsection}{Q. Does \emph {Ruffus} allow checkpointing: to distinguish interrupted and completed results?}{216}{subsubsection*.334}
\contentsline {paragraph}{A. Use the builtin sqlite checkpointing}{216}{paragraph*.335}
\contentsline {paragraph}{A. Use a flag file}{216}{paragraph*.336}
\contentsline {paragraph}{A. Use a temp file}{217}{paragraph*.337}
\contentsline {subsection}{\numberline {2.17.4}Windows}{218}{subsection.2.17.4}
\contentsline {subsubsection}{Q. Windows seems to spawn \emph {ruffus} processes recursively}{218}{subsubsection*.338}
\contentsline {subsection}{\numberline {2.17.5}Sun Grid Engine / PBS / SLURM etc}{219}{subsection.2.17.5}
\contentsline {subsubsection}{Q. Can Ruffus be used to manage a cluster or grid based pipeline?}{219}{subsubsection*.339}
\contentsline {subsubsection}{Q. When I submit lots of jobs via Sun Grid Engine (SGE), the head node occassionally freezes and dies}{219}{subsubsection*.340}
\contentsline {subsubsection}{Q. Keeping Large intermediate files}{219}{subsubsection*.341}
\contentsline {subsection}{\numberline {2.17.6}Sharing python objects between Ruffus processes running concurrently}{219}{subsection.2.17.6}
\contentsline {subsubsection}{Can ordinary python objects be shared between processes?}{220}{subsubsection*.342}
\contentsline {subsubsection}{Why am I getting \texttt {PicklingError}?}{220}{subsubsection*.343}
\contentsline {subsubsection}{How about synchronising python objects in real time?}{221}{subsubsection*.344}
\contentsline {subsubsection}{Can I share and synchronise my own python classes via proxies?}{221}{subsubsection*.345}
\contentsline {subsubsection}{How do I send python objects back and forth without tangling myself in horrible synchronisation code?}{222}{subsubsection*.346}
\contentsline {subsubsection}{How do I share large amounts of data efficiently across processes?}{222}{subsubsection*.347}
\contentsline {section}{\numberline {2.18}Glossary}{222}{section.2.18}
\contentsline {section}{\numberline {2.19}Hall of Fame: User contributed flowcharts}{223}{section.2.19}
\contentsline {subsection}{\numberline {2.19.1}RNASeq pipeline}{224}{subsection.2.19.1}
\contentsline {subsection}{\numberline {2.19.2}non-coding evolutionary constraints}{226}{subsection.2.19.2}
\contentsline {subsection}{\numberline {2.19.3}SNP annotation}{226}{subsection.2.19.3}
\contentsline {subsection}{\numberline {2.19.4}Chip-Seq analysis}{227}{subsection.2.19.4}
\contentsline {section}{\numberline {2.20}Why \emph {Ruffus}?}{227}{section.2.20}
\contentsline {chapter}{\numberline {3}Examples}{229}{chapter.3}
\contentsline {section}{\numberline {3.1}Construction of a simple pipeline to run BLAST jobs}{229}{section.3.1}
\contentsline {subsection}{\numberline {3.1.1}Overview}{229}{subsection.3.1.1}
\contentsline {subsection}{\numberline {3.1.2}Prerequisites}{229}{subsection.3.1.2}
\contentsline {subsubsection}{1. Ruffus}{229}{subsubsection*.354}
\contentsline {subsubsection}{2. BLAST}{230}{subsubsection*.355}
\contentsline {subsubsection}{3. human refseq sequence database}{230}{subsubsection*.356}
\contentsline {subsubsection}{4. test sequences}{230}{subsubsection*.357}
\contentsline {subsection}{\numberline {3.1.3}Code}{230}{subsection.3.1.3}
\contentsline {subsection}{\numberline {3.1.4}Step 1. Splitting up the query sequences}{230}{subsection.3.1.4}
\contentsline {subsection}{\numberline {3.1.5}Step 2. Run BLAST jobs in parallel}{231}{subsection.3.1.5}
\contentsline {subsection}{\numberline {3.1.6}Step 3. Combining BLAST results}{231}{subsection.3.1.6}
\contentsline {subsection}{\numberline {3.1.7}Step 4. Running the pipeline}{232}{subsection.3.1.7}
\contentsline {subsection}{\numberline {3.1.8}Step 5. Testing dependencies}{232}{subsection.3.1.8}
\contentsline {subsection}{\numberline {3.1.9}What is next?}{233}{subsection.3.1.9}
\contentsline {section}{\numberline {3.2}Part 2: A slightly more practical pipeline to run blasts jobs}{233}{section.3.2}
\contentsline {subsection}{\numberline {3.2.1}Overview}{233}{subsection.3.2.1}
\contentsline {subsection}{\numberline {3.2.2}Step 1. Cleaning up any leftover junk from previous pipeline runs}{234}{subsection.3.2.2}
\contentsline {subsection}{\numberline {3.2.3}Step 2. Adding a ``flag'' file to mark successful completion}{234}{subsection.3.2.3}
\contentsline {subsection}{\numberline {3.2.4}Step 3. Allowing the script to be invoked on the command line}{235}{subsection.3.2.4}
\contentsline {subsection}{\numberline {3.2.5}Step 4. Printing out a flowchart for the pipeline}{235}{subsection.3.2.5}
\contentsline {subsection}{\numberline {3.2.6}Step 5. Errors}{235}{subsection.3.2.6}
\contentsline {subsection}{\numberline {3.2.7}Step 6. Will it run?}{236}{subsection.3.2.7}
\contentsline {section}{\numberline {3.3}Ruffus code}{237}{section.3.3}
\contentsline {section}{\numberline {3.4}Ruffus code}{238}{section.3.4}
\contentsline {section}{\numberline {3.5}Example code for \emph {FAQ Good practices: ``What is the best way of handling data in file pairs (or triplets etc.)?''}}{242}{section.3.5}
\contentsline {chapter}{\numberline {4}Reference:}{245}{chapter.4}
\contentsline {section}{\numberline {4.1}Decorators}{245}{section.4.1}
\contentsline {subsection}{\numberline {4.1.1}Ruffus Decorators}{245}{subsection.4.1.1}
\contentsline {subsubsection}{\emph {Core}}{245}{subsubsection*.358}
\contentsline {subsubsection}{\emph {Combinatorics}}{247}{subsubsection*.359}
\contentsline {subsubsection}{\emph {Advanced}}{249}{subsubsection*.360}
\contentsline {subsubsection}{\emph {Esoteric!}}{250}{subsubsection*.361}
\contentsline {subsection}{\numberline {4.1.2}Indicator Objects}{250}{subsection.4.1.2}
\contentsline {subsubsection}{\emph {formatter}}{250}{subsubsection*.362}
\contentsline {subsubsection}{\emph {suffix}}{253}{subsubsection*.363}
\contentsline {subsubsection}{\emph {regex}}{254}{subsubsection*.364}
\contentsline {subsubsection}{\emph {add\_inputs}}{254}{subsubsection*.365}
\contentsline {subsubsection}{\emph {inputs}}{255}{subsubsection*.366}
\contentsline {subsubsection}{\emph {mkdir}}{256}{subsubsection*.367}
\contentsline {subsubsection}{\emph {touch\_file}}{256}{subsubsection*.368}
\contentsline {subsubsection}{\emph {output\_from}}{257}{subsubsection*.369}
\contentsline {subsubsection}{\emph {combine}}{257}{subsubsection*.370}
\contentsline {subsection}{\numberline {4.1.3}\emph {@originate} ( \emph {output}, {[}\emph {extras},...{]} )}{259}{subsection.4.1.3}
\contentsline {subsection}{\numberline {4.1.4}@split ( \emph {input}, \emph {output}, {[}\emph {extras},...{]} )}{259}{subsection.4.1.4}
\contentsline {subsection}{\numberline {4.1.5}@transform( \emph {input}, \emph {filter}, \emph {output}, {[}\emph {extras},...{]} )}{259}{subsection.4.1.5}
\contentsline {subsection}{\numberline {4.1.6}@merge ( \emph {input}, \emph {output}, {[}\emph {extras},...{]} )}{259}{subsection.4.1.6}
\contentsline {subsection}{\numberline {4.1.7}@subdivide}{261}{subsection.4.1.7}
\contentsline {subsubsection}{\emph {@subdivide} ( \emph {input}, \emph {regex}\emph {(}\emph {matching\_regex}\emph {)} \textbar {} \emph {formatter}\emph {(}\emph {matching\_formatter}\emph {)}, {[} \emph {inputs} \emph {(}\emph {input\_pattern\_or\_glob}\emph {)} \textbar {} \emph {add\_inputs} \emph {(}\emph {input\_pattern\_or\_glob}\emph {)} {]}, \emph {output}, {[}\emph {extras},...{]} )}{261}{subsubsection*.427}
\contentsline {subsection}{\numberline {4.1.8}@transform( \emph {input}, \emph {filter}, \emph {replace\_inputs} \textbar {} \emph {add\_inputs}, \emph {output}, {[}\emph {extras},...{]} )}{261}{subsection.4.1.8}
\contentsline {subsection}{\numberline {4.1.9}@collate( \emph {input}, \emph {filter}, \emph {output}, {[}\emph {extras},...{]} )}{261}{subsection.4.1.9}
\contentsline {subsection}{\numberline {4.1.10}@collate( \emph {input}, \emph {filter}, \emph {replace\_inputs} \textbar {} \emph {add\_inputs}, \emph {output}, {[}\emph {extras},...{]} )}{261}{subsection.4.1.10}
\contentsline {subsection}{\numberline {4.1.11}@graphviz}{261}{subsection.4.1.11}
\contentsline {subsubsection}{\emph {@graphviz} ( \emph {graphviz\_parameters},...{]} )}{261}{subsubsection*.501}
\contentsline {subsection}{\numberline {4.1.12}@mkdir( \emph {input}, \emph {filter}, \emph {output} )}{261}{subsection.4.1.12}
\contentsline {subsection}{\numberline {4.1.13}@jobs\_limit}{261}{subsection.4.1.13}
\contentsline {subsubsection}{\emph {@jobs\_limit} ( \emph {maximum\_num\_of\_jobs}, {[} \emph {name} {]})}{261}{subsubsection*.523}
\contentsline {subsection}{\numberline {4.1.14}@posttask}{261}{subsection.4.1.14}
\contentsline {subsubsection}{\emph {@posttask} (\emph {function} \textbar {} \emph {touch\_file}\emph {(}\emph {file\_name}\emph {)})}{261}{subsubsection*.529}
\contentsline {subsection}{\numberline {4.1.15}@active\_if}{261}{subsection.4.1.15}
\contentsline {subsubsection}{\emph {@active\_if}(on\_or\_off1, {[}on\_or\_off2,...{]})}{261}{subsubsection*.533}
\contentsline {subsection}{\numberline {4.1.16}@follows}{261}{subsection.4.1.16}
\contentsline {subsubsection}{\emph {@follows}(\emph {task} \textbar {} \emph {``task\_name''} \textbar {} \emph {mkdir} (\emph {directory\_name}), {[}more\_tasks, ...{]})}{261}{subsubsection*.541}
\contentsline {subsection}{\numberline {4.1.17}@product( \emph {input}, \emph {filter}, {[}\emph {input2}, \emph {filter2}, ...{]}, \emph {output}, {[}\emph {extras},...{]} )}{263}{subsection.4.1.17}
\contentsline {subsection}{\numberline {4.1.18}@permutations( \emph {input}, \emph {filter}, \emph {tuple\_size}, \emph {output}, {[}\emph {extras},...{]} )}{263}{subsection.4.1.18}
\contentsline {subsection}{\numberline {4.1.19}@combinations( \emph {input}, \emph {filter}, \emph {tuple\_size}, \emph {output}, {[}\emph {extras},...{]} )}{263}{subsection.4.1.19}
\contentsline {subsection}{\numberline {4.1.20}@combinations\_with\_replacement( \emph {input}, \emph {filter}, \emph {tuple\_size}, \emph {output}, {[}\emph {extras},...{]} )}{263}{subsection.4.1.20}
\contentsline {subsection}{\numberline {4.1.21}Generating parameters on the fly for @files}{265}{subsection.4.1.21}
\contentsline {subsubsection}{\emph {@files} (\emph {custom\_function})}{265}{subsubsection*.617}
\contentsline {subsection}{\numberline {4.1.22}@check\_if\_uptodate}{265}{subsection.4.1.22}
\contentsline {subsubsection}{\emph {@check\_if\_uptodate} (\emph {dependency\_checking\_function})}{265}{subsubsection*.620}
\contentsline {subsection}{\numberline {4.1.23}@parallel}{265}{subsection.4.1.23}
\contentsline {subsubsection}{\emph {@parallel} ( {[} {[}\emph {job\_params}, ...{]}, {[}\emph {job\_params}, ...{]}...{]} \textbar {} \emph {parameter\_generating\_function})}{265}{subsubsection*.625}
\contentsline {subsection}{\numberline {4.1.24}@files}{267}{subsection.4.1.24}
\contentsline {subsubsection}{\emph {@files} (\emph {input1}, \emph {output1}, {[}\emph {extra\_parameters1}, ...{]})}{267}{subsubsection*.639}
\contentsline {paragraph}{@files for single jobs}{267}{paragraph*.640}
\contentsline {subsubsection}{\emph {@files} ( \emph {((} \emph {input}, \emph {output}, {[}\emph {extra\_parameters},...{]} \emph {), (...), ...)} )}{267}{subsubsection*.644}
\contentsline {paragraph}{@files in parallel}{267}{paragraph*.645}
\contentsline {subsection}{\numberline {4.1.25}@files\_re}{267}{subsection.4.1.25}
\contentsline {subsubsection}{\emph {@files\_re} (\emph {tasks\_or\_file\_names}, \emph {matching\_regex}, {[}\emph {input\_pattern}{]}, \emph {output\_pattern}, {[}\emph {extra\_parameters},...{]})}{267}{subsubsection*.659}
\contentsline {paragraph}{Legacy design now deprecated. We suggest using \emph {@transform()} instead}{267}{paragraph*.660}
\contentsline {section}{\numberline {4.2}Modules:}{268}{section.4.2}
\contentsline {subsection}{\numberline {4.2.1}ruffus.Task}{268}{subsection.4.2.1}
\contentsline {subsubsection}{Decorators}{268}{subsubsection*.666}
\contentsline {subsubsection}{Pipeline functions}{268}{subsubsection*.667}
\contentsline {paragraph}{pipeline\_run}{268}{paragraph*.668}
\contentsline {paragraph}{pipeline\_printout}{270}{paragraph*.670}
\contentsline {paragraph}{pipeline\_printout\_graph}{271}{paragraph*.672}
\contentsline {subsubsection}{Logging}{271}{subsubsection*.674}
\contentsline {subsubsection}{Implementation:}{272}{subsubsection*.677}
\contentsline {paragraph}{Parameter factories:}{272}{paragraph*.678}
\contentsline {paragraph}{Wrappers around jobs:}{272}{paragraph*.685}
\contentsline {paragraph}{Checking if job is update:}{273}{paragraph*.689}
\contentsline {subsubsection}{Exceptions and Errors}{273}{subsubsection*.692}
\contentsline {subsection}{\numberline {4.2.2}ruffus.proxy\_logger}{273}{subsection.4.2.2}
\contentsline {subsubsection}{Create proxy for logging for use with multiprocessing}{273}{subsubsection*.696}
\contentsline {paragraph}{Example 1}{273}{paragraph*.697}
\contentsline {paragraph}{Example 2}{273}{paragraph*.698}
\contentsline {paragraph}{Example 3}{274}{paragraph*.699}
\contentsline {paragraph}{To use:}{274}{paragraph*.700}
\contentsline {subsubsection}{Proxies for a log:}{274}{subsubsection*.701}
\contentsline {subsubsection}{Create a logging object}{275}{subsubsection*.703}
\contentsline {chapter}{\numberline {5}Indices and tables}{277}{chapter.5}
\contentsline {chapter}{Python Module Index}{279}{section*.705}
