\BOOKMARK [0][-]{chapter.1}{Start Here:}{}% 1
\BOOKMARK [1][-]{section.1.1}{Installation}{chapter.1}% 2
\BOOKMARK [1][-]{section.1.2}{Ruffus Manual: List of Chapters and Example code}{chapter.1}% 3
\BOOKMARK [1][-]{section.1.3}{Chapter 1: An introduction to basic Ruffus syntax}{chapter.1}% 4
\BOOKMARK [1][-]{section.1.4}{Chapter 2: Transforming data in a pipeline with @transform}{chapter.1}% 5
\BOOKMARK [1][-]{section.1.5}{Chapter 3: More on @transform-ing data}{chapter.1}% 6
\BOOKMARK [1][-]{section.1.6}{Chapter 4: Creating files with @originate}{chapter.1}% 7
\BOOKMARK [1][-]{section.1.7}{Chapter 5: Understanding how your pipeline works with pipeline\137printout\(...\)}{chapter.1}% 8
\BOOKMARK [1][-]{section.1.8}{Chapter 6: Running Ruffus from the command line with ruffus.cmdline}{chapter.1}% 9
\BOOKMARK [1][-]{section.1.9}{Chapter 7: Displaying the pipeline visually with pipeline\137printout\137graph\(...\)}{chapter.1}% 10
\BOOKMARK [1][-]{section.1.10}{Chapter 8: Specifying output file names with formatter\(\) and regex\(\)}{chapter.1}% 11
\BOOKMARK [1][-]{section.1.11}{Chapter 9: Preparing directories for output with @mkdir\(\)}{chapter.1}% 12
\BOOKMARK [1][-]{section.1.12}{Chapter 10: Checkpointing: Interrupted Pipelines and Exceptions}{chapter.1}% 13
\BOOKMARK [1][-]{section.1.13}{Chapter 11: Pipeline topologies and a compendium of Ruffus decorators}{chapter.1}% 14
\BOOKMARK [1][-]{section.1.14}{Chapter 12: Splitting up large tasks / files with @split}{chapter.1}% 15
\BOOKMARK [1][-]{section.1.15}{Chapter 13: @merge multiple input into a single result}{chapter.1}% 16
\BOOKMARK [1][-]{section.1.16}{Chapter 14: Multiprocessing, drmaa and Computation Clusters}{chapter.1}% 17
\BOOKMARK [1][-]{section.1.17}{Chapter 15: Logging progress through a pipeline}{chapter.1}% 18
\BOOKMARK [1][-]{section.1.18}{Chapter 16: @subdivide tasks to run efficiently and regroup with @collate}{chapter.1}% 19
\BOOKMARK [1][-]{section.1.19}{Chapter 17: @combinations, @permutations and all versus all @product}{chapter.1}% 20
\BOOKMARK [1][-]{section.1.20}{Chapter 18: Turning parts of the pipeline on and off at runtime with @active\137if}{chapter.1}% 21
\BOOKMARK [1][-]{section.1.21}{Chapter 19: Signal the completion of each stage of our pipeline with @posttask}{chapter.1}% 22
\BOOKMARK [1][-]{section.1.22}{Chapter 20: Manipulating task inputs via string substitution using inputs\(\) and add\137inputs\(\)}{chapter.1}% 23
\BOOKMARK [1][-]{section.1.23}{Chapter 21: Esoteric: Generating parameters on the fly with @files}{chapter.1}% 24
\BOOKMARK [1][-]{section.1.24}{Chapter 22: Esoteric: Running jobs in parallel without files using @parallel}{chapter.1}% 25
\BOOKMARK [1][-]{section.1.25}{Chapter 23: Esoteric: Writing custom functions to decide which jobs are up to date with @check\137if\137uptodate}{chapter.1}% 26
\BOOKMARK [1][-]{section.1.26}{Appendix 1: Flow Chart Colours with pipeline\137printout\137graph\(...\)}{chapter.1}% 27
\BOOKMARK [1][-]{section.1.27}{Appendix 2: How dependency is checked}{chapter.1}% 28
\BOOKMARK [1][-]{section.1.28}{Appendix 3: Exceptions thrown inside pipelines}{chapter.1}% 29
\BOOKMARK [1][-]{section.1.29}{Appendix 4: Names exported from Ruffus}{chapter.1}% 30
\BOOKMARK [1][-]{section.1.30}{Appendix 5: @files: Deprecated syntax}{chapter.1}% 31
\BOOKMARK [1][-]{section.1.31}{Appendix 6: @files\137re: Deprecated syntax using regular expressions}{chapter.1}% 32
\BOOKMARK [1][-]{section.1.32}{Chapter 1: Python Code for An introduction to basic Ruffus syntax}{chapter.1}% 33
\BOOKMARK [1][-]{section.1.33}{Chapter 1: Python Code for Transforming data in a pipeline with @transform}{chapter.1}% 34
\BOOKMARK [1][-]{section.1.34}{Chapter 3: Python Code for More on @transform-ing data}{chapter.1}% 35
\BOOKMARK [1][-]{section.1.35}{Chapter 4: Python Code for Creating files with @originate}{chapter.1}% 36
\BOOKMARK [1][-]{section.1.36}{Chapter 5: Python Code for Understanding how your pipeline works with pipeline\137printout\(...\)}{chapter.1}% 37
\BOOKMARK [1][-]{section.1.37}{Chapter 7: Python Code for Displaying the pipeline visually with pipeline\137printout\137graph\(...\)}{chapter.1}% 38
\BOOKMARK [1][-]{section.1.38}{Chapter 8: Python Code for Specifying output file names with formatter\(\) and regex\(\)}{chapter.1}% 39
\BOOKMARK [1][-]{section.1.39}{Chapter 9: Python Code for Preparing directories for output with @mkdir\(\)}{chapter.1}% 40
\BOOKMARK [1][-]{section.1.40}{Chapter 10: Python Code for Checkpointing: Interrupted Pipelines and Exceptions}{chapter.1}% 41
\BOOKMARK [1][-]{section.1.41}{Chapter 12: Python Code for Splitting up large tasks / files with @split}{chapter.1}% 42
\BOOKMARK [1][-]{section.1.42}{Chapter 13: Python Code for @merge multiple input into a single result}{chapter.1}% 43
\BOOKMARK [1][-]{section.1.43}{Chapter 14: Python Code for Multiprocessing, drmaa and Computation Clusters}{chapter.1}% 44
\BOOKMARK [1][-]{section.1.44}{Chapter 15: Python Code for Logging progress through a pipeline}{chapter.1}% 45
\BOOKMARK [1][-]{section.1.45}{Chapter 16: Python Code for @subdivide tasks to run efficiently and regroup with @collate}{chapter.1}% 46
\BOOKMARK [1][-]{section.1.46}{Chapter 17: Python Code for @combinations, @permutations and all versus all @product}{chapter.1}% 47
\BOOKMARK [1][-]{section.1.47}{Chapter 20: Python Code for Manipulating task inputs via string substitution using inputs\(\) and add\137inputs\(\)}{chapter.1}% 48
\BOOKMARK [1][-]{section.1.48}{Chapter 21: Esoteric: Python Code for Generating parameters on the fly with @files}{chapter.1}% 49
\BOOKMARK [1][-]{section.1.49}{Appendix 1: Python code for Flow Chart Colours with pipeline\137printout\137graph\(...\)}{chapter.1}% 50
\BOOKMARK [0][-]{chapter.2}{Overview:}{}% 51
\BOOKMARK [1][-]{section.2.1}{Cheat Sheet}{chapter.2}% 52
\BOOKMARK [1][-]{section.2.2}{Pipeline functions}{chapter.2}% 53
\BOOKMARK [1][-]{section.2.3}{drmaa functions}{chapter.2}% 54
\BOOKMARK [1][-]{section.2.4}{Installation}{chapter.2}% 55
\BOOKMARK [1][-]{section.2.5}{Design \046 Architecture}{chapter.2}% 56
\BOOKMARK [1][-]{section.2.6}{Major Features added to Ruffus}{chapter.2}% 57
\BOOKMARK [1][-]{section.2.7}{Fixed Bugs}{chapter.2}% 58
\BOOKMARK [1][-]{section.2.8}{New Object orientated syntax for Ruffus in Version 2.6}{chapter.2}% 59
\BOOKMARK [1][-]{section.2.9}{Worked Example for New Object orientated syntax for Ruffus in Version 2.6}{chapter.2}% 60
\BOOKMARK [1][-]{section.2.10}{Python Code for: New Object orientated syntax for Ruffus in Version 2.6}{chapter.2}% 61
\BOOKMARK [1][-]{section.2.11}{Where I see Ruffus going}{chapter.2}% 62
\BOOKMARK [1][-]{section.2.12}{In up coming release:}{chapter.2}% 63
\BOOKMARK [1][-]{section.2.13}{Future Changes to Ruffus}{chapter.2}% 64
\BOOKMARK [1][-]{section.2.14}{Planned Improvements to Ruffus}{chapter.2}% 65
\BOOKMARK [1][-]{section.2.15}{Implementation Tips}{chapter.2}% 66
\BOOKMARK [1][-]{section.2.16}{Implementation notes}{chapter.2}% 67
\BOOKMARK [1][-]{section.2.17}{FAQ}{chapter.2}% 68
\BOOKMARK [1][-]{section.2.18}{Glossary}{chapter.2}% 69
\BOOKMARK [1][-]{section.2.19}{Hall of Fame: User contributed flowcharts}{chapter.2}% 70
\BOOKMARK [1][-]{section.2.20}{Why Ruffus?}{chapter.2}% 71
\BOOKMARK [0][-]{chapter.3}{Examples}{}% 72
\BOOKMARK [1][-]{section.3.1}{Construction of a simple pipeline to run BLAST jobs}{chapter.3}% 73
\BOOKMARK [1][-]{section.3.2}{Part 2: A slightly more practical pipeline to run blasts jobs}{chapter.3}% 74
\BOOKMARK [1][-]{section.3.3}{Ruffus code}{chapter.3}% 75
\BOOKMARK [1][-]{section.3.4}{Ruffus code}{chapter.3}% 76
\BOOKMARK [1][-]{section.3.5}{Example code for FAQ Good practices: ``What is the best way of handling data in file pairs \(or triplets etc.\)?''}{chapter.3}% 77
\BOOKMARK [0][-]{chapter.4}{Reference:}{}% 78
\BOOKMARK [1][-]{section.4.1}{Decorators}{chapter.4}% 79
\BOOKMARK [1][-]{section.4.2}{Modules:}{chapter.4}% 80
\BOOKMARK [0][-]{chapter.5}{Indices and tables}{}% 81
\BOOKMARK [0][-]{section*.705}{Python Module Index}{}% 82
