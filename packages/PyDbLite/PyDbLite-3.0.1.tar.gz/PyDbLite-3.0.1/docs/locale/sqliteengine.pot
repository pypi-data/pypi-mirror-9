# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Pierre Quentel, Bendik RÃ¸nning Opstad
# This file is distributed under the same license as the PyDbLite package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyDbLite 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-09 23:17+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/sqliteengine.rst:4
# 13e5e5cb66f24a4bb8e7a27e12963901
msgid "SQLite adapter"
msgstr ""

#: ../../source/sqliteengine.rst:9
# bcff77dd86204f088dee920a8d58c4b7
msgid "The main difference with the pure-Python module is the syntax to identify a database and a table, and the need to specify field types on base creation"
msgstr ""

#: ../../source/sqliteengine.rst:11
# ea1a9929463c4a4b99b661705d61bc8d
msgid "For compliance with SQLite vocabulary, the module defines two classes, :class:`Database <pydblite.sqlite.Database>` and :class:`Table <pydblite.sqlite.Table>`"
msgstr ""

#: ../../source/sqliteengine.rst:14
# cfb5dabd69994af393e776148694275c
msgid "Database"
msgstr ""

#: ../../source/sqliteengine.rst:16
# 330f7ba01d204b11acd18372f5424e8a
msgid ":python:`Database(db_path[,**kw])` : db_path is the database path in the file system. The keyword arguments are the same as for the method :python:`connect()` of the Python built-in module sqlite3"
msgstr ""

#: ../../source/sqliteengine.rst:18
# ff482efd404d4a14af5ddabe7637e4db
msgid "Instances of Database are dictionary-like objects, where keys are the table names and values are instances of the Table class"
msgstr ""

#: ../../source/sqliteengine.rst:20
# ae103749d02d4c61af8e5ffa2380b20d
msgid ":python:`db[\"foo\"]` returns the instance of the Table class for table \"foo\""
msgstr ""

#: ../../source/sqliteengine.rst:21
# 2e9f6f1869324d48b7c908aa7b1ae863
msgid ":python:`db.keys()` returns the table names"
msgstr ""

#: ../../source/sqliteengine.rst:22
# 6ef4e5bae285481fbe67d70a8d3b1e72
msgid ":python:`if \"foo\" in db` tests if table \"foo\" exists in the database"
msgstr ""

#: ../../source/sqliteengine.rst:23
# bdbd3883bb994a679da43cfb85086e4e
msgid ":python:`del db[\"foo\"]` drops the table \"foo\""
msgstr ""

#: ../../source/sqliteengine.rst:25
# cc982545989e4107be3ada442f98ddb6
msgid "To create a new table"
msgstr ""

#: ../../source/sqliteengine.rst:31
# aedc5186d2924b0eb8e07e10bcc28fa0
msgid "The fields must be 2-element tuples :python:`(field_name, field_type)` where field_type is an SQLite field type"
msgstr ""

#: ../../source/sqliteengine.rst:33
#: ../../source/sqliteengine.rst:90
# 1a0c2e95bc494787a3983f40a87e206e
# 0fa39c7884764242a7102ffc55521645
msgid "INTEGER"
msgstr ""

#: ../../source/sqliteengine.rst:34
#: ../../source/sqliteengine.rst:92
# c757828e8a4a40cdbb1f18465164395f
# ef0d7c7a39334beb8d84bdabdbc5721a
msgid "REAL"
msgstr ""

#: ../../source/sqliteengine.rst:35
#: ../../source/sqliteengine.rst:86
# 9de937b192f74c30934cf8d1a63dc4d8
# afb789a1fba5462db1be98809fb6c93c
msgid "TEXT"
msgstr ""

#: ../../source/sqliteengine.rst:36
#: ../../source/sqliteengine.rst:88
# c7d12544712343e2a9017cf84fb78b14
# 4d114fee41ae41b9a0fef9ddc1333c94
msgid "BLOB"
msgstr ""

#: ../../source/sqliteengine.rst:42
# 1591ea2d2d294d05ab92a9c589842587
msgid "If other information needs to be provided, put it in the second argument, using the SQL syntax for SQLite :"
msgstr ""

#: ../../source/sqliteengine.rst:48
# ef58358426b540c7809b77782489de1f
msgid "The optional keyword argument :python:`mode` specifies what you want to do if a table of the same name already exists in the database"
msgstr ""

#: ../../source/sqliteengine.rst:50
# 3240aeed8de0488e9313119e6efff0f3
msgid ":python:`mode=\"open\"` opens the table and ignores the field definition"
msgstr ""

#: ../../source/sqliteengine.rst:51
# 0f1ff28a80194624b76149cccc3095e5
msgid ":python:`mode=\"override\"` erases the existing table and creates a new one with the field definition"
msgstr ""

#: ../../source/sqliteengine.rst:52
# 7e998f9a488d472fabe47a73a683ef17
msgid "if :python:`mode` is not specified and the table already exists, an :python:`IOError` is raised"
msgstr ""

#: ../../source/sqliteengine.rst:55
# ffc2af0f586d4e86b1c68b2d08bb31fd
msgid "Table"
msgstr ""

#: ../../source/sqliteengine.rst:57
# f5eca33d439c432594729893162c4056
msgid "For record insertion, updating, deletion and selection the syntax is the same as for the :ref:`pure-Python module <pure-python-engine>`. The SQLite primary key rowid is used like the key :python:`__id__` to identify records"
msgstr ""

#: ../../source/sqliteengine.rst:59
# 9aaee92055b64223a7dbff85adcf7794
msgid "To insert many records at a time,"
msgstr ""

#: ../../source/sqliteengine.rst:65
# 558320a01fe6407fab2f3324e6bb24bd
msgid "will be much faster than"
msgstr ""

#: ../../source/sqliteengine.rst:72
# 3130c4cbe4de4a2aaacb3704e79041db
msgid "Note that you can't use the :python:`drop_field()` method, since dropping fields is not supported by SQLite"
msgstr ""

#: ../../source/sqliteengine.rst:75
# be29e9b38416435ebeb5be1f339181cc
msgid "Type conversion"
msgstr ""

#: ../../source/sqliteengine.rst:77
# 7228130fd8d0497a8949ac8d1fe8b84b
msgid "Conversions between Python types and SQLite field types use the behaviour of the Python SQLite module. :python:`datetime.date` and :python:`datetime.datetime` instances are stored as ISO dates/datetimes"
msgstr ""

#: ../../source/sqliteengine.rst:79
# e2fddd09e17a41db9a907ce72e0742fb
msgid "Selection methods return dictionaries, with SQLite types converted to Python types like this"
msgstr ""

#: ../../source/sqliteengine.rst:82
# 2a1d4b6f1fc342798402775ecab16b75
msgid "SQLite type"
msgstr ""

#: ../../source/sqliteengine.rst:82
# 4560d2a5abe5449bb86c603ba66a142d
msgid "Python type"
msgstr ""

#: ../../source/sqliteengine.rst:84
# c51d734a89d247fa9f055b7b0be5737a
msgid "NULL"
msgstr ""

#: ../../source/sqliteengine.rst:84
# fb4e6193b347483f949410898f5ea311
msgid "None"
msgstr ""

#: ../../source/sqliteengine.rst:86
# 6dd87cba92134137b0bd2ae8eec14a93
msgid "unicode"
msgstr ""

#: ../../source/sqliteengine.rst:88
# 9a49fc98815e4e588c4d93bbc401c588
msgid "str"
msgstr ""

#: ../../source/sqliteengine.rst:90
# c504f7dba57b48949b94f85289fa5705
msgid "int"
msgstr ""

#: ../../source/sqliteengine.rst:92
# be27e4ccc6a4439d82d47cd2dda1f7dc
msgid "float"
msgstr ""

#: ../../source/sqliteengine.rst:95
# 17555bd5bbeb420ba2b59b511a89324f
msgid "If you want fields to be returned as instances of datetime.date, datetime.time or datetime.datetime instances, you can specify it when creating or opening the table, using methods :func:`is_date(field_name) <pydblite.sqlite.Table.is_date>`, :func:`is_time(field_name) <pydblite.sqlite.Table.is_time>` or :func:`is_datetime(field_name) <pydblite.sqlite.Table.is_datetime>`."
msgstr ""

#: ../../source/sqliteengine.rst:104
# 63e1b071b14545fbb5086d5d7b4b140a
msgid "cursor and commit"
msgstr ""

#: ../../source/sqliteengine.rst:106
# 6a4f09aad9d7463fbb099c3f78450e63
msgid "Intances of :class:`Database <pydblite.sqlite.Database>` and :class:`Table <pydblite.sqlite.Table>` have the attribute :attr:`cursor <pydblite.sqlite.Database.cursor>`, the SQLite connections cursor, so you can also execute SQL expressions by"
msgstr ""

#: ../../source/sqliteengine.rst:112
# 2a577c53531c4a1f910f44b84eadcd84
msgid "and get the result by"
msgstr ""

#: ../../source/sqliteengine.rst:118
# 7348a22044f9442f8b5a05439146a407
msgid "the method :func:`commit() <pydblite.sqlite.Database.commit>` saves the changes to a database after a transaction"
msgstr ""

