# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Pierre Quentel, Bendik Rønning Opstad
# This file is distributed under the same license as the PyDbLite package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyDbLite 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-09 23:17+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/pythonengine.rst:4
# f3bf2da042d042b4890425349b9538e4
msgid "Pure-Python engine"
msgstr ""

#: ../../source/pythonengine.rst:9
# 5dadf54eea814a4fa7597030320b176c
msgid "The pure-Python engine consists of one module, pydblite.py. To use it, import the class :class:`Base <pydblite.pydblite._Base>` from this module:"
msgstr "Le moteur pur-Python consiste en un module unique, pydblite.py. Pour l'utiliser, importer la classe :class:`Base <pydblite.pydblite._Base>` depuis ce module:"

#: ../../source/pythonengine.rst:16
# 45fcdef0c22f4aab9ca137f90e51ced1
msgid "Create or open a database"
msgstr ""

#: ../../source/pythonengine.rst:18
# af4b1300d1384b1b939c20c3b340108e
msgid "Create a database instance, passing it a path in the file system"
msgstr "créer une instance de base de données, en donnant un nom de fichier comme argument"

#: ../../source/pythonengine.rst:24
# 8a4ec52293d64303a7c9c5ed3828e488
msgid "For a new database, define the field names"
msgstr "Pour une nouvelle base, définissez les noms des champs"

#: ../../source/pythonengine.rst:30
# 72bf303a608e459fa5bb0b1871534ad5
msgid "You don't have to define the field types. Any value will be accepted as long as it can be serialized by the cPickle module:"
msgstr "Vous n'avez pas à définir le type des champs. PyDbLite accepte toute valeur qui peut être sérialisée par le module cPickle"

#: ../../source/pythonengine.rst:32
# 92e92519d36d455b834b85f28f283066
msgid "strings"
msgstr ""

#: ../../source/pythonengine.rst:33
# d4c37cd21ea341ba95874f42dc13fc11
msgid "Unicode strings"
msgstr ""

#: ../../source/pythonengine.rst:34
# 38124073ebe94cbda531fa7c8f8e38f9
msgid "integers"
msgstr ""

#: ../../source/pythonengine.rst:35
# 90aca226de124f3488fe2dd5dfd8920b
msgid "floats"
msgstr ""

#: ../../source/pythonengine.rst:36
# 1cb59389342541e089d8091d092b9589
msgid "dates and datetimes (instances of the date and datetime classes in the datetime module)"
msgstr ""

#: ../../source/pythonengine.rst:37
# a3bdbf121c7e43c79cd47d89db16680a
msgid "user-defined classes"
msgstr ""

#: ../../source/pythonengine.rst:40
# e50c4ee7beb84c89933a81412eb5df47
msgid "indicates if the base exists."
msgstr "indique si la base existe."

#: ../../source/pythonengine.rst:42
# 18862da61d6b4c08ad5e2b86870157a8
msgid "if the base exists, open it"
msgstr "si la base existe déjà, pour l'ouvrir"

#: ../../source/pythonengine.rst:49
# 1a5d2915f3f04827af865d94dc1366c7
msgid "You can pass a parameter \"mode\" to the :func:`create() <pydblite.pydblite._Base.create>` method, to specify what you want to do if the base already exists in the file system"
msgstr "on peut passer un paramètre "mode" à la méthode :func:`create() <pydblite.pydblite._Base.create>`, pour indiquer ce qu'il faut faire si la base existe déjà sur le disque"

#: ../../source/pythonengine.rst:51
# c799b001704e40428b05f579d8ba1930
msgid "opens the database and ignores the field definition"
msgstr "ouvre la base en ignorant la définition des champs"

#: ../../source/pythonengine.rst:52
# aa7fcc9eb32a4b5899d2c5505f8990de
msgid "erases the existing base and creates a new one with the field definition"
msgstr "efface la base existante et en crée une nouvelle avec les définitions de champs"

#: ../../source/pythonengine.rst:53
# 60992fdf5cb3437ba1a42debc171387f
msgid "if :python:`mode` is not specified and the base already exists, an :python:`IOError` is raised"
msgstr "si le :python:`mode` n'est pas précisé et que la base existe déjà, une exception IOError est déclenchée"

#: ../../source/pythonengine.rst:56
# ea82a2d2249e49198132489232bd0967
msgid "Insert, update, delete a record"
msgstr ""

#: ../../source/pythonengine.rst:59
# 31e361d83cbc462c8154f5ddaf51a4c0
msgid "insert a new record"
msgstr ""

#: ../../source/pythonengine.rst:62
# 15920ef182e04736bb8efacbd1af73ea
msgid "by keywords"
msgstr ""

#: ../../source/pythonengine.rst:68
# fecddaa4461b4044815a278d51792ac9
msgid "If some fields are missing, they are initialized with the value None"
msgstr ""

#: ../../source/pythonengine.rst:71
# bcc6f7194b684364951ecb1361c2dfbb
msgid "by positional arguments"
msgstr ""

#: ../../source/pythonengine.rst:77
# 5dba124666a24c398ab0be64ed7997be
msgid "The arguments must be provided in the same order as in the :python:`create()` method"
msgstr ""

#: ../../source/pythonengine.rst:80
# c41e8ec9dfa943a8b1b86d6909abd820
msgid "save the changes on disk"
msgstr ""

#: ../../source/pythonengine.rst:86
# 1a04bba35ded4ec5946860222ee736b0
msgid "If you don't commit the changes, the insertion, deletion and update operations will not be saved on disk. As long as changes are not commited, use :python:`open()` to restore the values as they are currently on disk (this is equivalent to rollback in transactional databases)"
msgstr ""

#: ../../source/pythonengine.rst:89
# 20e14bc2e48a478fbf5e4d5db6fca5b6
msgid "delete a record"
msgstr ""

#: ../../source/pythonengine.rst:95
# 59eaec7513ec4ae99688bdda564d4291
msgid "or, if you know the record identifier"
msgstr ""

#: ../../source/pythonengine.rst:102
# e1196225c95f42c0914ddeedaef6600b
msgid "to delete a list of records"
msgstr ""

#: ../../source/pythonengine.rst:108
# 038f4e6c72be4a9390417fb28ce113a6
msgid "where list_of_records can be any iterable (list, tuple, set, etc) yielding records"
msgstr ""

#: ../../source/pythonengine.rst:111
# 46b5662029874afeabb662c1e950923e
msgid "to update a record"
msgstr ""

#: ../../source/pythonengine.rst:118
# aaa7778b70ed4d249a41a6a4a49a4497
msgid "besides the fields passed to the :python:`create()` method, an internal field called :python:`__id__` is added. It is an integer which is guaranteed to be unique and unchanged for each record in the base, so that it can be used as the record identifier"
msgstr ""

#: ../../source/pythonengine.rst:119
# 3558eb25c81942b2ae0fe5b7a35bbe2d
msgid "another internal field called :python:`__version__` is also managed by the database engine. It is an integer which is set to 0 when the record is created, then incremented by 1 each time the record is updated. This is used to detect concurrency control, for instance in a web application where 2 users select the same record and want to update it at the same time"
msgstr ""

#: ../../source/pythonengine.rst:123
# 5cb9ccf3d6644c26bba4aa5f703e8389
msgid "Selection"
msgstr ""

#: ../../source/pythonengine.rst:125
# dcc6c02d20d04344ac530630f6054123
msgid "The instance of Base is a Python iterator"
msgstr ""

#: ../../source/pythonengine.rst:128
# 7a4a04fd1b4a44cf8fcfa9d44162d1d6
msgid "to iterate on all the records"
msgstr ""

#: ../../source/pythonengine.rst:136
# feed8be9f4994bd690f8d37c9f38d2bd
msgid "Direct access"
msgstr ""

#: ../../source/pythonengine.rst:138
# 88ff37cce4bd43e6aeb895f892e0d839
msgid "A record can be accessed by its identifier"
msgstr ""

#: ../../source/pythonengine.rst:144
# 913ba6f5b9e44cecb02cf3f3dd12f1de
msgid "returns the record such that :python:`record['__id__'] == rec_id`"
msgstr ""

#: ../../source/pythonengine.rst:147
# b61f82a5ea124047bcbeddf89e4e5e93
msgid "Simple selections"
msgstr ""

#: ../../source/pythonengine.rst:149
# cd6e7d46adad4fc6a915f5c5dca03170
msgid ":python:`db(key1=val1, key2=val2)` returns the list of records where the keys take the given values"
msgstr ""

#: ../../source/pythonengine.rst:150
# f2a902688d284abf96178f0d09c02122
msgid ":python:`db(key) >= val` returns an iterator on all records where the value of the field key is greater than or equal to val."
msgstr ""

#: ../../source/pythonengine.rst:152
# 4efc90299f0847188075a9d84f209fca
msgid "Example"
msgstr ""

#: ../../source/pythonengine.rst:159
# 9817f64f4bb242ee92f3971d2c327924
msgid "such \"rich comparison\" operations can be combined with & (AND) and | (OR)"
msgstr ""

#: ../../source/pythonengine.rst:167
# 2690519dfdd046d4a94d9057aac5e416
msgid "List comprehension"
msgstr ""

#: ../../source/pythonengine.rst:169
# 99161e8252d0426e9d15c8cca505fbf0
msgid "The selection of records can use Python list comprehension syntax"
msgstr ""

#: ../../source/pythonengine.rst:175
# bbfde5a3a7f7419488a0b24cadd9cd4c
msgid "Returns the records in the base where the age is between 18 and 30, and size is below 2 meters. The record is a dictionary, where the key is the field name and value is the field value"
msgstr ""

#: ../../source/pythonengine.rst:177
# a170211056334a8ca95d85de0b7a0536
msgid "Python generator expression syntax can also be used"
msgstr ""

#: ../../source/pythonengine.rst:184
# c7e8feec6a1f4ba68a3fcc015ab59dfd
msgid "iterates on the records where the name is one of 'homer' or 'marge'"
msgstr ""

#: ../../source/pythonengine.rst:187
# 57ebcdbe190147bb807bd469f59f4470
msgid "Index"
msgstr ""

#: ../../source/pythonengine.rst:189
# 13a5b641296f47d9af36488d14b53d20
msgid "To speed up selections, an index can be created on a field using :func:`create_index('field') <pydblite.pydblite._Base.create_index>`"
msgstr ""

#: ../../source/pythonengine.rst:195
# e575c6f5bb234513ac6a06693b7b8668
msgid "When an index is created, the database instance has an attribute (here :python:`_age` : note the heading underscore, to avoid name conflicts with internal names). This attribute is a dictionary-like object, where keys are the values taken by the field, and values are the records whose field values are egal to the key :"
msgstr ""

#: ../../source/pythonengine.rst:197
# 228d177a95ac47faa945b73a29bc8570
msgid ":python:`records = db._age[23]` returns the list of records with :python:`age == 23`"
msgstr ""

#: ../../source/pythonengine.rst:199
# e5cd01ef99a1415287be075f562bd0f3
msgid "If no record has this value, lookup by this value returns an empty list"
msgstr ""

#: ../../source/pythonengine.rst:201
# 3d3311f30fcb4ccfacfec9e3118a5d55
msgid "The index supports iteration on the field values, and the :python:`keys()` method returns all existing values for the field"
msgstr ""

#: ../../source/pythonengine.rst:204
# 63c3e512a3fd4361a1f7be7942b0f7dd
msgid "Other attributes and methods"
msgstr ""

#: ../../source/pythonengine.rst:206
# dcac1966890a4b269362be6553cd8a7b
msgid ":func:`add_field('new_field'[,default=v]) <pydblite.pydblite._Base.add_field>`: adds a new field to an existing base. :python:`default` is an optional default value ; set to :python:`None` if not specified"
msgstr ""

#: ../../source/pythonengine.rst:207
# 4ca5812845be4bb8929a3373e1f13167
msgid ":func:`drop_field('field') <pydblite.pydblite._Base.drop_field>`: drops an existing field"
msgstr ""

#: ../../source/pythonengine.rst:208
# 60bd1a93d5ec4901ba96d3bec7f5f1e5
msgid ":attr:`db.path <pydblite.pydblite._Base.path>`: the path of the database in the file system"
msgstr ""

#: ../../source/pythonengine.rst:209
# b9a63df221a142988afbaa1835eab90f
msgid ":attr:`db.name <pydblite.pydblite._Base.name>`: the database name : the basename of the path, stripped of its extension"
msgstr ""

#: ../../source/pythonengine.rst:210
# 40692ef05fdc4c47bfe036d8e9c426a3
msgid ":attr:`db.fields <pydblite.pydblite._Base.fields>`: the list of the fields (does not include the internal fields :python:`__id__` and :python:`__version__`)"
msgstr ""

#: ../../source/pythonengine.rst:211
# d4389fb0f792488e857ef1c532d3e371
msgid ":python:`len(db)` : number of records in the base"
msgstr ""

