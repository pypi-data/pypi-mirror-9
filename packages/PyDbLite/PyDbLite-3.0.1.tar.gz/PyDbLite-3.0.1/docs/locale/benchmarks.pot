# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Pierre Quentel, Bendik RÃ¸nning Opstad
# This file is distributed under the same license as the PyDbLite package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyDbLite 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-09 23:17+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/benchmarks.rst:2
# e76ec370267f447ab78bceb247a5a03f
msgid "Benchmarks"
msgstr ""

#: ../../source/benchmarks.rst:4
# cffa93089ce34f5ea55173c5712c9bfb
msgid "PyDbLite has been measured by the time taken by various operations for 3 pure-Python database modules (PyDbLite, buzhug and Gadfly) and compared them with SQLite."
msgstr ""

#: ../../source/benchmarks.rst:6
# 694602d936fe4d0799ae9785dfa69aa6
msgid "The tests are those described on the SQLite comparisons pages, which compares performance of SQLite to that of MySQL and PostGreSQL"
msgstr ""

#: ../../source/benchmarks.rst:10
# 1b734cc89d664ae5a81676ada9002652
msgid "insert"
msgstr ""

#: ../../source/benchmarks.rst:11
# bc2ed65cf8e34e47ba809ccd6552fad1
msgid "create the base and insert n elements (n= 1000, 25,000 or 100,000) in it"
msgstr ""

#: ../../source/benchmarks.rst:13
# 987c50cb06324659a9bdfba944ce4509
msgid "The database has 3 fields:"
msgstr ""

#: ../../source/benchmarks.rst:15
# 569e6c3026b24ed7ba3b1a3b96fd66e6
msgid "a (integer, from 1 to n)"
msgstr ""

#: ../../source/benchmarks.rst:16
# 4badcc6403454097987a1a10a211d2eb
msgid "b (random integer between 1 and 100000)"
msgstr ""

#: ../../source/benchmarks.rst:17
# 474584d8886b452a8aff6ae53267cb7b
msgid "c (a string, value = 'fifty nine' if b=59)"
msgstr ""

#: ../../source/benchmarks.rst:19
# 2fa8f2cb347c4454adeb16105436f1c7
msgid "For PyDbLite, gadfly and SQLite two options are possible : with an index on field a, or without index"
msgstr ""

#: ../../source/benchmarks.rst:21
# 1bfbbb74cf014ed3bf895c4dd269057e
msgid "The values of a, b, c are stored in a list recs"
msgstr ""

#: ../../source/benchmarks.rst:24
#: ../../source/benchmarks.rst:80
#: ../../source/benchmarks.rst:106
#: ../../source/benchmarks.rst:134
#: ../../source/benchmarks.rst:155
#: ../../source/benchmarks.rst:175
#: ../../source/benchmarks.rst:198
# ce15c5981549479e81c020a104a83d5e
# adb6ea36de664bd5bab6d7b33b7f4704
# b5363438c11749f28a4c92dafc827a94
# 8079a1fb71624189bb998c0c5ccc4654
# 4b30b52896a04214beb211954572da91
# 6ecea1e21f18409d9dd5c63695eb29f9
# 269a06baea894aa19f11a96fd1eccbcd
msgid "SQL statements"
msgstr ""

#: ../../source/benchmarks.rst:36
# 1aa2aa3ca477499a8b47a5ec8f68c1aa
msgid "PyDbLite code"
msgstr ""

#: ../../source/benchmarks.rst:48
#: ../../source/benchmarks.rst:90
#: ../../source/benchmarks.rst:116
#: ../../source/benchmarks.rst:143
#: ../../source/benchmarks.rst:164
#: ../../source/benchmarks.rst:185
#: ../../source/benchmarks.rst:208
# 15d03ba6944f4fafb6f33edcf4dfdb07
# f27d25f92962481fa7058bc53f4c033b
# 94f1146e6c4f49cc9485fb1c121b2f8a
# b3f2dccd5027439bab004b6b58ae5013
# e891fa630cc541bab41c2840556089cb
# 9ca85df5f72d4dd190fc4f09d00819bf
# e2315be48a204f15a826f15645b0c467
msgid "buzhug code"
msgstr ""

#: ../../source/benchmarks.rst:58
# 675b670f554046f9b91167912e6d743b
msgid "gadfly code"
msgstr ""

#: ../../source/benchmarks.rst:76
# 4b5a22731268420da5bd55d2ed1370dd
msgid "select1"
msgstr ""

#: ../../source/benchmarks.rst:77
# c3cccedc0a0749eab4305d3a08f33be7
msgid "100 selections to count the number of records and the average of field b for values of b between 10*n and 10*n + 1000 for n = 1 to 100"
msgstr ""

#: ../../source/benchmarks.rst:102
# 772c34171eec44d7aaec3f284935a855
msgid "select2"
msgstr ""

#: ../../source/benchmarks.rst:103
# a486e855944b4b2facbce775c0bc8670
msgid "100 selections to count the number of records and the average of field b for values of c with the string 'one', 'two', ...,'ninety nine' inside. It uses the keyword LIKE for SQL database (I couldn't do the test for Gadfly which doesn't support LIKE) ; for buzhug I use regular expressions. The strings for each number between 0 and 99 are stored in the list num_strings"
msgstr ""

#: ../../source/benchmarks.rst:129
# 97007fe497be49e1a734c4062ba241a0
msgid "delete1"
msgstr ""

#: ../../source/benchmarks.rst:130
# 0470580b2cbb40e997b951721c658de4
msgid "delete all the records where the field c contains the string 'fifty'. There again I couldn't do the test for gadfly"
msgstr ""

#: ../../source/benchmarks.rst:151
# 3250b486d87e4a17bc930364cd204ef2
msgid "delete2"
msgstr ""

#: ../../source/benchmarks.rst:152
# 5e289a027ba6402c8c41d25241ae4798
msgid "delete all the records for which the field a is > 10 and < 20000"
msgstr ""

#: ../../source/benchmarks.rst:171
# 2a91f4be3a20410c8d18aa3a7a471756
msgid "update1"
msgstr ""

#: ../../source/benchmarks.rst:172
# 6ab3d32420774370b71fb79cbfca3a62
msgid "1000 updates, multiply b by 2 for records where 10*n <= a < 10 * (n + 1) for n = 0 to 999"
msgstr ""

#: ../../source/benchmarks.rst:194
# c0d0128afb12491a9f69bb393118f019
msgid "update2"
msgstr ""

#: ../../source/benchmarks.rst:195
# c7220a0c04f742e8a8c0af3530b18681
msgid "1000 updates to set c to a random value where a = 1 to 1000 New values of field c are stored in a list new_c"
msgstr ""

#: ../../source/benchmarks.rst:216
# c74e15c0b8714be39a0097341b92bf3a
msgid "The tests were made on a Windows XP machine, with Python 2.5 (except gadfly : using the compile kjbuckets.pyd requires Python 2.2)"
msgstr ""

#: ../../source/benchmarks.rst:218
# 196e3793231f4ac9b8d23aeb21832bb1
msgid "Versions : PyDbLite 2.5, buzhug 1.6, gadfly 1.0.0, SQLite 3.0 embedded in Python 2.5 Results"
msgstr ""

#: ../../source/benchmarks.rst:221
# 59c40cbd252a4a7494f9026b098f4214
msgid "Here are the results"
msgstr ""

#: ../../source/benchmarks.rst:273
# 1f955a5ddf9049b5ae535c59cff8a27e
msgid "Conclusions PyDblite is as fast, and even faster than SQLite for small databases. It is faster than gadfly in all cases. buzhug is faster on most operations when size grows"
msgstr ""

