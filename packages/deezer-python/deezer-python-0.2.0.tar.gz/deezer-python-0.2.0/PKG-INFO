Metadata-Version: 1.1
Name: deezer-python
Version: 0.2.0
Summary: A friendly wrapper library for the Deezer API
Home-page: https://github.com/browniebroke/deezer-python
Author: Bruno Alla
Author-email: alla.brunoo@gmail.com
License: MIT
Download-URL: https://github.com/browniebroke/deezer-python/tarball/0.2.0
Description: deezer-python |build-status| |coverage-status| |docs| |pypi|
        ============================================================
        
        A friendly wrapper around the `Deezer API`_.
        
        Installation
        ------------
        
        Just download the tarball and use the package locally, I haven't tested installation using easy_install yet
        
        Basic Use
        ---------
        
        So far you can only retrieve the data for the public objects, for which no login is required.
        The objects are translated to python resources, which are basically python objects encapsulating 
        the json dictionary returned by the API. Search is not yet implemented.
        
        
            >>> client = deezer.Client()
            >>> client.get_album(12).title
            u'Monkey Business'
        
        You also can use AsyncClient with tornado.
        
        
            >>> from tornado.gen import coroutine
            >>> from tornado.ioloop import IOLoop
            >>> from deezer import AsyncClient
            >>>
            >>>
            >>> @coroutine
            ... def main():
            ...     client = AsyncClient()
            ...     album = yield client.get_album(12)
            ...     print(album.title)
            ...
            >>> IOLoop.instance().run_sync(main)
            Monkey Business
        
        See the whole API on the `Sphinx`_ generated `documentation`_.
        
        Authentication
        --------------
        
        Not supported yet, only public API accessible
        
        Running Tests
        -------------
        
        The unit tests are using python unittest framework, just run:
        
        ::
        
            % python -m unittest discover
            ......
            ----------------------------------------------------------------------
            Ran 6 tests in 0.448s
        
            OK
        
        
        .. |build-status| image:: https://travis-ci.org/browniebroke/deezer-python.png
            :target: https://travis-ci.org/browniebroke/deezer-python
            :alt: Build status
        .. |coverage-status| image:: https://coveralls.io/repos/browniebroke/deezer-python/badge.png
            :target: https://coveralls.io/r/browniebroke/deezer-python
            :alt: Test coverage percentage
        .. |docs| image:: https://readthedocs.org/projects/deezer-python/badge/?version=latest
            :target: http://deezer-python.readthedocs.org/
            :alt: Documentation Status
        .. |pypi| image:: https://badge.fury.io/py/deezer-python.svg
            :target: http://badge.fury.io/py/deezer-python
            :alt: PyPi Status
        .. _Deezer API: http://developers.deezer.com/api
        .. _Sphinx: http://sphinx-doc.org/
        .. _documentation: http://deezer-python.readthedocs.org/
        
        
        .. :changelog:
        
        History
        =======
        
        0.2.0 (2015-01-31)
        ------------------
        
        - Enriching the API for resources to get artists for a genre,
          top tracks of an artist, etc... Thanks to
          `Misuzu <https://github.com/misuzu>`_
        
        0.1.0 (2014-11-22)
        ------------------
        
        - Initial release.
        
        
        Credits
        =======
        
        “deezer-python” is written and maintained by Bruno Alla.
        
        
        Contributors
        ------------
        
        Other people contributed to this project:
        
        - `Misuzu <https://github.com/misuzu>`_
        
        Please add yourself here alphabetically when you submit your first pull request.
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Topic :: Software Development :: Libraries :: Python Modules
