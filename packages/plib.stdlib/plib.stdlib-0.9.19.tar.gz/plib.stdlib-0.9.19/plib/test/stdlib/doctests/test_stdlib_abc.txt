Test to ensure that the ``plib`` abstract container classes are registered
with the appropriate abstract base classes. (This should now be moot since
the ``plib`` classes actually inherit from the appropriate ABCs, but we
keep it as a sanity check.)

    >>> from plib.stdlib.coll import abstractcontainer, abstractsequence, abstractlist
    >>> from plib.stdlib.coll import basecontainer, basesequence, baselist
    >>> from plib.stdlib.coll import abstractkeyed, abstractmapping, abstractdict
    >>> from plib.stdlib.coll import basekeyed, basemapping, basedict
    >>> from collections import Sequence, MutableSequence, Mapping, MutableMapping
    >>> issubclass(abstractcontainer, Sequence)
    True
    >>> issubclass(abstractsequence, Sequence)
    True
    >>> issubclass(abstractlist, Sequence)
    True
    >>> issubclass(basecontainer, Sequence)
    True
    >>> issubclass(basesequence, Sequence)
    True
    >>> issubclass(baselist, Sequence)
    True
    >>> issubclass(abstractcontainer, MutableSequence)
    False
    >>> issubclass(abstractsequence, MutableSequence)
    False
    >>> issubclass(abstractlist, MutableSequence)
    True
    >>> issubclass(basecontainer, MutableSequence)
    False
    >>> issubclass(basesequence, MutableSequence)
    False
    >>> issubclass(baselist, MutableSequence)
    True
    >>> issubclass(abstractkeyed, Mapping)
    True
    >>> issubclass(abstractmapping, Mapping)
    True
    >>> issubclass(abstractdict, Mapping)
    True
    >>> issubclass(basekeyed, Mapping)
    True
    >>> issubclass(basemapping, Mapping)
    True
    >>> issubclass(basedict, Mapping)
    True
    >>> issubclass(abstractkeyed, MutableMapping)
    False
    >>> issubclass(abstractmapping, MutableMapping)
    False
    >>> issubclass(abstractdict, MutableMapping)
    True
    >>> issubclass(basekeyed, MutableMapping)
    False
    >>> issubclass(basemapping, MutableMapping)
    False
    >>> issubclass(basedict, MutableMapping)
    True
