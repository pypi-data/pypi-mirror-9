package xslt {
    class mods_nonp_single as "MARC21slim2MODS3-4-NDK.xsl" <<X, Green>> {
        Converts Aleph's non-periodical
        non-multi-monograph metadata to
        MODS.
    }
    class mods_nonp_multi as "MARC21toMultiMonographTitle.xsl" <<X, Green>> {
        Converts Aleph's non-periodical
        multi-monograph metadata to MODS.
    }
    class mods_per as "MARC21toPeriodicalTitle.xsl" <<X, Green>> {
        Converts Aleph's periodical
        metadata to MODS.
    }
}

class xslt_transformer as "xslt_transformer.py" <<M, Red>> {
    Used to transform Aleph's metadata to MODS.

    $templater:module:xslt_transformer
}

mods_nonp_single -d-> xslt_transformer: reads
mods_nonp_multi .d.> xslt_transformer: reads
mods_per .d.> xslt_transformer: reads

class fn_composers as "fn_composers.py" <<M, Red>> {
    Dynamically creates filenames.

    $templater:module:fn_composers
}

class checksum_generator as "checksum_generator.py" <<M, Red>> {
    Generates checksums for all files in SIP
    package.

    $templater:module:checksum_generator
}

class mods_postprocessor as "mods_postprocessor.py" <<M, Red>> {
    Used to fix data after XSLT templates.

    $templater:module:mods_postprocessor
}

class settings as "settings.py" <<M, Red>> {
    Project settings.

    $templater:module:settings
}

class structures as "structures.py" <<M, Red>> {
    AMQP communication structures.
    ---
    $templater:module:structures
}

class ltp as "ltp.py" <<M, Red>> {
    Creates SIP package for LTP.

    $templater:module:ltp
}

class init as "_â€‹_init__.py" <<M, Red>> {
    Handles AMQP communication.

    $templater:module:__init__
}

settings -r-> ltp
xslt_transformer --d-> ltp

fn_composers -d-> ltp
checksum_generator -d-> ltp

ltp -d-> init
structures -l-> init
settings --> init

mods_postprocessor -r-> xslt_transformer: fixes
xslt_transformer --> mods_postprocessor