/**
 * This file includes all of the configuration variables used by the Python
 * module. If there's a configurable element of the module and it's not
 * described in here, there's been a terrible mistake.
 */
{
    /**
     * Whether instrumentation is enabled.
     */
    "enabled": true,

    "transport": {
        "http": {
                /**
                 * Registered username
                 */
                "username": "",
                /**
                 * Registered password
                 */
                "password": "",
                /**
                 * HTTP(S) protocol type
                 */
                "protocol": "https",
                /**
                 * Hostname for the collector
                 */
                "host": "vmerlin.cf",
                /**
                 * The port on which the collector will be listening.
                 * Non-positive value means choose according to protocol: HTTP=80, HTTS=443
                 */
                "port": -1,
                /**
                 * The collector path part of the URL
                 */
                "context": "insight/agent",
                /**
                 * Timeout (sec.) for communicating with the dashboard
                 */
                "responseTimeout": 30,
                /**
                 * HTTPS certificates configuration for communicating with the collector
                 */
                "validateCertificates": true,
                /**
                 * If >0 then data posted to the dashboard will be pretty-printed
                 * using the specified indentation
                 */
                "jsonPrettyPrintIndent": 0
            }
        },
        
    /**
     * Dispatching configuration
     */
    "dispatcher": {
            /**
             * A unique (!) identifier for the HOST where the application is
             * running. If {@code null}/empty then {@code VMERLIN_AGENT_HOSTID}
             * environment variable is used, and if that is missing then
             * {@code os.hostname()} is used
             */
            "hostid": "",
            /**
             * A unique (!) agent identifier for the monitored application
             * Recommend using 'uuidgen -r' - if not specified, then 'hostid'
             * value is used
             */
            "agentid": "",
            /**
             * A mnemonic (ONE word) name for the application - may
             * contain hyphens - e.g., 'travel', 'wine-cellar', etc..
             * If not provided then the (base) name of folder of the "main"
             * script is used
             */
            "applicationName": "",
            /**
             * A user-friendly name for the server - if missing/empty
             * then the current host name or IP address will be used
             */
            "serverLabel": "",
            /**
             * Time (seconds) to flush pending items even if max. trace
             * buffer not reached (also the heartbeat period)
             */
            "pendingFlushInterval": 15,
            /**
             * Time (seconds) to send sync. resource properties command
             */
            "syncResourceInterval": 1800,
            /**
             * Max number of items to store in memory before publishing. If the
             * number is reached before the flush interval is reached then the
             * pending traces are flushed anyway
             */
            "maxPendingItems": 256,
            /**
             * Factor to use for logging messages about failure to flush, in order 
             * to avoid having a logged message every flush interval. Using a
             * non-positive value in effect causes ALL warnings to be shown
             */
            "errorsDampenFactor": 20 
        },

    /**
     * Logger configuration - contains ONE sub-member whose name indicates
     * the logger to be used and whose properties depend on the actual
     * selected implementation.
     */
    "logger": {
            /**
             * The actual implementation to be used: console (default),
             * logging, etc.. Each implementation has a separate configuration
             * sub-section containing extra values. 
             */
            "implementation": "console",

            /**
             * Console logger specification
             */
            "console": {
                /**
                 * Can be ALL/ERROR/WARNING/INFO/DEBUG/TRACE/OFF
                 */
                "threshold": "INFO",
                /**
                 * Flush output after every line
                 */
                "autoFlush": true,
                /**
                 * Can be stdout/stderr
                 */
                "target": "stdout",
                /*
                 * Date/time format - see time.strftime
                 */
                "format": "%Y-%m-%d %H:%M:%S",
                /*
                 * A non-positive value cause traceback not to be displayed
                 */
                "stackTraceDepth": 10
            },
            
            /**
             * Uses the Python 'logging' module
             */
            "logging": {
            }
        },

    /**
     * Instrumentors (a.k.a. "melders") configuration - each melder MUST have at
     * least an 'enabled' field and a 'configuration' one. The actual configuration field
     * format depends on the specific melder. The melder's name serves as a dynamic
     * module resolution under the 'melders' sub-folder
     */
    "melders": {
        "django": {
            "enabled": false,
            "description": "Instruments Django server handling of requests",
            "configuration": {
                    "reqHeaders": [],
                    "rspHeaders": []
                }
        },

       "tornado": {
            "enabled": false,
            "description": "Instruments Tornado server handling of requests",
            "configuration": {
                    "reqHeaders": [],
                    "rspHeaders": []
                }
        },

       "bottle": {
            "enabled": false,
            "description": "Instruments Bottle server handling of requests",
            "configuration": {
                    "reqHeaders": [],
                    "rspHeaders": []
                }
        },

        "mysql": {
            "enabled": false,
            "description": "Instruments MySQL query operations",
            "configuration": { }
        },

        "sqlite3": {
            "enabled": false,
            "description": "Instruments sqlite3 query operations",
            "configuration": { }
        },

        "pymongo": {
            "enabled": false,
            "description": "Instruments Pymongo collection operations",
            "configuration": { }
        },

        "redis": {
            "enabled": false,
            "description": "Instruments Redis commands",
            "configuration": { }
        }
    }
}