#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2014, 7, 26, 12, 12, 8, 5)

__all__ = [
    'mwParser',
    'mwSemantics',
    'main'
]


class mwParser(Parser):
    def __init__(self, whitespace='', nameguard=False, **kwargs):
        super(mwParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            **kwargs
        )

    @graken()
    def _blank_(self):
        with self._optional():
            self._pattern(r'[ \t]+')

    @graken()
    def _multiline_blank_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._empty_line_()
                    self._check_bol_skip_()
                with self._option():
                    self._pattern(r'[ \t]+')
                self._error('expecting one of: [ \\t]+')
        self._closure(block0)

    @graken()
    def _document_(self):

        def block1():
            with self._ifnot():
                self._empty_tail_()
            self._document_block_()
        self._closure(block1)
        self.ast['blocks'] = self.last_node
        with self._optional():
            self._empty_tail_()
        self._check_eof()

        self.ast._define(
            ['blocks'],
            []
        )

    @graken()
    def _empty_tail_(self):

        def block0():
            self._empty_line_()
        self._closure(block0)
        self._blank_()
        self._check_eof()

    @graken()
    def _document_block_(self):
        with self._optional():
            self._empty_line_()
        self._block_()
        self.ast['@'] = self.last_node

    @graken()
    def _empty_line_(self):
        self._pattern(r'[ \t]*\n')

    @graken()
    def _block_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._block_not_par_()
                with self._option():
                    self._paragraph_()
                self._error('no available options')
        self._cut()

    @graken()
    def _block_not_par_(self):
        with self._choice():
            with self._option():
                self._block_at_bol_()
            with self._option():
                self._block_anywhere_()
            self._error('no available options')

    @graken()
    def _block_at_bol_(self):
        with self._if():
            self._pattern(r'^')
        with self._group():
            with self._choice():
                with self._option():
                    self._heading_block_()
                with self._option():
                    self._horizontal_rule_block_()
                with self._option():
                    self._table_block_()
                with self._option():
                    self._list_block_()
                with self._option():
                    self._toc_block_()
                with self._option():
                    self._wspre_block_()
                self._error('no available options')

    @graken()
    def _block_anywhere_(self):
        with self._choice():
            with self._option():
                self._html_block_()
            with self._option():
                self._html_block_no_wspre_()
            with self._option():
                self._html_p_()
            with self._option():
                self._pre_()
            with self._option():
                self._html_heading_()
            with self._option():
                self._html_table_()
            with self._option():
                self._html_list_()
            with self._option():
                self._html_dl_()
            self._error('no available options')

    @graken()
    def _heading_block_(self):
        self._heading_()
        self.ast['@'] = self.last_node
        self._blank_()
        with self._optional():
            self._comment_()
        self._blank_()
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error('expecting one of: \\n')

        def block2():
            self._empty_line_()
        self._closure(block2)

    @graken()
    def _heading_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._h6_()
                with self._option():
                    self._h5_()
                with self._option():
                    self._h4_()
                with self._option():
                    self._h3_()
                with self._option():
                    self._h2_()
                with self._option():
                    self._h1_()
                self._error('no available options')
        self.ast['@'] = self.last_node

    @graken()
    def _h6_(self):
        self._token('======')
        self._push_no_h6_()
        self._heading_inline_()
        self.ast['@'] = self.last_node
        self._pop_no_()
        self._token('======')

    @graken()
    def _h5_(self):
        self._token('=====')
        self._push_no_h5_()
        self._heading_inline_()
        self.ast['@'] = self.last_node
        self._pop_no_()
        self._token('=====')

    @graken()
    def _h4_(self):
        self._token('====')
        self._push_no_h4_()
        self._heading_inline_()
        self.ast['@'] = self.last_node
        self._pop_no_()
        self._token('====')

    @graken()
    def _h3_(self):
        self._token('===')
        self._push_no_h3_()
        self._heading_inline_()
        self.ast['@'] = self.last_node
        self._pop_no_()
        self._token('===')

    @graken()
    def _h2_(self):
        self._token('==')
        self._push_no_h2_()
        self._heading_inline_()
        self.ast['@'] = self.last_node
        self._pop_no_()
        self._token('==')

    @graken()
    def _h1_(self):
        self._token('=')
        self._push_no_h1_()
        self._heading_inline_()
        self.ast['@'] = self.last_node
        self._pop_no_()
        self._token('=')

    @graken()
    def _heading_inline_(self):
        self._push_no_nl_()
        self._heading_content_()
        self._pop_no_()

    @graken()
    def _heading_content_(self):

        def block0():
            self._check_ifnots_()
            self._pattern(r'(.|\n)')
        self._closure(block0)

    @graken()
    def _push_no_h6_(self):
        pass

    @graken()
    def _push_no_h5_(self):
        pass

    @graken()
    def _push_no_h4_(self):
        pass

    @graken()
    def _push_no_h3_(self):
        pass

    @graken()
    def _push_no_h2_(self):
        pass

    @graken()
    def _push_no_h1_(self):
        pass

    @graken()
    def _horizontal_rule_block_(self):
        self._pattern(r'-{4,}')
        self._blank_()
        with self._optional():
            self._pattern(r'\n')

    @graken()
    def _list_block_(self):
        self._list_list_()
        self.ast['@'] = self.last_node
        with self._group():
            with self._choice():
                with self._option():
                    self._list_newline_()
                with self._option():
                    self._check_eof()
                self._error('no available options')

    @graken()
    def _list_list_(self):
        with self._choice():
            with self._option():
                self._ul_block_()
            with self._option():
                self._ol_block_()
            with self._option():
                self._dl_block_()
            self._error('no available options')

    @graken()
    def _list_newline_(self):
        self._pattern(r'\n')
        self._check_bol_skip_()

    @graken()
    def _ul_block_(self):
        self._token('*')
        self._push_bol_skip_ul_()
        self._list_li_()
        self.ast.setlist('li', self.last_node)

        def block1():
            self._list_newline_()
            self._list_li_()
            self.ast['li'] = self.last_node
        self._closure(block1)
        self._pop_bol_skip_()

        self.ast._define(
            ['li'],
            ['li']
        )

    @graken()
    def _ol_block_(self):
        self._token('#')
        self._push_bol_skip_ol_()
        self._list_li_()
        self.ast.setlist('li', self.last_node)

        def block1():
            self._list_newline_()
            self._list_li_()
            self.ast['li'] = self.last_node
        self._closure(block1)
        self._pop_bol_skip_()

        self.ast._define(
            ['li'],
            ['li']
        )

    @graken()
    def _dl_block_(self):
        self._pattern(r'[;:]')
        self._push_bol_skip_dl_()
        self._dt_or_dd_()
        self.ast.setlist('li', self.last_node)

        def block1():
            self._list_newline_()
            self._dt_or_dd_()
            self.ast['li'] = self.last_node
        self._closure(block1)
        self._pop_bol_skip_()

        self.ast._define(
            ['li'],
            ['li']
        )

    @graken()
    def _push_bol_skip_ul_(self):
        pass

    @graken()
    def _push_bol_skip_ol_(self):
        pass

    @graken()
    def _push_bol_skip_dl_(self):
        pass

    @graken()
    def _dt_or_dd_(self):
        with self._choice():
            with self._option():
                self._dl_dt_()
            with self._option():
                self._dl_dd_()
            self._error('no available options')

    @graken()
    def _dl_dt_(self):
        self._pattern(r'(?<=;)')
        self._list_dt_()
        self.ast['@'] = self.last_node

    @graken()
    def _dl_dd_(self):
        self._pattern(r'(?<=:)')
        self._list_li_()
        self.ast['@'] = self.last_node

    @graken()
    def _list_li_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._list_list_()
                    self.ast.setlist('sublists', self.last_node)
                with self._option():
                    self._li_inline_()
                    self.ast['inline'] = self.last_node
                self._error('no available options')

        def block3():
            self._list_sublist_()
            self.ast.setlist('sublists', self.last_node)
        self._closure(block3)

        self.ast._define(
            ['inline'],
            ['sublists']
        )

    @graken()
    def _li_inline_(self):
        self._push_no_nl_()
        self._inline_()
        self.ast['@'] = self.last_node
        self._pop_no_()

    @graken()
    def _list_sublist_(self):
        self._list_newline_()
        self._list_list_()
        self.ast['@'] = self.last_node

    @graken()
    def _list_dt_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._list_list_()
                    self.ast.setlist('sublists', self.last_node)

                    def block1():
                        self._list_sublist_()
                        self.ast.setlist('sublists', self.last_node)
                    self._closure(block1)
                with self._option():
                    self._dt_inline_dd_()
                    self.ast['inline_dd'] = self.last_node
                with self._option():
                    self._li_inline_()
                    self.ast['inline'] = self.last_node

                    def block5():
                        self._list_sublist_()
                        self.ast.setlist('sublists', self.last_node)
                    self._closure(block5)
                self._error('no available options')

        self.ast._define(
            ['inline_dd', 'inline'],
            ['sublists']
        )

    @graken()
    def _dt_inline_dd_(self):
        self._push_no_nl_()
        self._push_ifnot_dt_()
        self._inline_()
        self.ast['dt'] = self.last_node
        self._pop_ifnot_()
        self._token(':')
        self._inline_()
        self.ast['dd'] = self.last_node
        self._pop_no_()

        self.ast._define(
            ['dt', 'dd'],
            []
        )

    @graken()
    def _push_ifnot_dt_(self):
        pass

    @graken()
    def _wspre_block_(self):
        self._check_wspre_()
        with self._if():
            self._pattern(r'^')
        self._token(' ')
        with self._ifnot():
            self._empty_line_()
        self._push_bol_skip_wspre_()
        self._wspre_inline_()
        self.ast['@'] = self.last_node
        self._pop_bol_skip_()
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error('expecting one of: \\n')

    @graken()
    def _wspre_inline_(self):

        def block1():
            with self._ifnot():
                self._block_anywhere_()
            self._wspre_inline_one_()
        self._positive_closure(block1)

        self.ast['content'] = self.last_node

        self.ast._define(
            ['content'],
            []
        )

    @graken()
    def _wspre_inline_one_(self):
        with self._choice():
            with self._option():
                self._wspre_newline_()
            with self._option():
                self._inline_impl_one_no_newline_()
            self._error('no available options')

    @graken()
    def _wspre_newline_(self):
        self._empty_line_()
        self.ast['@'] = self.last_node
        self._check_bol_skip_()

    @graken()
    def _push_bol_skip_wspre_(self):
        pass

    @graken()
    def _push_wspre_off_(self):
        pass

    @graken()
    def _pop_wspre_(self):
        pass

    @graken()
    def _set_wspre_on_(self):
        pass

    @graken()
    def _check_wspre_(self):
        pass

    @graken()
    def _check_ifnots_(self):
        self._check_ifnot_()
        self._check_no_()

    @graken()
    def _pop_ifnot_(self):
        pass

    @graken()
    def _check_ifnot_(self):
        pass

    @graken()
    def _pop_no_(self):
        pass

    @graken()
    def _check_no_(self):
        pass

    @graken()
    def _push_no_nl_(self):
        pass

    @graken()
    def _pop_bol_skip_(self):
        pass

    @graken()
    def _check_bol_skip_(self):
        pass

    @graken()
    def _toc_block_(self):
        with self._choice():
            with self._option():
                self._toc_()
            with self._option():
                self._notoc_()
            with self._option():
                self._forcetoc_()
            self._error('no available options')

    @graken()
    def _toc_(self):
        self._blank_()
        self._token('__TOC__')
        self._blank_()
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error('expecting one of: \\n')

    @graken()
    def _notoc_(self):
        self._blank_()
        self._token('__NOTOC__')
        self._blank_()
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error('expecting one of: \\n')

    @graken()
    def _forcetoc_(self):
        self._blank_()
        self._token('__FORCETOC__')
        self._blank_()
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error('expecting one of: \\n')

    @graken()
    def _table_attribute_junk_(self):

        def block0():
            with self._ifnot():
                self._html_attribute_()
            self._pattern(r'[^ \t\n]*')
            self._pattern(r'[ \t]+')
        self._closure(block0)

    @graken()
    def _table_attribute_one_(self):
        self._html_attribute_()
        self.ast['@'] = self.last_node
        with self._optional():
            self._table_attribute_junk_()

    @graken()
    def _table_attributes_(self):
        with self._optional():
            self._table_attribute_junk_()

        def block1():
            self._table_attribute_one_()
        self._closure(block1)
        self.ast['@'] = self.last_node

    @graken()
    def _table_cell_attribute_junk_(self):

        def block0():
            with self._ifnot():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('|')
                        with self._option():
                            self._html_attribute_()
                        self._error('expecting one of: |')
            self._pattern(r'[^| \t\n]*')
            self._pattern(r'[ \t]+')
        self._closure(block0)

    @graken()
    def _table_cell_attribute_one_(self):
        self._html_attribute_()
        self.ast['@'] = self.last_node
        with self._optional():
            self._table_cell_attribute_junk_()

    @graken()
    def _table_cell_attributes_(self):
        with self._optional():
            self._table_cell_attribute_junk_()

        def block1():
            self._table_cell_attribute_one_()
        self._closure(block1)
        self.ast['@'] = self.last_node

    @graken()
    def _table_header_attribute_junk_(self):

        def block0():
            with self._ifnot():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('|')
                        with self._option():
                            self._token('!!')
                        with self._option():
                            self._token('||')
                        with self._option():
                            self._html_attribute_()
                        self._error('expecting one of: !! | ||')
            self._pattern(r'(?:[^|! \t\n]+|!(?!!))*')
            self._pattern(r'[ \t]+')
        self._closure(block0)

    @graken()
    def _table_header_attribute_one_(self):
        self._html_attribute_()
        self.ast['@'] = self.last_node
        with self._optional():
            self._table_header_attribute_junk_()

    @graken()
    def _table_header_attributes_(self):
        with self._optional():
            self._table_header_attribute_junk_()

        def block1():
            self._table_header_attribute_one_()
        self._closure(block1)
        self.ast['@'] = self.last_node

    @graken()
    def _table_block_(self):
        self._blank_()
        self._pattern(r':*')
        self.ast['indent'] = self.last_node
        self._token('{|')
        self._table_attributes_()
        self.ast['attribs'] = self.last_node
        with self._optional():

            def block2():
                self._empty_line_()
            self._positive_closure(block2)

            with self._optional():
                self._table_caption_()
                self.ast['caption'] = self.last_node
            self._table_rows_()
            self.ast['rows'] = self.last_node
        self._blank_()
        self._token('|}')
        self._blank_()
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error('expecting one of: \\n')

        self.ast._define(
            ['indent', 'attribs', 'caption', 'rows'],
            []
        )

    @graken()
    def _table_caption_(self):
        self._blank_()
        self._token('|+')
        with self._optional():
            self._table_cell_attributes_()
            self.ast['attribs'] = self.last_node
            self._blank_()
            self._token('|')
        self._table_mode_document_()
        self.ast['content'] = self.last_node

        self.ast._define(
            ['attribs', 'content'],
            []
        )

    @graken()
    def _table_rows_(self):
        with self._optional():
            self._table_row_first_()
            self.ast['first'] = self.last_node

        def block2():
            self._table_row_()
        self._closure(block2)
        self.ast['rest'] = self.last_node

        self.ast._define(
            ['first', 'rest'],
            []
        )

    @graken()
    def _table_row_first_(self):

        def block1():
            with self._choice():
                with self._option():
                    self._table_data_()
                with self._option():
                    self._table_header_()
                self._error('no available options')
        self._positive_closure(block1)

        self.ast['content'] = self.last_node

        self.ast._define(
            ['content'],
            []
        )

    @graken()
    def _table_row_(self):
        self._blank_()
        self._pattern(r'\|-+')
        self._table_attributes_()
        self.ast['attribs'] = self.last_node
        self._blank_()
        self._pattern(r'\n+')

        def block2():
            with self._choice():
                with self._option():
                    self._table_data_()
                with self._option():
                    self._table_header_()
                self._error('no available options')
        self._closure(block2)
        self.ast['content'] = self.last_node

        self.ast._define(
            ['attribs', 'content'],
            []
        )

    @graken()
    def _table_header_(self):
        self._blank_()
        self._token('!')
        self._push_no_nl_()

        def block1():
            self._table_header_cell_inline_()
        self._closure(block1)
        self.ast['inline'] = self.last_node
        self._pop_no_()
        self._table_header_cell_()
        self.ast['final'] = self.last_node

        self.ast._define(
            ['inline', 'final'],
            []
        )

    @graken()
    def _table_header_cell_inline_(self):
        with self._optional():
            self._table_header_attributes_()
            self.ast['attribs'] = self.last_node
            self._blank_()
            self._token('|')
        self._blank_()
        self._push_ifnot_table_header_()
        self._inline_()
        self.ast['text'] = self.last_node
        self._pop_ifnot_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('!!')
                with self._option():
                    self._token('||')
                self._error('expecting one of: !! ||')

        self.ast._define(
            ['attribs', 'text'],
            []
        )

    @graken()
    def _table_header_cell_(self):
        with self._optional():
            self._table_cell_attributes_()
            self.ast['attribs'] = self.last_node
            self._blank_()
            self._token('|')
        self._blank_()
        self._table_mode_document_()
        self.ast['content'] = self.last_node

        self.ast._define(
            ['attribs', 'content'],
            []
        )

    @graken()
    def _push_ifnot_table_header_(self):
        pass

    @graken()
    def _table_data_(self):
        self._blank_()
        self._token('|')
        with self._ifnot():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('}')
                    with self._option():
                        self._token('-')
                    self._error('expecting one of: - }')
        self._push_no_nl_()

        def block2():
            self._table_data_cell_inline_()
        self._closure(block2)
        self.ast['inline'] = self.last_node
        self._pop_no_()
        with self._optional():
            self._table_data_cell_()
            self.ast['final'] = self.last_node

        self.ast._define(
            ['inline', 'final'],
            []
        )

    @graken()
    def _table_data_cell_inline_(self):
        with self._optional():
            self._table_cell_attributes_()
            self.ast['attribs'] = self.last_node
            self._blank_()
            self._token('|')
            with self._ifnot():
                self._token('|')
        self._blank_()
        self._push_ifnot_table_data_()
        self._inline_()
        self.ast['text'] = self.last_node
        self._pop_ifnot_()
        self._token('||')

        self.ast._define(
            ['attribs', 'text'],
            []
        )

    @graken()
    def _table_data_cell_(self):
        with self._optional():
            self._table_cell_attributes_()
            self.ast['attribs'] = self.last_node
            self._blank_()
            self._token('|')
            with self._ifnot():
                self._token('|')
        self._blank_()
        with self._optional():
            self._empty_line_()
        self._table_mode_document_()
        self.ast['content'] = self.last_node

        self.ast._define(
            ['attribs', 'content'],
            []
        )

    @graken()
    def _push_ifnot_table_data_(self):
        pass

    @graken()
    def _table_mode_document_(self):
        self._push_no_tableline_()

        def block1():
            with self._ifnot():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._blank_()
                            self._token('|')
                        with self._option():
                            self._blank_()
                            self._token('!')
                        self._error('no available options')
            self._document_block_()
        self._closure(block1)
        self.ast['blocks'] = self.last_node
        self._pop_no_()

        self.ast._define(
            ['blocks'],
            []
        )

    @graken()
    def _push_no_tableline_(self):
        pass

    @graken()
    def _non_special_chars_(self):
        self._pattern(r'((?!(http://|https://|ftp://|telnet://|irc://|ircs://|nntp://|worldwind://|mailto:|news:|svn://|git://|mms://))[^\n\[\]{\'"|=<&!:])+')

    @graken()
    def _paragraph_(self):
        with self._choice():
            with self._option():
                self._paragraph_only_br_()
            with self._option():
                self._paragraph_impl_()
            self._error('no available options')

    @graken()
    def _paragraph_only_br_(self):
        self._empty_line_()
        with self._group():
            with self._choice():
                with self._option():
                    self._empty_line_()
                with self._option():
                    with self._if():
                        self._block_not_par_()
                with self._option():
                    with self._ifnot():
                        self._check_ifnots_()
                self._error('no available options')

    @graken()
    def _paragraph_impl_(self):
        with self._optional():
            self._paragraph_br_()
            self.ast.setlist('content', self.last_node)

        def block1():
            with self._ifnot():
                self._block_anywhere_()
            self._inline_impl_one_()
            self.ast.setlist('content', self.last_node)
        self._positive_closure(block1)

        with self._optional():
            self._empty_line_()
            self.ast.setlist('content', self.last_node)

        self.ast._define(
            [],
            ['content']
        )

    @graken()
    def _paragraph_br_(self):
        self._empty_line_()

    @graken()
    def _inline_(self):

        def block0():
            with self._ifnot():
                self._block_anywhere_()
            self._inline_impl_one_()
        self._closure(block0)

    @graken()
    def _inline_impl_one_(self):
        self._check_ifnots_()
        with self._group():
            with self._choice():
                with self._option():
                    self._inline_newline_()
                with self._option():
                    self._inline_impl_one_no_newline_()
                self._error('no available options')

    @graken()
    def _inline_impl_one_no_newline_(self):
        with self._choice():
            with self._option():
                self._non_special_chars_()
            with self._option():
                self._internal_link_()
            with self._option():
                self._external_link_()
            with self._option():
                self._plain_link_()
            with self._option():
                self._many_quotes_()
            with self._option():
                self._bold_and_italic_()
            with self._option():
                self._bold_()
            with self._option():
                self._italic_()
            with self._option():
                self._html_inline_()
            with self._option():
                self._html_entity_()
            with self._option():
                self._ref_()
            with self._option():
                self._nowiki_()
            with self._option():
                self._comment_()
            with self._option():
                self._pattern(r'.')
            self._error('expecting one of: .')

    @graken()
    def _inline_newline_(self):
        self._empty_line_()
        self._check_bol_skip_()
        with self._ifnot():
            self._empty_line_()
        with self._ifnot():
            self._block_not_par_()

    @graken()
    def _internal_link_trail_(self):
        self._pattern(r"([a-zA-Z]|'(?!'))+")

    @graken()
    def _internal_link_(self):
        self._token('[[')
        self._blank_()
        self._push_ifnot_intlink_target_()
        self._inline_()
        self.ast['target'] = self.last_node
        self._pop_ifnot_()
        self._blank_()
        with self._optional():
            self._token('|')
            self._push_wspre_off_()
            self._push_ifnot_intlink_()
            self._multiline_blank_()
            self._inline_()
            self.ast['text'] = self.last_node
            self._pop_ifnot_()
            self._pop_wspre_()
        self._token(']]')
        with self._optional():
            self._internal_link_trail_()
            self.ast['suffix'] = self.last_node

        self.ast._define(
            ['target', 'text', 'suffix'],
            []
        )

    @graken()
    def _push_ifnot_intlink_target_(self):
        pass

    @graken()
    def _push_ifnot_intlink_(self):
        pass

    @graken()
    def _link_tail_chars_no_parens_(self):
        self._pattern(r'[,;\.:!\?\(\)]+')

    @graken()
    def _link_tail_chars_(self):
        self._pattern(r'[,;\.:!\?]+')

    @graken()
    def _link_terminators_(self):
        with self._choice():
            with self._option():
                self._pattern(r'[\n\[\] \t]')
            with self._option():
                self._check_eof()
            self._error('expecting one of: [\\n\\[\\] \\t]')

    @graken()
    def _link_normal_chars_no_parens_(self):
        self._pattern(r'[^&,;\.:!\?\(\)\n\[\] \t]+')

    @graken()
    def _link_normal_chars_(self):
        self._pattern(r'[^&,;\.:!\?\n\[\] \t]+')

    @graken()
    def _more_link_chars_no_parens_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._link_normal_chars_no_parens_()
                with self._option():
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._link_tail_chars_no_parens_()
                            with self._option():
                                self._html_entity_()
                            self._error('no available options')
                    with self._ifnot():
                        self._link_terminators_()
                with self._option():
                    self._token('&')
                self._error('expecting one of: &')
        self._positive_closure(block0)

        with self._ifnot():
            self._token('(')

    @graken()
    def _more_link_chars_parens_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._link_normal_chars_no_parens_()
                with self._option():
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._link_tail_chars_()
                            with self._option():
                                self._html_entity_()
                            self._error('no available options')
                    with self._ifnot():
                        self._link_terminators_()
                with self._option():
                    self._token('&')
                self._error('expecting one of: &')
        self._positive_closure(block0)

    @graken()
    def _more_link_chars_(self):
        with self._choice():
            with self._option():
                self._more_link_chars_no_parens_()
            with self._option():
                self._more_link_chars_parens_()
            self._error('no available options')

    @graken()
    def _link_chars_(self):
        self._pattern(r'(http://|https://|ftp://|telnet://|irc://|ircs://|nntp://|worldwind://|mailto:|news:|svn://|git://|mms://|//)')
        self._more_link_chars_()

    @graken()
    def _external_link_(self):
        self._token('[')
        self._push_ifnot_extlink_()
        self._link_chars_()
        self.ast['target'] = self.last_node
        self._blank_()
        with self._optional():
            self._push_no_nl_()
            self._inline_()
            self.ast['text'] = self.last_node
            self._pop_no_()
        self._pop_ifnot_()
        self._token(']')

        self.ast._define(
            ['target', 'text'],
            []
        )

    @graken()
    def _push_ifnot_extlink_(self):
        pass

    @graken()
    def _plain_link_(self):
        self._pattern(r'(?=\b)(http://|https://|ftp://|telnet://|irc://|ircs://|nntp://|worldwind://|mailto:|news:|svn://|git://|mms://)')
        self._more_link_chars_()

    @graken()
    def _many_quotes_(self):
        with self._choice():
            with self._option():
                self._token("'")
                with self._if():
                    self._token("'''''")
            with self._option():
                self._token("'")
                with self._if():
                    with self._group():
                        self._token("'''")
                        with self._ifnot():
                            self._token("'")
            self._error("expecting one of: '")

    @graken()
    def _bold_(self):
        self._token("'''")
        with self._ifnot():
            self._token("'")
        self._push_no_nl_()
        self._bold_inline_()
        self.ast['content'] = self.last_node
        self._pop_no_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token("'''")
                with self._option():
                    with self._if():
                        self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error("expecting one of: ''' \\n")

        self.ast._define(
            ['content'],
            []
        )

    @graken()
    def _bold_inline_(self):

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        with self._if():
                            self._many_quotes_()
                    with self._option():
                        with self._ifnot():
                            self._token("'''")
                    self._error("expecting one of: '''")
            self._inline_impl_one_()
        self._closure(block0)

    @graken()
    def _italic_(self):
        self._token("''")
        with self._ifnot():
            self._token("'")
        self._push_no_nl_()
        self._italic_inline_()
        self.ast['content'] = self.last_node
        self._pop_no_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token("''")
                with self._option():
                    with self._if():
                        self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error("expecting one of: '' \\n")

        self.ast._define(
            ['content'],
            []
        )

    @graken()
    def _italic_inline_(self):

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        with self._if():
                            self._many_quotes_()
                    with self._option():
                        with self._group():
                            with self._if():
                                self._token("'''")
                            with self._ifnot():
                                self._token("'''''")
                    with self._option():
                        with self._ifnot():
                            with self._group():
                                with self._choice():
                                    with self._option():
                                        self._token("''")
                                    with self._option():
                                        self._token("'''''")
                                    self._error("expecting one of: '' '''''")
                    self._error("expecting one of: '' ''' '''''")
            self._inline_impl_one_()
        self._closure(block0)

    @graken()
    def _bold_and_italic_(self):
        with self._choice():
            with self._option():
                self._bold_italic_both_()
            with self._option():
                self._italic_bold_()
            with self._option():
                self._bold_italic_()
            self._error('no available options')

    @graken()
    def _bold_italic_both_(self):
        self._token("'''''")
        self._push_no_nl_()
        self._bold_italic_inline_()
        self.ast['content'] = self.last_node
        self._pop_no_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token("'''''")
                with self._option():
                    with self._if():
                        self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error("expecting one of: ''''' \\n")

        self.ast._define(
            ['content'],
            []
        )

    @graken()
    def _italic_bold_(self):
        self._token("'''''")
        self._push_no_nl_()
        self._bold_italic_inline_()
        self.ast['bold_content'] = self.last_node
        self._token("'''")
        self._italic_inline_()
        self.ast['italic_content'] = self.last_node
        self._pop_no_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token("''")
                with self._option():
                    with self._if():
                        self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error("expecting one of: '' \\n")

        self.ast._define(
            ['bold_content', 'italic_content'],
            []
        )

    @graken()
    def _bold_italic_(self):
        self._token("'''''")
        self._push_no_nl_()
        self._bold_italic_inline_()
        self.ast['italic_content'] = self.last_node
        self._token("''")
        self._bold_inline_()
        self.ast['bold_content'] = self.last_node
        self._pop_no_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token("'''")
                with self._option():
                    with self._if():
                        self._pattern(r'\n')
                with self._option():
                    self._check_eof()
                self._error("expecting one of: ''' \\n")

        self.ast._define(
            ['italic_content', 'bold_content'],
            []
        )

    @graken()
    def _bold_italic_inline_(self):

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        with self._if():
                            self._many_quotes_()
                    with self._option():
                        with self._ifnot():
                            self._token("''")
                    self._error("expecting one of: ''")
            self._inline_impl_one_()
        self._closure(block0)

    @graken()
    def _comment_(self):
        self._pattern(r'<!--(.|\n)*?-->')

    @graken()
    def _html_entity_(self):
        self._token('&')
        with self._group():
            with self._choice():
                with self._option():
                    self._html_named_entity_()
                with self._option():
                    self._html_numbered_entity_()
                self._error('no available options')
        self.ast['@'] = self.last_node
        self._token(';')

    @graken()
    def _html_named_entity_(self):
        self._pattern(r'[a-zA-Z0-9]+')
        self.ast['name'] = self.last_node

        self.ast._define(
            ['name'],
            []
        )

    @graken()
    def _html_numbered_entity_(self):
        self._token('#')
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(r'[0-9]+')
                    self.ast['number'] = self.last_node
                with self._option():
                    self._pattern(r'[xX]')
                    self._pattern(r'[0-9a-fA-F]+')
                    self.ast['hexnumber'] = self.last_node
                self._error('expecting one of: [0-9]+ [xX]')

        self.ast._define(
            ['number', 'hexnumber'],
            []
        )

    @graken()
    def _html_attribute_value_doublequote_(self):
        self._token('"')

        def block1():
            with self._choice():
                with self._option():
                    self._pattern(r'[^<"&]+')
                with self._option():
                    self._html_entity_()
                with self._option():
                    self._nowiki_()
                with self._option():
                    self._token('&')
                self._error('expecting one of: & [^<"&]+')
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._token('"')

    @graken()
    def _html_attribute_value_singlequote_(self):
        self._token("'")

        def block1():
            with self._choice():
                with self._option():
                    self._pattern(r"[^<'&]+")
                with self._option():
                    self._html_entity_()
                with self._option():
                    self._nowiki_()
                with self._option():
                    self._token('&')
                self._error("expecting one of: & [^<'&]+")
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._token("'")

    @graken()
    def _html_attribute_value_noquote_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._pattern(r'[a-zA-Z0-9!#$%()*,\-./:;<>?@:[\]^_`{|}~]+')
                with self._option():
                    self._html_entity_()
                with self._option():
                    self._token('&')
                self._error('expecting one of: & [a-zA-Z0-9!#$%()*,\\-./:;<>?@:[\\]^_`{|}~]+')
        self._positive_closure(block0)

    @graken()
    def _html_attribute_value_(self):
        with self._choice():
            with self._option():
                self._html_attribute_value_doublequote_()
            with self._option():
                self._html_attribute_value_singlequote_()
            with self._option():
                self._html_attribute_value_noquote_()
            self._error('no available options')

    @graken()
    def _html_attribute_(self):
        self._html_attribute_name_()
        self.ast['name'] = self.last_node
        self._multiline_blank_()
        self._token('=')
        self._multiline_blank_()
        self._html_attribute_value_()
        self.ast['value'] = self.last_node

        self.ast._define(
            ['name', 'value'],
            []
        )

    @graken()
    def _html_attribute_junk_(self):

        def block0():
            with self._ifnot():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('/>')
                        with self._option():
                            self._token('>')
                        with self._option():
                            self._html_attribute_()
                        self._error('expecting one of: /> >')
            self._pattern(r'(?:[^/<> \t\n]+|/(?!>))*')
            self._pattern(r'[ \t\n]+')
        self._closure(block0)

    @graken()
    def _html_attribute_name_(self):
        self._pattern(r'[:A-Z_a-z0-9][:A-Z_a-z0-9\-.]*')

    @graken()
    def _html_attribute_one_(self):
        self._html_attribute_()
        self.ast['@'] = self.last_node
        with self._optional():
            self._html_attribute_junk_()

    @graken()
    def _html_attributes_(self):
        with self._optional():
            self._html_attribute_junk_()

        def block1():
            self._html_attribute_one_()
        self._closure(block1)
        self.ast['@'] = self.last_node

    @graken()
    def _html_inline_(self):
        self._token('<')
        with self._if():
            self._html_inline_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._inline_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _push_ifnot_html_tag_(self):
        self._pattern(r'\w+')

    @graken()
    def _html_inline_element_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('abbr')
                with self._option():
                    self._token('br')
                with self._option():
                    self._token('big')
                with self._option():
                    self._token('b')
                with self._option():
                    self._token('cite')
                with self._option():
                    self._token('code')
                with self._option():
                    self._token('data')
                with self._option():
                    self._token('del')
                with self._option():
                    self._token('dfn')
                with self._option():
                    self._token('em')
                with self._option():
                    self._token('font')
                with self._option():
                    self._token('ins')
                with self._option():
                    self._token('i')
                with self._option():
                    self._token('kbd')
                with self._option():
                    self._token('mark')
                with self._option():
                    self._token('samp')
                with self._option():
                    self._token('small')
                with self._option():
                    self._token('span')
                with self._option():
                    self._token('strong')
                with self._option():
                    self._token('sub')
                with self._option():
                    self._token('sup')
                with self._option():
                    self._token('strike')
                with self._option():
                    self._token('s')
                with self._option():
                    self._token('time')
                with self._option():
                    self._token('tt')
                with self._option():
                    self._token('u')
                with self._option():
                    self._token('var')
                self._error('expecting one of: abbr b big br cite code data del dfn em font i ins kbd mark s samp small span strike strong sub sup time tt u var')
        with self._ifnot():
            self._pattern(r'\w')

    @graken()
    def _nowiki_(self):
        self._token('<')
        with self._if():
            self._nowiki_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._nowiki_inline_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _nowiki_element_(self):
        with self._group():
            self._token('nowiki')
        with self._ifnot():
            self._pattern(r'\w')

    @graken()
    def _nowiki_inline_(self):

        def block0():
            self._check_ifnot_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._html_entity_()
                    with self._option():
                        self._nowiki_non_special_chars_()
                    with self._option():
                        self._pattern(r'.')
                    self._error('expecting one of: .')
        self._closure(block0)

    @graken()
    def _nowiki_non_special_chars_(self):
        self._pattern(r'[^<&]+')

    @graken()
    def _pre_nowiki_(self):
        self._token('<')
        with self._if():
            self._nowiki_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._pre_nowiki_inline_()
                    self.ast['content'] = self.last_node
                    with self._ifnot():
                        self._check_ifnot_()
                    self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _pre_nowiki_inline_(self):

        def block0():
            self._check_ifnot_()
            with self._ifnot():
                self._pattern(r'</pre[ \t\n]*>')
            with self._group():
                with self._choice():
                    with self._option():
                        self._html_entity_()
                    with self._option():
                        self._nowiki_non_special_chars_()
                    with self._option():
                        self._pattern(r'.')
                    self._error('expecting one of: .')
        self._closure(block0)

    @graken()
    def _pre_(self):
        self._token('<')
        with self._if():
            self._pre_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._pre_inline_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _pre_element_(self):
        self._pattern(r'(?i)(?:pre)(?!\w)')

    @graken()
    def _pre_non_special_chars_(self):
        self._pattern(r'[^<&]+')

    @graken()
    def _pre_inline_(self):

        def block0():
            self._check_ifnot_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._html_entity_()
                    with self._option():
                        self._pre_nowiki_()
                    with self._option():
                        self._pre_non_special_chars_()
                    with self._option():
                        self._pattern(r'.')
                    self._error('expecting one of: .')
        self._closure(block0)

    @graken()
    def _ref_(self):
        self._token('<')
        with self._if():
            self._ref_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_block_no_wspre_document_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _ref_element_(self):
        self._pattern(r'(?i)(?:ref)(?!\w)')

    @graken()
    def _html_heading_(self):
        self._blank_()
        self._token('<')
        with self._if():
            self._html_heading_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._heading_content_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_heading_element_(self):
        self._pattern(r'(?i)(?:h[1-6])(?!\w)')

    @graken()
    def _html_block_(self):
        self._blank_()
        self._token('<')
        with self._if():
            self._html_block_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_block_document_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_block_document_(self):

        def block1():
            self._document_block_()
        self._closure(block1)
        self.ast['blocks'] = self.last_node

        self.ast._define(
            ['blocks'],
            []
        )

    @graken()
    def _html_block_element_(self):
        self._pattern(r'(?i)(?:center|div|references)(?!\w)')

    @graken()
    def _html_block_no_wspre_(self):
        self._blank_()
        self._token('<')
        with self._if():
            self._html_block_no_wspre_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_block_no_wspre_document_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_block_no_wspre_element_(self):
        self._pattern(r'(?i)(?:blockquote)(?!\w)')

    @graken()
    def _html_block_no_wspre_document_(self):
        self._push_wspre_off_()

        def block1():
            self._document_block_()
        self._closure(block1)
        self.ast['blocks'] = self.last_node
        self._pop_wspre_()

        self.ast._define(
            ['blocks'],
            []
        )

    @graken()
    def _html_p_(self):
        self._blank_()
        self._token('<')
        with self._if():
            self._html_p_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_p_inline_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_p_element_(self):
        self._pattern(r'(?i)(?:p)(?!\w)')

    @graken()
    def _html_p_inline_(self):
        self._push_wspre_off_()

        def block0():
            with self._ifnot():
                self._block_anywhere_()
            self._inline_impl_one_()
        self._closure(block0)
        self._pop_wspre_()

    @graken()
    def _html_table_(self):
        self._blank_()
        self._token('<')
        with self._if():
            self._html_table_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_table_content_()
                    self.ast['content'] = self.last_node
                    self._multiline_blank_()
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_table_element_(self):
        self._pattern(r'(?i)(?:table)(?!\w)')

    @graken()
    def _html_table_content_(self):

        def block0():
            self._html_table_content_item_()
        self._closure(block0)

    @graken()
    def _html_table_content_item_(self):
        self._multiline_blank_()
        self._html_table_tr_()
        self.ast['@'] = self.last_node

    @graken()
    def _html_table_tr_(self):
        self._token('<')
        with self._if():
            self._html_table_tr_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_table_tr_content_()
                    self.ast['content'] = self.last_node
                    self._multiline_blank_()
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_table_tr_element_(self):
        self._pattern(r'(?i)(?:tr)(?!\w)')

    @graken()
    def _html_table_tr_content_(self):

        def block0():
            self._html_table_tr_content_item_()
        self._closure(block0)

    @graken()
    def _html_table_tr_content_item_(self):
        self._multiline_blank_()
        with self._group():
            self._html_table_cell_()
        self.ast['@'] = self.last_node

    @graken()
    def _html_table_cell_(self):
        self._token('<')
        with self._if():
            self._html_table_cell_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_block_document_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_table_cell_element_(self):
        self._pattern(r'(?i)(?:td|th)(?!\w)')

    @graken()
    def _html_list_(self):
        self._token('<')
        with self._if():
            self._html_list_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_list_content_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_list_element_(self):
        self._pattern(r'(?i)(?:ul|ol)(?!\w)')

    @graken()
    def _html_list_content_(self):

        def block0():
            self._html_list_content_item_()
        self._closure(block0)

    @graken()
    def _html_list_content_item_(self):
        self._multiline_blank_()
        with self._group():
            self._html_list_item_()
        self.ast['@'] = self.last_node

    @graken()
    def _html_list_item_(self):
        self._token('<')
        with self._if():
            self._html_list_item_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_block_no_wspre_document_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_list_item_element_(self):
        self._pattern(r'(?i)(?:li)(?!\w)')

    @graken()
    def _html_dl_(self):
        self._token('<')
        with self._if():
            self._html_dl_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_dl_content_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_dl_element_(self):
        self._pattern(r'(?i)(?:dl)(?!\w)')

    @graken()
    def _html_dl_content_(self):

        def block0():
            self._html_dl_content_item_()
        self._closure(block0)

    @graken()
    def _html_dl_content_item_(self):
        self._multiline_blank_()
        with self._group():
            self._html_dl_item_()
        self.ast['@'] = self.last_node

    @graken()
    def _html_dl_item_(self):
        self._token('<')
        with self._if():
            self._html_dl_item_element_()
        self._push_ifnot_html_tag_()
        self.ast['name'] = self.last_node
        self._html_attributes_()
        self.ast['attribs'] = self.last_node
        self._multiline_blank_()
        self._html_attribute_junk_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('/>')
                with self._option():
                    self._token('>')
                    self._html_block_no_wspre_document_()
                    self.ast['content'] = self.last_node
                    with self._optional():
                        with self._ifnot():
                            self._check_ifnot_()
                        self._pattern(r'</\w+[ \t\n]*>')
                self._error('expecting one of: />')
        self._pop_ifnot_()
        with self._optional():
            self._empty_line_()

        self.ast._define(
            ['name', 'attribs', 'content'],
            []
        )

    @graken()
    def _html_dl_item_element_(self):
        self._pattern(r'(?i)(?:dt|dd)(?!\w)')


class mwSemantics(object):
    def blank(self, ast):
        return ast

    def multiline_blank(self, ast):
        return ast

    def document(self, ast):
        return ast

    def empty_tail(self, ast):
        return ast

    def document_block(self, ast):
        return ast

    def empty_line(self, ast):
        return ast

    def block(self, ast):
        return ast

    def block_not_par(self, ast):
        return ast

    def block_at_bol(self, ast):
        return ast

    def block_anywhere(self, ast):
        return ast

    def heading_block(self, ast):
        return ast

    def heading(self, ast):
        return ast

    def h6(self, ast):
        return ast

    def h5(self, ast):
        return ast

    def h4(self, ast):
        return ast

    def h3(self, ast):
        return ast

    def h2(self, ast):
        return ast

    def h1(self, ast):
        return ast

    def heading_inline(self, ast):
        return ast

    def heading_content(self, ast):
        return ast

    def push_no_h6(self, ast):
        return ast

    def push_no_h5(self, ast):
        return ast

    def push_no_h4(self, ast):
        return ast

    def push_no_h3(self, ast):
        return ast

    def push_no_h2(self, ast):
        return ast

    def push_no_h1(self, ast):
        return ast

    def horizontal_rule_block(self, ast):
        return ast

    def list_block(self, ast):
        return ast

    def list_list(self, ast):
        return ast

    def list_newline(self, ast):
        return ast

    def ul_block(self, ast):
        return ast

    def ol_block(self, ast):
        return ast

    def dl_block(self, ast):
        return ast

    def push_bol_skip_ul(self, ast):
        return ast

    def push_bol_skip_ol(self, ast):
        return ast

    def push_bol_skip_dl(self, ast):
        return ast

    def dt_or_dd(self, ast):
        return ast

    def dl_dt(self, ast):
        return ast

    def dl_dd(self, ast):
        return ast

    def list_li(self, ast):
        return ast

    def li_inline(self, ast):
        return ast

    def list_sublist(self, ast):
        return ast

    def list_dt(self, ast):
        return ast

    def dt_inline_dd(self, ast):
        return ast

    def push_ifnot_dt(self, ast):
        return ast

    def wspre_block(self, ast):
        return ast

    def wspre_inline(self, ast):
        return ast

    def wspre_inline_one(self, ast):
        return ast

    def wspre_newline(self, ast):
        return ast

    def push_bol_skip_wspre(self, ast):
        return ast

    def push_wspre_off(self, ast):
        return ast

    def pop_wspre(self, ast):
        return ast

    def set_wspre_on(self, ast):
        return ast

    def check_wspre(self, ast):
        return ast

    def check_ifnots(self, ast):
        return ast

    def pop_ifnot(self, ast):
        return ast

    def check_ifnot(self, ast):
        return ast

    def pop_no(self, ast):
        return ast

    def check_no(self, ast):
        return ast

    def push_no_nl(self, ast):
        return ast

    def pop_bol_skip(self, ast):
        return ast

    def check_bol_skip(self, ast):
        return ast

    def toc_block(self, ast):
        return ast

    def toc(self, ast):
        return ast

    def notoc(self, ast):
        return ast

    def forcetoc(self, ast):
        return ast

    def table_attribute_junk(self, ast):
        return ast

    def table_attribute_one(self, ast):
        return ast

    def table_attributes(self, ast):
        return ast

    def table_cell_attribute_junk(self, ast):
        return ast

    def table_cell_attribute_one(self, ast):
        return ast

    def table_cell_attributes(self, ast):
        return ast

    def table_header_attribute_junk(self, ast):
        return ast

    def table_header_attribute_one(self, ast):
        return ast

    def table_header_attributes(self, ast):
        return ast

    def table_block(self, ast):
        return ast

    def table_caption(self, ast):
        return ast

    def table_rows(self, ast):
        return ast

    def table_row_first(self, ast):
        return ast

    def table_row(self, ast):
        return ast

    def table_header(self, ast):
        return ast

    def table_header_cell_inline(self, ast):
        return ast

    def table_header_cell(self, ast):
        return ast

    def push_ifnot_table_header(self, ast):
        return ast

    def table_data(self, ast):
        return ast

    def table_data_cell_inline(self, ast):
        return ast

    def table_data_cell(self, ast):
        return ast

    def push_ifnot_table_data(self, ast):
        return ast

    def table_mode_document(self, ast):
        return ast

    def push_no_tableline(self, ast):
        return ast

    def non_special_chars(self, ast):
        return ast

    def paragraph(self, ast):
        return ast

    def paragraph_only_br(self, ast):
        return ast

    def paragraph_impl(self, ast):
        return ast

    def paragraph_br(self, ast):
        return ast

    def inline(self, ast):
        return ast

    def inline_impl_one(self, ast):
        return ast

    def inline_impl_one_no_newline(self, ast):
        return ast

    def inline_newline(self, ast):
        return ast

    def internal_link_trail(self, ast):
        return ast

    def internal_link(self, ast):
        return ast

    def push_ifnot_intlink_target(self, ast):
        return ast

    def push_ifnot_intlink(self, ast):
        return ast

    def link_tail_chars_no_parens(self, ast):
        return ast

    def link_tail_chars(self, ast):
        return ast

    def link_terminators(self, ast):
        return ast

    def link_normal_chars_no_parens(self, ast):
        return ast

    def link_normal_chars(self, ast):
        return ast

    def more_link_chars_no_parens(self, ast):
        return ast

    def more_link_chars_parens(self, ast):
        return ast

    def more_link_chars(self, ast):
        return ast

    def link_chars(self, ast):
        return ast

    def external_link(self, ast):
        return ast

    def push_ifnot_extlink(self, ast):
        return ast

    def plain_link(self, ast):
        return ast

    def many_quotes(self, ast):
        return ast

    def bold(self, ast):
        return ast

    def bold_inline(self, ast):
        return ast

    def italic(self, ast):
        return ast

    def italic_inline(self, ast):
        return ast

    def bold_and_italic(self, ast):
        return ast

    def bold_italic_both(self, ast):
        return ast

    def italic_bold(self, ast):
        return ast

    def bold_italic(self, ast):
        return ast

    def bold_italic_inline(self, ast):
        return ast

    def comment(self, ast):
        return ast

    def html_entity(self, ast):
        return ast

    def html_named_entity(self, ast):
        return ast

    def html_numbered_entity(self, ast):
        return ast

    def html_attribute_value_doublequote(self, ast):
        return ast

    def html_attribute_value_singlequote(self, ast):
        return ast

    def html_attribute_value_noquote(self, ast):
        return ast

    def html_attribute_value(self, ast):
        return ast

    def html_attribute(self, ast):
        return ast

    def html_attribute_junk(self, ast):
        return ast

    def html_attribute_name(self, ast):
        return ast

    def html_attribute_one(self, ast):
        return ast

    def html_attributes(self, ast):
        return ast

    def html_inline(self, ast):
        return ast

    def push_ifnot_html_tag(self, ast):
        return ast

    def html_inline_element(self, ast):
        return ast

    def nowiki(self, ast):
        return ast

    def nowiki_element(self, ast):
        return ast

    def nowiki_inline(self, ast):
        return ast

    def nowiki_non_special_chars(self, ast):
        return ast

    def pre_nowiki(self, ast):
        return ast

    def pre_nowiki_inline(self, ast):
        return ast

    def pre(self, ast):
        return ast

    def pre_element(self, ast):
        return ast

    def pre_non_special_chars(self, ast):
        return ast

    def pre_inline(self, ast):
        return ast

    def ref(self, ast):
        return ast

    def ref_element(self, ast):
        return ast

    def html_heading(self, ast):
        return ast

    def html_heading_element(self, ast):
        return ast

    def html_block(self, ast):
        return ast

    def html_block_document(self, ast):
        return ast

    def html_block_element(self, ast):
        return ast

    def html_block_no_wspre(self, ast):
        return ast

    def html_block_no_wspre_element(self, ast):
        return ast

    def html_block_no_wspre_document(self, ast):
        return ast

    def html_p(self, ast):
        return ast

    def html_p_element(self, ast):
        return ast

    def html_p_inline(self, ast):
        return ast

    def html_table(self, ast):
        return ast

    def html_table_element(self, ast):
        return ast

    def html_table_content(self, ast):
        return ast

    def html_table_content_item(self, ast):
        return ast

    def html_table_tr(self, ast):
        return ast

    def html_table_tr_element(self, ast):
        return ast

    def html_table_tr_content(self, ast):
        return ast

    def html_table_tr_content_item(self, ast):
        return ast

    def html_table_cell(self, ast):
        return ast

    def html_table_cell_element(self, ast):
        return ast

    def html_list(self, ast):
        return ast

    def html_list_element(self, ast):
        return ast

    def html_list_content(self, ast):
        return ast

    def html_list_content_item(self, ast):
        return ast

    def html_list_item(self, ast):
        return ast

    def html_list_item_element(self, ast):
        return ast

    def html_dl(self, ast):
        return ast

    def html_dl_element(self, ast):
        return ast

    def html_dl_content(self, ast):
        return ast

    def html_dl_content_item(self, ast):
        return ast

    def html_dl_item(self, ast):
        return ast

    def html_dl_item_element(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = mwParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in mwParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for mw.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(args.file, args.startrule, trace=args.trace, whitespace=args.whitespace)
