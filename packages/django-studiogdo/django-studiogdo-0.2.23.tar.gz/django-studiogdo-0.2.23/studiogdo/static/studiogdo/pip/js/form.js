// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var Form;
    return Form = (function() {
      function Form(path) {
        var checkbox, checkboxes, error, _i, _len;
        this.path = path;
        this.update_hidden_checkbox = __bind(this.update_hidden_checkbox, this);
        try {
          $('.form-control.datetimepicker').datetimepicker({
            language: 'fr',
            format: 'DD/MM/YYYY hh:mm:ss',
            weekStart: 1
          });
          $('.form-control.datepicker').datetimepicker({
            language: 'fr',
            format: 'DD/MM/YYYY',
            weekStart: 1
          });
          $('.form-control.timepicker').datetimepicker({
            language: 'fr',
            format: 'hh:mm:ss',
            weekStart: 1
          });
        } catch (_error) {
          error = _error;
          null;
        }
        $("#editer").one("click", (function(_this) {
          return function(evt) {
            var bocall;
            if (evt != null) {
              evt.preventDefault();
            }
            bocall = new BOCall;
            bocall.done = function() {
              return window.location.reload();
            };
            return bocall.applyCommand(_this.path, "$Lock");
          };
        })(this));
        $(".liberer").one("click", (function(_this) {
          return function() {
            var bocall;
            bocall = new BOCall;
            bocall.done = function() {};
            return bocall.applyCommand(_this.path, "$Unlock");
          };
        })(this));
        $('form').one("submit", (function(_this) {
          return function(evt) {
            var checkbox, form, _i, _len, _ref, _results;
            form = $(evt.delegateTarget);
            _ref = form.find("[type=checkbox]");
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              checkbox = _ref[_i];
              if (!checkbox.checked) {
                _results.push(form.append($('<input />').attr('type', 'hidden').attr('name', checkbox.name).attr('value', "false")));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          };
        })(this));
        checkboxes = $("[type=checkbox]").on("change", (function(_this) {
          return function(evt) {
            var checkbox;
            checkbox = $(evt.target);
            return _this.update_hidden_checkbox(checkbox);
          };
        })(this));
        for (_i = 0, _len = checkboxes.length; _i < _len; _i++) {
          checkbox = checkboxes[_i];
          this.update_hidden_checkbox($(checkbox));
        }
      }

      Form.prototype.update_hidden_checkbox = function(checkbox) {
        var disabled, hidden;
        hidden = checkbox.siblings("[type=hidden]");
        if (hidden.size()) {
          disabled = checkbox.is(":checked");
          return hidden.prop("disabled", disabled);
        }
      };

      return Form;

    })();
  });

}).call(this);

//# sourceMappingURL=form.js.map
