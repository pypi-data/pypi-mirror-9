:tocdepth: 2

.. _summary:

************************************
**Summary of implemented functions**
************************************

===========================================
*Operators to manipulate PICOS Expressions*
===========================================

+--------------+--------------------------------+
| **Operator** | **Interpretation**             |
+==============+================================+
|    ``+``     | addition                       |
+--------------+--------------------------------+
|    ``+=``    | inplace addition               |
+--------------+--------------------------------+
|    ``-``     | substraction                   |
+--------------+--------------------------------+
|    ``*``     | multiplication                 |
+--------------+--------------------------------+
|    ``^``     | Hadamard (elementwise) product |
+--------------+--------------------------------+
|    ``|``     | scalar product                 |
+--------------+--------------------------------+
|    ``/``     | division                       |
+--------------+--------------------------------+
|    ``**``    | exponentiation                 |
+--------------+--------------------------------+
|    ``abs()`` | Euclidean (or Frobenius) norm  |
+--------------+--------------------------------+
|    ``[]``    | slicing                        |
+--------------+--------------------------------+
|    ``&``     | horizontal concatenation       |
+--------------+--------------------------------+
|    ``//``    | vertical concatenation         |
+--------------+--------------------------------+
|    ``.T``    | transposition                  |
+--------------+--------------------------------+
|    ``.H``    | Hermitian transposition        |
+--------------+--------------------------------+
|    ``.Tx``   | partial transposition          |
+--------------+--------------------------------+
|    ``.conj`` | complex conjugate              |
+--------------+--------------------------------+
|    ``.real`` | real part                      |
+--------------+--------------------------------+
|    ``.imag`` | imaginary part                 |
+--------------+--------------------------------+

===================================
*Operators that create constraints*
===================================


+-----------------+-----------------------------------+
| **Operator**    | **Interpretation**                |
+=================+===================================+
| ``<`` or ``<=`` | less or equal                     |
+-----------------+-----------------------------------+
| ``>`` or ``>=`` | larger or equal                   |
+-----------------+-----------------------------------+
| ``==``          | equal                             |
+-----------------+-----------------------------------+
| ``<<``          | Löwner ordering  :math:`\preceq`, |
|                 | or set membership  :math:`\in`    |
+-----------------+-----------------------------------+
| ``>>``          | Löwner ordering  :math:`\succeq`, |
|                 | or set membership   :math:`\ni`   |
+-----------------+-----------------------------------+

==========================================
*functions that create affine expressions*
==========================================

+--------------------------------------------------------------+-------------------------------------------+
| **function**                                                 |  **short doc**                            |
+==============================================================+===========================================+
|:func:`sum() <picos.tools.sum>`                               | sums a list of affine expressions         |
+--------------------------------------------------------------+-------------------------------------------+
|:func:`diag() <picos.tools.diag>`                             | diagonal matrix defined by its diagonal   |
+--------------------------------------------------------------+-------------------------------------------+
|:func:`diag_vect() <picos.tools.diag_vect>`                   | vector of diagonal elements of a matrix   |
+--------------------------------------------------------------+-------------------------------------------+
|:func:`new_param() <picos.tools.new_param>`                   | constant affine expression                |
+--------------------------------------------------------------+-------------------------------------------+
|:func:`trace() <picos.tools.trace>`                           | trace of a square affine expression       |
+--------------------------------------------------------------+-------------------------------------------+
|:func:`lowtri() <picos.tools.lowtri>`                         | vector of lower triangular elements       |
+--------------------------------------------------------------+-------------------------------------------+
|:func:`partial_transpose() <picos.tools.partial_transpose>`   | partial transposition                     |
+--------------------------------------------------------------+-------------------------------------------+


========================================
*functions to create convex constraints*
========================================

+-------------------------------------------------------------------+-----------------------------------------+
| **function**                                                      |  **short doc**                          |
+===================================================================+=========================================+
|:func:`geomean() <picos.tools.geomean>`                            | geometric mean                          |
+-------------------------------------------------------------------+-----------------------------------------+
|:func:`norm() <picos.tools.norm>`                                  | (generalized) :math:`L_p-` norm         |
+-------------------------------------------------------------------+-----------------------------------------+
|:func:`tracepow() <picos.tools.tracepow>`                          | trace of a *p*th matrix power           |
+-------------------------------------------------------------------+-----------------------------------------+
|:func:`detrootn() <picos.tools.detrootn>`                          | *n*th root of determinant               |
+-------------------------------------------------------------------+-----------------------------------------+
|:func:`sum_k_largest() <picos.tools.sum_k_largest>`                | sum of k largest elements               |
+-------------------------------------------------------------------+-----------------------------------------+
|:func:`sum_k_smallest() <picos.tools.sum_k_smallest>`              | sum of k smallest elements              |
+-------------------------------------------------------------------+-----------------------------------------+
|:func:`sum_k_largest_lambda() <picos.tools.sum_k_largest_lambda>`  | sum of k largest eigenvalues            |
+-------------------------------------------------------------------+-----------------------------------------+
|:func:`sum_k_smallest_lambda() <picos.tools.sum_k_smallest_lambda>`| sum of k smallest eigenvalues           |
+-------------------------------------------------------------------+-----------------------------------------+
|:func:`lambda_max() <picos.tools.lambda_max>`                      | largest eigenvalue                      |
+-------------------------------------------------------------------+-----------------------------------------+
|:func:`lambda_min() <picos.tools.lambda_min>`                      | smallest eigenvalue                     |
+-------------------------------------------------------------------+-----------------------------------------+

============================
*functions that create sets*
============================

+-------------------------------------------------------------+------------------------------------------------------------------+
| **function**                                                |  **short doc**                                                   |
+=============================================================+==================================================================+
|:func:`ball(r,p) <picos.tools.ball>`                         | a :math:`L_p`- ball of radius ``r``                              |
+-------------------------------------------------------------+------------------------------------------------------------------+
|:func:`simplex(a) <picos.tools.simplex>`                     | a standard simplex                                               |
|                                                             | :math:`\{x\geq 0: \Vert x \Vert_1 \leq a \}`                     |
+-------------------------------------------------------------+------------------------------------------------------------------+
|:func:`truncated_simplex(a) <picos.tools.truncated_simplex>` |                     a set of the form                            |
|                                                             |:math:`\{ 0\leq x\leq 1: \Vert x \Vert_1 \leq a\}`  or            |
|                                                             |:math:`\{x: \Vert x \Vert_\infty \leq 1 \Vert x \Vert_1 \leq a\}` |
+-------------------------------------------------------------+------------------------------------------------------------------+


========================
*Other useful functions*
========================

To transform a problem
----------------------

+-----------------------------------------------------------------+-------------------------------------------+
| **function**                                                    |  **short doc**                            |
+=================================================================+===========================================+
|:func:`convert_quad_to_socp() <picos.tools.convert_quad_to_socp>`| replaces quadratic constraints by         |
|                                                                 | equivalent second order cone constraints  |
+-----------------------------------------------------------------+-------------------------------------------+
|:func:`to_real() <picos.tools.to_real>`                          | transform complex SDP to real SDP         |
+-----------------------------------------------------------------+-------------------------------------------+
|:func:`dualize() <picos.tools.dualize>`                          | returns Lagrangian dual of a problem      |
+-----------------------------------------------------------------+-------------------------------------------+

Get information on a problem
----------------------------

+-----------------------------------------------------------------------------------------+-------------------------------------------+
| **function**                                                                            |  **short doc**                            |
+=========================================================================================+===========================================+
|:func:`get_variable(name) <picos.Problem.get_variable>`                                  | gets the variable object ``name``         |
+-----------------------------------------------------------------------------------------+-------------------------------------------+
|:func:`get_valued_variable(name) <picos.Problem.get_valued_variable>`                    | gets the value of the variable ``name``   |
+-----------------------------------------------------------------------------------------+-------------------------------------------+
|:func:`check_current_value_feasibility() <picos.Problem.check_current_value_feasibility>`| are the current variable value  feasible? |
+-----------------------------------------------------------------------------------------+-------------------------------------------+
|:func:`obj_value() <picos.Problem.obj_value>`                                            | objective for the current variable values |
+-----------------------------------------------------------------------------------------+-------------------------------------------+
|:attr:`.type <picos.Problem.type>`                                                       | returns problem's type                    |
+-----------------------------------------------------------------------------------------+-------------------------------------------+


Other tools
------------

+-----------------------------------------------------------+-------------------------------------------+
| **function**                                              |  **short doc**                            |
+===========================================================+===========================================+
|:func:`available_solvers() <picos.tools.available_solvers>`|  lists installed solvers                  |
+-----------------------------------------------------------+-------------------------------------------+
|:func:`import_cbf() <picos.tools.import_cbf>`              |  imports data from a .cbf file            |
+-----------------------------------------------------------+-------------------------------------------+
|:func:`eval_dict() <picos.tools.eval_dict>`                | evaluates a dictionary of picos variables |
|                                                           | (after a problem has been solved)         |
+-----------------------------------------------------------+-------------------------------------------+
| :func:`write_to_file() <picos.Problem.write_to_file>`     | writes problem to a file                  |
+-----------------------------------------------------------+-------------------------------------------+

