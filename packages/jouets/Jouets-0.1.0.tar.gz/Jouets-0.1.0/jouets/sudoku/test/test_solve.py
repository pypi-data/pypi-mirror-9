#!/usr/bin/env python3

# Copyright 2012-2014 Louis Paternault
#
# This file is part of Jouets.
#
# Jouets is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Jouets is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Jouets.  If not, see <http://www.gnu.org/licenses/>.

"""Test de la résolution de grilles."""

import io
import queue
import unittest

from jouets.sudoku.resolution import resout
from jouets.sudoku.io import charge_fichier
from jouets.sudoku.representation import Grille

TEMOINS = [
    {
        "short": True,
        "problem": (
            "34d.2...e.8.6.1g..7...38.5.1..a..a....d...g......c.g.6.eda.3.74..g"
            "1a3d4...6.b9e8.d968b21ae54c...43...c..8..d2.7.c...6........1.4g.3."
            ".......f..8a...91..c..e..456...d78a9b42513g.8.4c.3...67af29...c.f."
            "769.4.3.2......4...7....f..7..5.g.f8...d..a2.f.9.b...e.867"
            ),
        "solutions": [
            [
                [2, 3, 12, 4, 1, 6, 11, 9, 13, 8, 7, 10, 5, 14, 0, 15],
                [8, 5, 6, 10, 15, 14, 2, 7, 3, 4, 11, 0, 12, 13, 9, 1],
                [14, 9, 13, 7, 8, 0, 12, 3, 5, 1, 15, 6, 4, 11, 10, 2],
                [0, 11, 1, 15, 10, 5, 4, 13, 12, 9, 14, 2, 7, 6, 3, 8],
                [4, 15, 0, 9, 2, 12, 3, 6, 1, 14, 5, 11, 10, 8, 13, 7],
                [6, 12, 8, 5, 7, 10, 1, 0, 9, 13, 4, 3, 11, 15, 2, 14],
                [3, 2, 10, 13, 9, 11, 8, 14, 7, 15, 0, 12, 1, 5, 6, 4],
                [11, 14, 7, 1, 5, 4, 13, 15, 6, 2, 10, 8, 9, 0, 12, 3],
                [15, 4, 2, 6, 3, 1, 5, 12, 11, 0, 8, 14, 13, 10, 7, 9],
                [1, 10, 9, 8, 0, 15, 14, 11, 2, 12, 13, 7, 6, 3, 4, 5],
                [5, 13, 14, 12, 6, 7, 9, 8, 10, 3, 1, 4, 0, 2, 15, 11],
                [7, 0, 3, 11, 13, 2, 10, 4, 15, 5, 6, 9, 14, 1, 8, 12],
                [12, 7, 11, 0, 14, 9, 6, 5, 8, 10, 3, 15, 2, 4, 1, 13],
                [13, 8, 4, 2, 11, 3, 7, 1, 0, 6, 12, 5, 15, 9, 14, 10],
                [10, 6, 5, 3, 4, 13, 15, 2, 14, 7, 9, 1, 8, 12, 11, 0],
                [9, 1, 15, 14, 12, 8, 0, 10, 4, 11, 2, 13, 3, 7, 5, 6],
            ],
            [
                [2, 3, 12, 4, 1, 6, 11, 9, 13, 8, 7, 10, 5, 14, 0, 15],
                [5, 8, 6, 10, 15, 14, 2, 7, 3, 4, 11, 0, 12, 13, 9, 1],
                [14, 9, 13, 7, 8, 0, 12, 3, 5, 1, 15, 6, 4, 11, 10, 2],
                [0, 11, 1, 15, 10, 5, 4, 13, 12, 9, 14, 2, 7, 6, 3, 8],
                [4, 15, 0, 9, 2, 12, 3, 6, 1, 14, 5, 11, 10, 8, 13, 7],
                [6, 12, 8, 5, 7, 10, 1, 0, 9, 13, 4, 3, 11, 15, 2, 14],
                [3, 2, 10, 13, 9, 11, 8, 14, 7, 15, 0, 12, 1, 5, 6, 4],
                [11, 14, 7, 1, 5, 4, 13, 15, 6, 2, 10, 8, 9, 0, 12, 3],
                [15, 4, 2, 6, 3, 1, 5, 12, 11, 0, 8, 14, 13, 10, 7, 9],
                [1, 10, 9, 8, 0, 15, 14, 11, 2, 12, 13, 7, 6, 3, 4, 5],
                [13, 5, 14, 12, 6, 7, 9, 8, 10, 3, 1, 4, 0, 2, 15, 11],
                [7, 0, 3, 11, 13, 2, 10, 4, 15, 5, 6, 9, 14, 1, 8, 12],
                [12, 7, 11, 0, 14, 9, 6, 5, 8, 10, 3, 15, 2, 4, 1, 13],
                [8, 13, 4, 2, 11, 3, 7, 1, 0, 6, 12, 5, 15, 9, 14, 10],
                [10, 6, 5, 3, 4, 13, 15, 2, 14, 7, 9, 1, 8, 12, 11, 0],
                [9, 1, 15, 14, 12, 8, 0, 10, 4, 11, 2, 13, 3, 7, 5, 6],
            ],
            [
                [2, 3, 12, 4, 1, 6, 10, 9, 13, 11, 7, 8, 5, 14, 0, 15],
                [13, 5, 6, 1, 15, 14, 2, 7, 3, 4, 10, 0, 12, 11, 9, 8],
                [8, 9, 14, 0, 11, 4, 12, 3, 5, 1, 15, 6, 7, 13, 10, 2],
                [10, 11, 7, 15, 8, 5, 0, 13, 12, 9, 14, 2, 4, 6, 3, 1],
                [4, 15, 0, 9, 2, 12, 3, 6, 1, 14, 5, 11, 10, 8, 13, 7],
                [6, 12, 8, 5, 7, 10, 1, 0, 9, 13, 4, 3, 11, 15, 2, 14],
                [3, 2, 13, 10, 9, 11, 8, 14, 7, 15, 0, 12, 1, 5, 6, 4],
                [11, 14, 1, 7, 5, 13, 4, 15, 6, 2, 8, 10, 9, 0, 12, 3],
                [15, 4, 2, 6, 3, 1, 5, 12, 0, 8, 11, 14, 13, 10, 7, 9],
                [1, 10, 9, 8, 0, 15, 14, 11, 2, 12, 13, 7, 6, 3, 4, 5],
                [14, 13, 5, 12, 6, 7, 9, 8, 10, 3, 1, 4, 0, 2, 15, 11],
                [7, 0, 3, 11, 10, 2, 13, 4, 15, 5, 6, 9, 14, 1, 8, 12],
                [12, 7, 11, 13, 14, 9, 6, 5, 8, 10, 3, 15, 2, 4, 1, 0],
                [0, 8, 4, 2, 13, 3, 7, 1, 11, 6, 12, 5, 15, 9, 14, 10],
                [5, 6, 10, 3, 4, 0, 15, 2, 14, 7, 9, 1, 8, 12, 11, 13],
                [9, 1, 15, 14, 12, 8, 11, 10, 4, 0, 2, 13, 3, 7, 5, 6],
            ],
            [
                [2, 3, 12, 4, 1, 6, 11, 9, 13, 8, 7, 10, 5, 14, 0, 15],
                [5, 8, 6, 10, 15, 14, 2, 7, 3, 4, 11, 0, 12, 13, 9, 1],
                [13, 9, 14, 7, 8, 0, 12, 3, 5, 1, 15, 6, 4, 11, 10, 2],
                [0, 11, 1, 15, 10, 5, 4, 13, 12, 9, 14, 2, 7, 6, 3, 8],
                [4, 15, 0, 9, 2, 12, 3, 6, 1, 14, 5, 11, 10, 8, 13, 7],
                [6, 12, 8, 5, 7, 10, 1, 0, 9, 13, 4, 3, 11, 15, 2, 14],
                [3, 2, 10, 13, 9, 11, 8, 14, 7, 15, 0, 12, 1, 5, 6, 4],
                [11, 14, 7, 1, 5, 4, 13, 15, 6, 2, 10, 8, 9, 0, 12, 3],
                [15, 4, 2, 6, 3, 1, 5, 12, 11, 0, 8, 14, 13, 10, 7, 9],
                [1, 10, 9, 8, 0, 15, 14, 11, 2, 12, 13, 7, 6, 3, 4, 5],
                [14, 5, 13, 12, 6, 7, 9, 8, 10, 3, 1, 4, 0, 2, 15, 11],
                [7, 0, 3, 11, 13, 2, 10, 4, 15, 5, 6, 9, 14, 1, 8, 12],
                [12, 7, 11, 0, 14, 9, 6, 5, 8, 10, 3, 15, 2, 4, 1, 13],
                [8, 13, 4, 2, 11, 3, 7, 1, 0, 6, 12, 5, 15, 9, 14, 10],
                [10, 6, 5, 3, 4, 13, 15, 2, 14, 7, 9, 1, 8, 12, 11, 0],
                [9, 1, 15, 14, 12, 8, 0, 10, 4, 11, 2, 13, 3, 7, 5, 6],
            ],
        ],
    },
    {
        "short": True,
        "problem": "...232....4....1",
        "solutions": [
            [
                [0, 3, 2, 1],
                [2, 1, 0, 3],
                [1, 0, 3, 2],
                [3, 2, 1, 0],
            ]
        ],
    },
    {
        'short': False,
        'problem': """\
            . . . 2
            3 2 . .
            . . 4 .
            . . . 1
            """,
        'solutions': [
            [
                [0, 3, 2, 1],
                [2, 1, 0, 3],
                [1, 0, 3, 2],
                [3, 2, 1, 0],
            ]
        ],
    },
    {
        'short': False,
        'problem': """\
                6 1 2 . . . 8 . 3
                . 4 . 7 . . . . .
                . . . . . . . . .
                . . . 5 . 4 . 7 .
                3 . . 2 . . . . .
                1 . 6 . . . . . .
                . 2 . . . . . 5 .
                . . . . 8 . 6 . .
                . . . . 1 . . . .
            """,
        'solutions': [],
    },
    {
        'short': False,
        'problem': """\
            8 5 . . . 2 4 . .
            7 2 . . . . . . 9
            . . 4 . . . . . .
            . . . 1 . 7 . . 2
            3 . 5 . . . 9 . .
            . 4 . . . . . . .
            . . . . 8 . . 7 .
            . 1 7 . . . . . .
            . . . . 3 6 . 4 .
            """,
        'solutions': [
            [
                [7, 4, 8, 5, 0, 1, 3, 2, 6],
                [6, 1, 2, 7, 4, 3, 0, 5, 8],
                [0, 5, 3, 2, 6, 8, 4, 1, 7],
                [8, 7, 5, 0, 3, 6, 2, 4, 1],
                [2, 6, 4, 1, 5, 7, 8, 0, 3],
                [1, 3, 0, 4, 8, 2, 6, 7, 5],
                [3, 2, 1, 8, 7, 0, 5, 6, 4],
                [5, 0, 6, 3, 1, 4, 7, 8, 2],
                [4, 8, 7, 6, 2, 5, 1, 3, 0],
                ]
            ],
    },
    {
        'short': False,
        'problem': """\
            8 5 . . . 2 4 . .
            7 2 . . . . . . 9
            . . 4 . . . . . .
            . . . 1 . 7 . . 2
            3 . 5 . . . 9 . .
            . 4 . . . . . . .
            . . . . 8 . . 7 .
            . 1 7 . . . . . .
            . . . . 3 6 . 4 .
            """,
        'solutions': [
            [
                [7, 4, 8, 5, 0, 1, 3, 2, 6],
                [6, 1, 2, 7, 4, 3, 0, 5, 8],
                [0, 5, 3, 2, 6, 8, 4, 1, 7],
                [8, 7, 5, 0, 3, 6, 2, 4, 1],
                [2, 6, 4, 1, 5, 7, 8, 0, 3],
                [1, 3, 0, 4, 8, 2, 6, 7, 5],
                [3, 2, 1, 8, 7, 0, 5, 6, 4],
                [5, 0, 6, 3, 1, 4, 7, 8, 2],
                [4, 8, 7, 6, 2, 5, 1, 3, 0],
                ]
            ],
    },
]

def cherche_solutions(probleme, short):
    """Renvoit la liste des solutions au problème"""
    if short:
        format_fichier = "short"
    else:
        format_fichier = "long"
    solutions = queue.Queue(0)
    resout(
        Grille(charge_fichier(probleme, format_fichier)),
        solutions.put,
        1,
        )
    liste = []
    while solutions.qsize() > 0:
        liste.append(solutions.get().case)
    return liste

def transpose(matrice):
    """Renvoit la transposée de la matrice

    Les matrices sont représentées par des listes de listes.
    """
    return [
        [
            matrice[x][y]
            for x in range(len(matrice))
            ]
        for y in range(len(matrice))
        ]

# pylint: disable=too-many-public-methods
class TestResout(unittest.TestCase):
    """Test de résolution"""

    def test_resout(self):
        """Resolution"""
        for temoin in TEMOINS:
            self.assertListEqual(
                sorted(cherche_solutions(
                    io.StringIO(temoin['problem']),
                    temoin['short'],
                    )),
                sorted([transpose(sol) for sol in temoin['solutions']]),
            )

if __name__ == '__main__':
    unittest.main()
