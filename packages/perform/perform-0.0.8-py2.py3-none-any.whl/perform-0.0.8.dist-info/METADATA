Metadata-Version: 2.0
Name: perform
Version: 0.0.8
Summary: Easily call processes from python
Home-page: http://github.com/BenDoan/perform
Author: Ben Doan
Author-email: ben@bendoan.me
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Utilities


Perform is a python module for calling processes in a simple and easy way.  Each program is added to the perform module as a function that returns the stdout printed by the program.

##usage:
- To call a program:
    import perform
    stdout = perform.ls()

- To pass arguments to a program:
    stdout = perform.git("ls-files", "-m")

- To call a program that contains symbols in its name:
    stdout = perform._("pip2.7", "install", "perform")

- To get extra information from a program:
    obj = perform.ls(return_object=True) # or perform.ls(ro=True)

    stdout = obj.stdout
    stderr = obj.stderr
    errcode = obj.errcode

- To call a command in the shell:
    print(perform._("ls | grep 'py'", shell=True))

- To import a specific command:
    from perform import ls

    print(ls("-a"))

- To use perform for a non-blocking call:
    perform.firefox("google.com", no_return=True)
    perform.firefox("github.com", no_return=True)
    perform.firefox("kernel.org", nr=True)

##more examples
    import perform

    stdout = perform.ls()

    print(perform.git("ls-files", "-m"))

    print(perform._("pip2.7", "install", "perform"))

    stdout = perform.raspistill("-o ~/image.jpg")

    print(perform.python("-c", "import perform;print(perform.echo('hello'))")


